{"path":"","body":{"fixities":[],"aliases":{"Time":[[],{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"datatypes":{},"types":{"inHours":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]},"every":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"second":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"inMilliseconds":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]},"fpsWhen":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]}]},"inSeconds":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]},"inMinutes":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]},"since":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]]}]}]},"millisecond":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"delay":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]},"fps":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]},"hour":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"timestamp":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Var","contents":"a"}]]}]]}]},"minute":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}},"program":[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"delay"},[{"tag":"Span","contents":[{"line":105,"column":16},{"line":105,"column":26},{"doc":"Native.Time.delay"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Time"]},"name":"delay"}}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"timestamp"},[{"tag":"Span","contents":[{"line":99,"column":20},{"line":99,"column":34},{"doc":"Native.Time.timestamp"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Time"]},"name":"timestamp"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Var","contents":"a"}]]}]]}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"since"},[{"tag":"Span","contents":[{"line":83,"column":5},{"line":88,"column":31},{"doc":"let start = map (always 1) s\n    stop = map (always -1) (delay t s)\n    delaydiff = foldp (\\x y -> x + y) 0 (merge start stop)\nin map ((\\x y -> x /= y) 0) delaydiff"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":83,"column":5},{"line":88,"column":31},{"doc":"let start = map (always 1) s\n    stop = map (always -1) (delay t s)\n    delaydiff = foldp (\\x y -> x + y) 0 (merge start stop)\nin map ((\\x y -> x /= y) 0) delaydiff"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"s"},[{"tag":"Span","contents":[{"line":83,"column":5},{"line":88,"column":31},{"doc":"let start = map (always 1) s\n    stop = map (always -1) (delay t s)\n    delaydiff = foldp (\\x y -> x + y) 0 (merge start stop)\nin map ((\\x y -> x /= y) 0) delaydiff"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"stop"},[{"tag":"Span","contents":[{"line":85,"column":16},{"line":85,"column":42},{"doc":"map (always -1) (delay t s)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":16},{"line":85,"column":30},{"doc":"map (always -1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":16},{"line":85,"column":19},{"doc":"map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":85,"column":21},{"line":85,"column":30},{"doc":"always -1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":21},{"line":85,"column":27},{"doc":"always"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"always"}}],[{"tag":"Span","contents":[{"line":85,"column":28},{"line":85,"column":30},{"doc":"-1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":-1}}]]}]]}],[{"tag":"Span","contents":[{"line":85,"column":33},{"line":85,"column":42},{"doc":"delay t s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":33},{"line":85,"column":40},{"doc":"delay t"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":33},{"line":85,"column":38},{"doc":"delay"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"delay"}}],[{"tag":"Span","contents":[{"line":85,"column":39},{"line":85,"column":40},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}]]}],[{"tag":"Span","contents":[{"line":85,"column":41},{"line":85,"column":42},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":83,"column":5},{"line":88,"column":31},{"doc":"let start = map (always 1) s\n    stop = map (always -1) (delay t s)\n    delaydiff = foldp (\\x y -> x + y) 0 (merge start stop)\nin map ((\\x y -> x /= y) 0) delaydiff"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"start"},[{"tag":"Span","contents":[{"line":84,"column":17},{"line":84,"column":33},{"doc":"map (always 1) s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":84,"column":17},{"line":84,"column":30},{"doc":"map (always 1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":84,"column":17},{"line":84,"column":20},{"doc":"map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":84,"column":22},{"line":84,"column":30},{"doc":"always 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":84,"column":22},{"line":84,"column":28},{"doc":"always"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"always"}}],[{"tag":"Span","contents":[{"line":84,"column":29},{"line":84,"column":30},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],[{"tag":"Span","contents":[{"line":84,"column":32},{"line":84,"column":33},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}],null]],[{"tag":"Span","contents":[{"line":83,"column":5},{"line":88,"column":31},{"doc":"let start = map (always 1) s\n    stop = map (always -1) (delay t s)\n    delaydiff = foldp (\\x y -> x + y) 0 (merge start stop)\nin map ((\\x y -> x /= y) 0) delaydiff"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"delaydiff"},[{"tag":"Span","contents":[{"line":86,"column":21},{"line":86,"column":50},{"doc":"foldp (\\x y -> x + y) 0 (merge start stop)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":21},{"line":86,"column":32},{"doc":"foldp (\\x y -> x + y) 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":21},{"line":86,"column":29},{"doc":"foldp (\\x y -> x + y)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":21},{"line":86,"column":26},{"doc":"foldp"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"foldp"}}],[{"tag":"Span","contents":[{"line":86,"column":28},{"line":86,"column":29},{"doc":"\\x y -> x + y"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":86,"column":28},{"line":86,"column":29},{"doc":"\\y -> x + y"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":86,"column":28},{"line":86,"column":29},{"doc":"x + y"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":86,"column":28},{"line":86,"column":29},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}],[{"tag":"Span","contents":[{"line":86,"column":28},{"line":86,"column":29},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]}]]}]]}]]}],[{"tag":"Span","contents":[{"line":86,"column":31},{"line":86,"column":32},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":86,"column":34},{"line":86,"column":50},{"doc":"merge start stop"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":34},{"line":86,"column":45},{"doc":"merge start"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":34},{"line":86,"column":39},{"doc":"merge"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"merge"}}],[{"tag":"Span","contents":[{"line":86,"column":40},{"line":86,"column":45},{"doc":"start"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"start"}}]]}],[{"tag":"Span","contents":[{"line":86,"column":46},{"line":86,"column":50},{"doc":"stop"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"stop"}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":88,"column":9},{"line":88,"column":31},{"doc":"map ((\\x y -> x /= y) 0) delaydiff"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":88,"column":9},{"line":88,"column":20},{"doc":"map ((\\x y -> x /= y) 0)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":88,"column":9},{"line":88,"column":12},{"doc":"map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":88,"column":15},{"line":88,"column":20},{"doc":"(\\x y -> x /= y) 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":88,"column":15},{"line":88,"column":17},{"doc":"\\x y -> x /= y"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":88,"column":15},{"line":88,"column":17},{"doc":"\\y -> x /= y"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":88,"column":15},{"line":88,"column":17},{"doc":"x /= y"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/="},[{"tag":"Span","contents":[{"line":88,"column":15},{"line":88,"column":17},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}],[{"tag":"Span","contents":[{"line":88,"column":15},{"line":88,"column":17},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":88,"column":19},{"line":88,"column":20},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}]]}],[{"tag":"Span","contents":[{"line":88,"column":22},{"line":88,"column":31},{"doc":"delaydiff"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"delaydiff"}}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]]}]}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"every"},[{"tag":"Span","contents":[{"line":74,"column":16},{"line":74,"column":26},{"doc":"Native.Time.every"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Time"]},"name":"every"}}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fpsWhen"},[{"tag":"Span","contents":[{"line":68,"column":18},{"line":68,"column":30},{"doc":"Native.Time.fpsWhen"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Time"]},"name":"fpsWhen"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fps"},[{"tag":"Span","contents":[{"line":59,"column":14},{"line":59,"column":22},{"doc":"Native.Time.fps"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Time"]},"name":"fps"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"inMilliseconds"},[{"tag":"Span","contents":[{"line":42,"column":20},{"line":42,"column":21},{"doc":"t"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":42,"column":20},{"line":42,"column":21},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"millisecond"},[{"tag":"Span","contents":[{"line":30,"column":15},{"line":30,"column":16},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"second"},[{"tag":"Span","contents":[{"line":33,"column":10},{"line":33,"column":28},{"doc":"1000 * millisecond"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":33,"column":10},{"line":33,"column":14},{"doc":"1000"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1000}}],[{"tag":"Span","contents":[{"line":33,"column":17},{"line":33,"column":28},{"doc":"millisecond"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"millisecond"}}]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"minute"},[{"tag":"Span","contents":[{"line":36,"column":10},{"line":36,"column":21},{"doc":"60 * second"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":36,"column":10},{"line":36,"column":12},{"doc":"60"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":60}}],[{"tag":"Span","contents":[{"line":36,"column":15},{"line":36,"column":21},{"doc":"second"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"second"}}]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hour"},[{"tag":"Span","contents":[{"line":39,"column":8},{"line":39,"column":19},{"doc":"60 * minute"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":39,"column":8},{"line":39,"column":10},{"doc":"60"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":60}}],[{"tag":"Span","contents":[{"line":39,"column":13},{"line":39,"column":19},{"doc":"minute"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"minute"}}]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"inHours"},[{"tag":"Span","contents":[{"line":51,"column":13},{"line":51,"column":21},{"doc":"t / hour"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":51,"column":13},{"line":51,"column":21},{"doc":"t / hour"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":51,"column":13},{"line":51,"column":14},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}],[{"tag":"Span","contents":[{"line":51,"column":17},{"line":51,"column":21},{"doc":"hour"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hour"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"inMinutes"},[{"tag":"Span","contents":[{"line":48,"column":15},{"line":48,"column":25},{"doc":"t / minute"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":48,"column":15},{"line":48,"column":25},{"doc":"t / minute"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":48,"column":15},{"line":48,"column":16},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}],[{"tag":"Span","contents":[{"line":48,"column":19},{"line":48,"column":25},{"doc":"minute"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"minute"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let millisecond : Float\n    millisecond = 1\n    second : Float\n    second = 1000 `Basics.*` millisecond\n    minute : Float\n    minute = 60 `Basics.*` second\n    hour : Float\n    hour = 60 `Basics.*` minute\n    inMilliseconds : Float -> Float\n    inMilliseconds = \\t -> t\n    inSeconds : Float -> Float\n    inSeconds = \\t -> t `Basics./` second\n    inMinutes : Float -> Float\n    inMinutes = \\t -> t `Basics./` minute\n    inHours : Float -> Float\n    inHours = \\t -> t `Basics./` hour\n    fps : number -> Signal.Signal Float\n    fps = Native.Time.fps\n    fpsWhen : number -> Signal.Signal Bool -> Signal.Signal Float\n    fpsWhen = Native.Time.fpsWhen\n    every : Float -> Signal.Signal Float\n    every = Native.Time.every\n    since : Float -> Signal.Signal a -> Signal.Signal Bool\n    since = \\t s -> let start = Signal.map (Basics.always 1) s\n                        stop = Signal.map (Basics.always -1) (delay t s)\n                        delaydiff = Signal.foldp\n                                      (\\x y -> x `Basics.+` y) 0 (Signal.merge start stop)\n                    in Signal.map ((\\x y -> x `Basics./=` y) 0) delaydiff\n    timestamp : Signal.Signal a -> Signal.Signal (Float, a)\n    timestamp = Native.Time.timestamp\n    delay : Float -> Signal.Signal a -> Signal.Signal a\n    delay = Native.Time.delay\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"inSeconds"},[{"tag":"Span","contents":[{"line":45,"column":15},{"line":45,"column":25},{"doc":"t / second"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":45,"column":15},{"line":45,"column":25},{"doc":"t / second"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":45,"column":15},{"line":45,"column":16},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}],[{"tag":"Span","contents":[{"line":45,"column":19},{"line":45,"column":25},{"doc":"second"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"second"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Basics"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}],[["Native","Time"],{"tag":"As","contents":"Native.Time"}],[["Signal"],{"tag":"Open","contents":{"_explicits":[{"tag":"Alias","contents":"Signal"},{"tag":"Value","contents":"map"},{"tag":"Value","contents":"merge"},{"tag":"Value","contents":"foldp"}],"_open":false}}]],"names":["Time"],"exports":[{"tag":"Alias","contents":"Time"},{"tag":"Value","contents":"millisecond"},{"tag":"Value","contents":"second"},{"tag":"Value","contents":"minute"},{"tag":"Value","contents":"hour"},{"tag":"Value","contents":"inMilliseconds"},{"tag":"Value","contents":"inSeconds"},{"tag":"Value","contents":"inMinutes"},{"tag":"Value","contents":"inHours"},{"tag":"Value","contents":"fps"},{"tag":"Value","contents":"fpsWhen"},{"tag":"Value","contents":"every"},{"tag":"Value","contents":"since"},{"tag":"Value","contents":"timestamp"},{"tag":"Value","contents":"delay"}]}
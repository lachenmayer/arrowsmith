{"path":"","body":{"fixities":[["L",6,"+"],["L",6,"-"],["L",7,"*"],["L",7,"/"],["L",8,"^"],["L",7,"//"],["L",7,"%"],["L",7,"rem"],["N",4,"=="],["N",4,"/="],["N",4,"<"],["N",4,">"],["N",4,"<="],["N",4,">="],["R",3,"&&"],["R",2,"||"],["R",5,"++"],["R",9,"<<"],["L",9,">>"],["R",0,"<|"],["L",0,"|>"]],"aliases":{},"datatypes":{"Order":[[],[["LT",[]],["EQ",[]],["GT",[]]]]},"types":{"<":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"uncurry":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},{"tag":"Var","contents":"c"}]}]},"max":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Var","contents":"comparable"}]}]},"EQ":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"Order"}},"sin":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"sqrt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"curry":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},{"tag":"Var","contents":"c"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]}]}]},"cos":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"degrees":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"atan":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"/=":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"*":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]},"round":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},"not":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},"-":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]},"xor":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"abs":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"&&":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"<|":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]}]},"||":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"<<":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"c"}]}]}]},">>":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"c"}]}]}]},"floor":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},"+":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]},"clamp":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]}]},"GT":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"Order"}},"flip":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"c"}]}]}]},"isNaN":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},"ceiling":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},"toFloat":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"fromPolar":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]},">":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"^":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]},"truncate":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},"acos":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"<=":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"logBase":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]},"isInfinite":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},"otherwise":{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},"negate":{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]},"compare":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"Order"}}]}]},"/":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]},"rem":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]},"radians":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"|>":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Var","contents":"b"}]}]},"min":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Var","contents":"comparable"}]}]},"%":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]},"asin":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"e":{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},"atan2":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]},"++":{"tag":"Lambda","contents":[{"tag":"Var","contents":"appendable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"appendable"},{"tag":"Var","contents":"appendable"}]}]},"//":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]},"==":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"LT":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"Order"}},">=":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"toPolar":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]},"tan":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"toString":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"turns":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},"identity":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"a"}]},"pi":{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},"always":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"a"}]}]},"snd":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},{"tag":"Var","contents":"b"}]},"fst":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},{"tag":"Var","contents":"a"}]}},"program":[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"uncurry"},[{"tag":"Span","contents":[{"line":472,"column":19},{"line":472,"column":24},{"doc":"f a b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":472,"column":19},{"line":472,"column":24},{"doc":"f a b"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},[{"tag":"Span","contents":[{"line":472,"column":19},{"line":472,"column":24},{"doc":"f a b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":472,"column":19},{"line":472,"column":22},{"doc":"f a"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":472,"column":19},{"line":472,"column":20},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":472,"column":21},{"line":472,"column":22},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]}],[{"tag":"Span","contents":[{"line":472,"column":23},{"line":472,"column":24},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},{"tag":"Var","contents":"c"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"curry"},[{"tag":"Span","contents":[{"line":466,"column":15},{"line":466,"column":21},{"doc":"f (a,b)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":466,"column":15},{"line":466,"column":21},{"doc":"f (a,b)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"Span","contents":[{"line":466,"column":15},{"line":466,"column":21},{"doc":"f (a,b)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":466,"column":15},{"line":466,"column":21},{"doc":"f (a,b)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":466,"column":15},{"line":466,"column":16},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":466,"column":18},{"line":466,"column":21},{"doc":"(a,b)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":466,"column":18},{"line":466,"column":19},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"Span","contents":[{"line":466,"column":20},{"line":466,"column":21},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},{"tag":"Var","contents":"c"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"flip"},[{"tag":"Span","contents":[{"line":460,"column":14},{"line":460,"column":19},{"doc":"f a b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":460,"column":14},{"line":460,"column":19},{"doc":"f a b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":460,"column":14},{"line":460,"column":19},{"doc":"f a b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"Span","contents":[{"line":460,"column":14},{"line":460,"column":19},{"doc":"f a b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":460,"column":14},{"line":460,"column":17},{"doc":"f a"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":460,"column":14},{"line":460,"column":15},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":460,"column":16},{"line":460,"column":17},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]}],[{"tag":"Span","contents":[{"line":460,"column":18},{"line":460,"column":19},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"c"}]}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"snd"},[{"tag":"Span","contents":[{"line":456,"column":13},{"line":456,"column":14},{"doc":"b"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Anything","contents":[]},{"tag":"Var","contents":"b"}]]},[{"tag":"Span","contents":[{"line":456,"column":13},{"line":456,"column":14},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},{"tag":"Var","contents":"b"}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fst"},[{"tag":"Span","contents":[{"line":452,"column":13},{"line":452,"column":14},{"doc":"a"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"a"},{"tag":"Anything","contents":[]}]]},[{"tag":"Span","contents":[{"line":452,"column":13},{"line":452,"column":14},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]},{"tag":"Var","contents":"a"}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"always"},[{"tag":"Span","contents":[{"line":448,"column":14},{"line":448,"column":15},{"doc":"a"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"Span","contents":[{"line":448,"column":14},{"line":448,"column":15},{"doc":"a"}]},{"tag":"Lambda","contents":[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":448,"column":14},{"line":448,"column":15},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"a"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"identity"},[{"tag":"Span","contents":[{"line":432,"column":14},{"line":432,"column":15},{"doc":"x"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":432,"column":14},{"line":432,"column":15},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"a"}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"<|"},[{"tag":"Span","contents":[{"line":421,"column":10},{"line":421,"column":13},{"doc":"f x"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":421,"column":10},{"line":421,"column":13},{"doc":"f x"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":421,"column":10},{"line":421,"column":13},{"doc":"f x"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":421,"column":10},{"line":421,"column":11},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":421,"column":12},{"line":421,"column":13},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"|>"},[{"tag":"Span","contents":[{"line":409,"column":10},{"line":409,"column":13},{"doc":"f x"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":409,"column":10},{"line":409,"column":13},{"doc":"f x"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":409,"column":10},{"line":409,"column":13},{"doc":"f x"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":409,"column":10},{"line":409,"column":11},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":409,"column":12},{"line":409,"column":13},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Var","contents":"b"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":">>"},[{"tag":"Span","contents":[{"line":393,"column":14},{"line":393,"column":20},{"doc":"g (f x)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":393,"column":14},{"line":393,"column":20},{"doc":"g (f x)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"g"},[{"tag":"Span","contents":[{"line":393,"column":14},{"line":393,"column":20},{"doc":"g (f x)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":393,"column":14},{"line":393,"column":20},{"doc":"g (f x)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":393,"column":14},{"line":393,"column":15},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}],[{"tag":"Span","contents":[{"line":393,"column":17},{"line":393,"column":20},{"doc":"f x"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":393,"column":17},{"line":393,"column":18},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":393,"column":19},{"line":393,"column":20},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"c"}]}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"<<"},[{"tag":"Span","contents":[{"line":382,"column":14},{"line":382,"column":20},{"doc":"g (f x)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"g"},[{"tag":"Span","contents":[{"line":382,"column":14},{"line":382,"column":20},{"doc":"g (f x)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":382,"column":14},{"line":382,"column":20},{"doc":"g (f x)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":382,"column":14},{"line":382,"column":20},{"doc":"g (f x)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":382,"column":14},{"line":382,"column":15},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}],[{"tag":"Span","contents":[{"line":382,"column":17},{"line":382,"column":20},{"doc":"f x"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":382,"column":17},{"line":382,"column":18},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":382,"column":19},{"line":382,"column":20},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"c"}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"c"}]}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"++"},[{"tag":"Span","contents":[{"line":361,"column":15},{"line":361,"column":27},{"doc":"Native.Utils.append"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Utils"]},"name":"append"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"appendable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"appendable"},{"tag":"Var","contents":"appendable"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toString"},[{"tag":"Span","contents":[{"line":352,"column":19},{"line":352,"column":32},{"doc":"Native.Show.toString"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Show"]},"name":"toString"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"isInfinite"},[{"tag":"Span","contents":[{"line":341,"column":21},{"line":341,"column":38},{"doc":"Native.Basics.isInfinite"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"isInfinite"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"isNaN"},[{"tag":"Span","contents":[{"line":328,"column":16},{"line":328,"column":28},{"doc":"Native.Basics.isNaN"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"isNaN"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toFloat"},[{"tag":"Span","contents":[{"line":316,"column":18},{"line":316,"column":32},{"doc":"Native.Basics.toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"toFloat"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"ceiling"},[{"tag":"Span","contents":[{"line":312,"column":18},{"line":312,"column":32},{"doc":"Native.Basics.ceiling"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"ceiling"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"floor"},[{"tag":"Span","contents":[{"line":308,"column":16},{"line":308,"column":28},{"doc":"Native.Basics.floor"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"floor"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"truncate"},[{"tag":"Span","contents":[{"line":304,"column":19},{"line":304,"column":34},{"doc":"Native.Basics.truncate"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"truncate"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"round"},[{"tag":"Span","contents":[{"line":300,"column":16},{"line":300,"column":28},{"doc":"Native.Basics.round"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"round"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"otherwise"},[{"tag":"Span","contents":[{"line":293,"column":13},{"line":293,"column":17},{"doc":"True"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"not"},[{"tag":"Span","contents":[{"line":289,"column":14},{"line":289,"column":24},{"doc":"Native.Basics.not"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"not"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"xor"},[{"tag":"Span","contents":[{"line":281,"column":14},{"line":281,"column":24},{"doc":"Native.Basics.xor"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"xor"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"||"},[{"tag":"Span","contents":[{"line":274,"column":15},{"line":274,"column":24},{"doc":"Native.Basics.or"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"or"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"&&"},[{"tag":"Span","contents":[{"line":268,"column":15},{"line":268,"column":25},{"doc":"Native.Basics.and"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"and"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"max"},[{"tag":"Span","contents":[{"line":262,"column":14},{"line":262,"column":24},{"doc":"Native.Basics.max"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"max"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Var","contents":"comparable"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"min"},[{"tag":"Span","contents":[{"line":258,"column":14},{"line":258,"column":24},{"doc":"Native.Basics.min"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"min"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Var","contents":"comparable"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"GT"},[{"tag":"None","contents":{"doc":"GT"}},{"tag":"Data","contents":["GT",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"Order"}},[]]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"EQ"},[{"tag":"None","contents":{"doc":"EQ"}},{"tag":"Data","contents":["EQ",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"Order"}},[]]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"LT"},[{"tag":"None","contents":{"doc":"LT"}},{"tag":"Data","contents":["LT",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"Order"}},[]]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"compare"},[{"tag":"Span","contents":[{"line":249,"column":18},{"line":249,"column":32},{"doc":"Native.Basics.compare"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"compare"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"Order"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":">="},[{"tag":"Span","contents":[{"line":235,"column":15},{"line":235,"column":24},{"doc":"Native.Basics.ge"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"ge"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"<="},[{"tag":"Span","contents":[{"line":232,"column":15},{"line":232,"column":24},{"doc":"Native.Basics.le"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"le"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":">"},[{"tag":"Span","contents":[{"line":229,"column":15},{"line":229,"column":24},{"doc":"Native.Basics.gt"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"gt"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"<"},[{"tag":"Span","contents":[{"line":226,"column":15},{"line":226,"column":24},{"doc":"Native.Basics.lt"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"lt"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"/="},[{"tag":"Span","contents":[{"line":223,"column":15},{"line":223,"column":25},{"doc":"Native.Basics.neq"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"neq"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"=="},[{"tag":"Span","contents":[{"line":220,"column":15},{"line":220,"column":24},{"doc":"Native.Basics.eq"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"eq"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":217,"column":12},{"line":217,"column":20},{"doc":"Native.Basics.e"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"e"}}],{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"pi"},[{"tag":"Span","contents":[{"line":213,"column":13},{"line":213,"column":22},{"doc":"Native.Basics.pi"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"pi"}}],{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"clamp"},[{"tag":"Span","contents":[{"line":209,"column":16},{"line":209,"column":28},{"doc":"Native.Basics.clamp"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"clamp"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"logBase"},[{"tag":"Span","contents":[{"line":199,"column":18},{"line":199,"column":32},{"doc":"Native.Basics.logBase"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"logBase"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"abs"},[{"tag":"Span","contents":[{"line":191,"column":14},{"line":191,"column":24},{"doc":"Native.Basics.abs"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"abs"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"negate"},[{"tag":"Span","contents":[{"line":187,"column":17},{"line":187,"column":30},{"doc":"Native.Basics.negate"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"negate"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"sqrt"},[{"tag":"Span","contents":[{"line":178,"column":15},{"line":178,"column":26},{"doc":"Native.Basics.sqrt"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"sqrt"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"atan2"},[{"tag":"Span","contents":[{"line":174,"column":16},{"line":174,"column":28},{"doc":"Native.Basics.atan2"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"atan2"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"atan"},[{"tag":"Span","contents":[{"line":165,"column":15},{"line":165,"column":26},{"doc":"Native.Basics.atan"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"atan"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"asin"},[{"tag":"Span","contents":[{"line":157,"column":15},{"line":157,"column":26},{"doc":"Native.Basics.asin"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"asin"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"acos"},[{"tag":"Span","contents":[{"line":154,"column":15},{"line":154,"column":26},{"doc":"Native.Basics.acos"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"acos"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"tan"},[{"tag":"Span","contents":[{"line":151,"column":14},{"line":151,"column":24},{"doc":"Native.Basics.tan"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"tan"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"sin"},[{"tag":"Span","contents":[{"line":148,"column":14},{"line":148,"column":24},{"doc":"Native.Basics.sin"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"sin"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"cos"},[{"tag":"Span","contents":[{"line":145,"column":14},{"line":145,"column":24},{"doc":"Native.Basics.cos"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"cos"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"^"},[{"tag":"Span","contents":[{"line":142,"column":14},{"line":142,"column":24},{"doc":"Native.Basics.exp"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"exp"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"%"},[{"tag":"Span","contents":[{"line":135,"column":14},{"line":135,"column":24},{"doc":"Native.Basics.mod"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"mod"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"rem"},[{"tag":"Span","contents":[{"line":127,"column":14},{"line":127,"column":24},{"doc":"Native.Basics.rem"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"rem"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"//"},[{"tag":"Span","contents":[{"line":119,"column":15},{"line":119,"column":25},{"doc":"Native.Basics.div"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"div"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"/"},[{"tag":"Span","contents":[{"line":105,"column":14},{"line":105,"column":29},{"doc":"Native.Basics.floatDiv"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"floatDiv"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"*"},[{"tag":"Span","contents":[{"line":101,"column":14},{"line":101,"column":24},{"doc":"Native.Basics.mul"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"mul"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"-"},[{"tag":"Span","contents":[{"line":98,"column":14},{"line":98,"column":24},{"doc":"Native.Basics.sub"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"sub"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"+"},[{"tag":"Span","contents":[{"line":95,"column":14},{"line":95,"column":24},{"doc":"Native.Basics.add"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"add"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toPolar"},[{"tag":"Span","contents":[{"line":92,"column":18},{"line":92,"column":32},{"doc":"Native.Basics.toPolar"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"toPolar"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fromPolar"},[{"tag":"Span","contents":[{"line":88,"column":20},{"line":88,"column":36},{"doc":"Native.Basics.fromPolar"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"fromPolar"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"turns"},[{"tag":"Span","contents":[{"line":84,"column":16},{"line":84,"column":28},{"doc":"Native.Basics.turns"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"turns"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"degrees"},[{"tag":"Span","contents":[{"line":78,"column":18},{"line":78,"column":32},{"doc":"Native.Basics.degrees"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Basics"]},"name":"degrees"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"let radians : Float -> Float\n    radians = \\t -> t\n    degrees : Float -> Float\n    degrees = Native.Basics.degrees\n    turns : Float -> Float\n    turns = Native.Basics.turns\n    fromPolar : (Float, Float) -> (Float, Float)\n    fromPolar = Native.Basics.fromPolar\n    toPolar : (Float, Float) -> (Float, Float)\n    toPolar = Native.Basics.toPolar\n    (+) : number -> number -> number\n    (+) = Native.Basics.add\n    (-) : number -> number -> number\n    (-) = Native.Basics.sub\n    (*) : number -> number -> number\n    (*) = Native.Basics.mul\n    (/) : Float -> Float -> Float\n    (/) = Native.Basics.floatDiv\n    (//) : Int -> Int -> Int\n    (//) = Native.Basics.div\n    rem : Int -> Int -> Int\n    rem = Native.Basics.rem\n    (%) : Int -> Int -> Int\n    (%) = Native.Basics.mod\n    (^) : number -> number -> number\n    (^) = Native.Basics.exp\n    cos : Float -> Float\n    cos = Native.Basics.cos\n    sin : Float -> Float\n    sin = Native.Basics.sin\n    tan : Float -> Float\n    tan = Native.Basics.tan\n    acos : Float -> Float\n    acos = Native.Basics.acos\n    asin : Float -> Float\n    asin = Native.Basics.asin\n    atan : Float -> Float\n    atan = Native.Basics.atan\n    atan2 : Float -> Float -> Float\n    atan2 = Native.Basics.atan2\n    sqrt : Float -> Float\n    sqrt = Native.Basics.sqrt\n    negate : number -> number\n    negate = Native.Basics.negate\n    abs : number -> number\n    abs = Native.Basics.abs\n    logBase : Float -> Float -> Float\n    logBase = Native.Basics.logBase\n    clamp : number -> number -> number -> number\n    clamp = Native.Basics.clamp\n    pi : Float\n    pi = Native.Basics.pi\n    e : Float\n    e = Native.Basics.e\n    (==) : a -> a -> Bool\n    (==) = Native.Basics.eq\n    (/=) : a -> a -> Bool\n    (/=) = Native.Basics.neq\n    (<) : comparable -> comparable -> Bool\n    (<) = Native.Basics.lt\n    (>) : comparable -> comparable -> Bool\n    (>) = Native.Basics.gt\n    (<=) : comparable -> comparable -> Bool\n    (<=) = Native.Basics.le\n    (>=) : comparable -> comparable -> Bool\n    (>=) = Native.Basics.ge\n    compare : comparable -> comparable -> Basics.Order\n    compare = Native.Basics.compare\n    LT : Basics.Order\n    LT = LT\n    EQ : Basics.Order\n    EQ = EQ\n    GT : Basics.Order\n    GT = GT\n    min : comparable -> comparable -> comparable\n    min = Native.Basics.min\n    max : comparable -> comparable -> comparable\n    max = Native.Basics.max\n    (&&) : Bool -> Bool -> Bool\n    (&&) = Native.Basics.and\n    (||) : Bool -> Bool -> Bool\n    (||) = Native.Basics.or\n    xor : Bool -> Bool -> Bool\n    xor = Native.Basics.xor\n    not : Bool -> Bool\n    not = Native.Basics.not\n    otherwise : Bool\n    otherwise = True\n    round : Float -> Int\n    round = Native.Basics.round\n    truncate : Float -> Int\n    truncate = Native.Basics.truncate\n    floor : Float -> Int\n    floor = Native.Basics.floor\n    ceiling : Float -> Int\n    ceiling = Native.Basics.ceiling\n    toFloat : Int -> Float\n    toFloat = Native.Basics.toFloat\n    isNaN : Float -> Bool\n    isNaN = Native.Basics.isNaN\n    isInfinite : Float -> Bool\n    isInfinite = Native.Basics.isInfinite\n    toString : a -> String\n    toString = Native.Show.toString\n    (++) : appendable -> appendable -> appendable\n    (++) = Native.Utils.append\n    (<<) : (b -> c) -> (a -> b) -> a -> c\n    (<<) = \\g f x -> g (f x)\n    (>>) : (a -> b) -> (b -> c) -> a -> c\n    (>>) = \\f g x -> g (f x)\n    (|>) : a -> (a -> b) -> b\n    (|>) = \\x f -> f x\n    (<|) : (a -> b) -> a -> b\n    (<|) = \\f x -> f x\n    identity : a -> a\n    identity = \\x -> x\n    always : a -> b -> a\n    always = \\a _ -> a\n    fst : (a, b) -> a\n    fst = \\(a,_) -> a\n    snd : (a, b) -> b\n    snd = \\(_,b) -> b\n    flip : (a -> b -> c) -> b -> a -> c\n    flip = \\f b a -> f a b\n    curry : ((a, b) -> c) -> a -> b -> c\n    curry = \\f a b -> f (a,b)\n    uncurry : (a -> b -> c) -> (a, b) -> c\n    uncurry = \\f (a,b) -> f a b\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"radians"},[{"tag":"Span","contents":[{"line":74,"column":13},{"line":74,"column":14},{"doc":"t"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":74,"column":13},{"line":74,"column":14},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Native","Basics"],{"tag":"As","contents":"Native.Basics"}],[["Native","Show"],{"tag":"As","contents":"Native.Show"}],[["Native","Utils"],{"tag":"As","contents":"Native.Utils"}]],"names":["Basics"],"exports":[{"tag":"Value","contents":"=="},{"tag":"Value","contents":"/="},{"tag":"Value","contents":"<"},{"tag":"Value","contents":">"},{"tag":"Value","contents":"<="},{"tag":"Value","contents":">="},{"tag":"Value","contents":"max"},{"tag":"Value","contents":"min"},{"tag":"Value","contents":"compare"},{"tag":"Value","contents":"not"},{"tag":"Value","contents":"&&"},{"tag":"Value","contents":"||"},{"tag":"Value","contents":"xor"},{"tag":"Value","contents":"otherwise"},{"tag":"Value","contents":"+"},{"tag":"Value","contents":"-"},{"tag":"Value","contents":"*"},{"tag":"Value","contents":"/"},{"tag":"Value","contents":"^"},{"tag":"Value","contents":"//"},{"tag":"Value","contents":"rem"},{"tag":"Value","contents":"%"},{"tag":"Value","contents":"negate"},{"tag":"Value","contents":"abs"},{"tag":"Value","contents":"sqrt"},{"tag":"Value","contents":"clamp"},{"tag":"Value","contents":"logBase"},{"tag":"Value","contents":"e"},{"tag":"Value","contents":"pi"},{"tag":"Value","contents":"cos"},{"tag":"Value","contents":"sin"},{"tag":"Value","contents":"tan"},{"tag":"Value","contents":"acos"},{"tag":"Value","contents":"asin"},{"tag":"Value","contents":"atan"},{"tag":"Value","contents":"atan2"},{"tag":"Value","contents":"round"},{"tag":"Value","contents":"floor"},{"tag":"Value","contents":"ceiling"},{"tag":"Value","contents":"truncate"},{"tag":"Value","contents":"toFloat"},{"tag":"Value","contents":"degrees"},{"tag":"Value","contents":"radians"},{"tag":"Value","contents":"turns"},{"tag":"Value","contents":"toPolar"},{"tag":"Value","contents":"fromPolar"},{"tag":"Value","contents":"isNaN"},{"tag":"Value","contents":"isInfinite"},{"tag":"Value","contents":"toString"},{"tag":"Value","contents":"++"},{"tag":"Value","contents":"fst"},{"tag":"Value","contents":"snd"},{"tag":"Value","contents":"identity"},{"tag":"Value","contents":"always"},{"tag":"Value","contents":"<|"},{"tag":"Value","contents":"|>"},{"tag":"Value","contents":"<<"},{"tag":"Value","contents":">>"},{"tag":"Value","contents":"flip"},{"tag":"Value","contents":"curry"},{"tag":"Value","contents":"uncurry"},{"tag":"Union","contents":["Order",{"_explicits":["LT","EQ","GT"],"_open":false}]}]}
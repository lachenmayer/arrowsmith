{"path":"","body":{"fixities":[],"aliases":{"Set":[["t"],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"t"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},"datatypes":{},"types":{"insert":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]},"intersect":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]},"empty":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},"diff":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"foldr":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Var","contents":"b"}]}]}]},"union":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]},"remove":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]},"toList":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"comparable"}]]}]},"fromList":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"comparable"}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]},"map":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Var","contents":"comparable'"}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable'"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]},"singleton":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]},"partition":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]]}]}]},"foldl":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Var","contents":"b"}]}]}]},"filter":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]},"member":{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}},"program":[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"partition"},[{"tag":"Span","contents":[{"line":102,"column":19},{"line":102,"column":51},{"doc":"Dict.partition (\\k _ -> p k) set"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":102,"column":19},{"line":102,"column":51},{"doc":"Dict.partition (\\k _ -> p k) set"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"set"},[{"tag":"Span","contents":[{"line":102,"column":19},{"line":102,"column":51},{"doc":"Dict.partition (\\k _ -> p k) set"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":102,"column":19},{"line":102,"column":46},{"doc":"Dict.partition (\\k _ -> p k)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":102,"column":19},{"line":102,"column":33},{"doc":"Dict.partition"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"partition"}}],[{"tag":"Span","contents":[{"line":102,"column":43},{"line":102,"column":46},{"doc":"p k"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"k"},[{"tag":"Span","contents":[{"line":102,"column":43},{"line":102,"column":46},{"doc":"p k"}]},{"tag":"Lambda","contents":[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":102,"column":43},{"line":102,"column":46},{"doc":"p k"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":102,"column":43},{"line":102,"column":44},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[{"tag":"Span","contents":[{"line":102,"column":45},{"line":102,"column":46},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}]]}]]}]]}]]}],[{"tag":"Span","contents":[{"line":102,"column":48},{"line":102,"column":51},{"doc":"set"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"set"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"filter"},[{"tag":"Span","contents":[{"line":97,"column":16},{"line":97,"column":45},{"doc":"Dict.filter (\\k _ -> p k) set"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":97,"column":16},{"line":97,"column":45},{"doc":"Dict.filter (\\k _ -> p k) set"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"set"},[{"tag":"Span","contents":[{"line":97,"column":16},{"line":97,"column":45},{"doc":"Dict.filter (\\k _ -> p k) set"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":97,"column":16},{"line":97,"column":40},{"doc":"Dict.filter (\\k _ -> p k)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":97,"column":16},{"line":97,"column":27},{"doc":"Dict.filter"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"filter"}}],[{"tag":"Span","contents":[{"line":97,"column":37},{"line":97,"column":40},{"doc":"p k"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"k"},[{"tag":"Span","contents":[{"line":97,"column":37},{"line":97,"column":40},{"doc":"p k"}]},{"tag":"Lambda","contents":[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":97,"column":37},{"line":97,"column":40},{"doc":"p k"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":97,"column":37},{"line":97,"column":38},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[{"tag":"Span","contents":[{"line":97,"column":39},{"line":97,"column":40},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}]]}]]}]]}]]}],[{"tag":"Span","contents":[{"line":97,"column":42},{"line":97,"column":45},{"doc":"set"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"set"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"foldr"},[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":47},{"doc":"Dict.foldr (\\k _ b -> f k b) b s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":47},{"doc":"Dict.foldr (\\k _ b -> f k b) b s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":47},{"doc":"Dict.foldr (\\k _ b -> f k b) b s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"s"},[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":47},{"doc":"Dict.foldr (\\k _ b -> f k b) b s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":45},{"doc":"Dict.foldr (\\k _ b -> f k b) b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":42},{"doc":"Dict.foldr (\\k _ b -> f k b)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":25},{"doc":"Dict.foldr"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"foldr"}}],[{"tag":"Span","contents":[{"line":89,"column":37},{"line":89,"column":42},{"doc":"f k b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"k"},[{"tag":"Span","contents":[{"line":89,"column":37},{"line":89,"column":42},{"doc":"f k b"}]},{"tag":"Lambda","contents":[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":89,"column":37},{"line":89,"column":42},{"doc":"f k b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":89,"column":37},{"line":89,"column":42},{"doc":"f k b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":37},{"line":89,"column":40},{"doc":"f k"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":37},{"line":89,"column":38},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":89,"column":39},{"line":89,"column":40},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}]]}],[{"tag":"Span","contents":[{"line":89,"column":41},{"line":89,"column":42},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}]]}]]}]]}]]}],[{"tag":"Span","contents":[{"line":89,"column":44},{"line":89,"column":45},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":89,"column":46},{"line":89,"column":47},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Var","contents":"b"}]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"foldl"},[{"tag":"Span","contents":[{"line":85,"column":15},{"line":85,"column":47},{"doc":"Dict.foldl (\\k _ b -> f k b) b s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":85,"column":15},{"line":85,"column":47},{"doc":"Dict.foldl (\\k _ b -> f k b) b s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":85,"column":15},{"line":85,"column":47},{"doc":"Dict.foldl (\\k _ b -> f k b) b s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"s"},[{"tag":"Span","contents":[{"line":85,"column":15},{"line":85,"column":47},{"doc":"Dict.foldl (\\k _ b -> f k b) b s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":15},{"line":85,"column":45},{"doc":"Dict.foldl (\\k _ b -> f k b) b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":15},{"line":85,"column":42},{"doc":"Dict.foldl (\\k _ b -> f k b)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":15},{"line":85,"column":25},{"doc":"Dict.foldl"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"foldl"}}],[{"tag":"Span","contents":[{"line":85,"column":37},{"line":85,"column":42},{"doc":"f k b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"k"},[{"tag":"Span","contents":[{"line":85,"column":37},{"line":85,"column":42},{"doc":"f k b"}]},{"tag":"Lambda","contents":[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":85,"column":37},{"line":85,"column":42},{"doc":"f k b"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":85,"column":37},{"line":85,"column":42},{"doc":"f k b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":37},{"line":85,"column":40},{"doc":"f k"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":85,"column":37},{"line":85,"column":38},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":85,"column":39},{"line":85,"column":40},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}]]}],[{"tag":"Span","contents":[{"line":85,"column":41},{"line":85,"column":42},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}]]}]]}]]}]]}],[{"tag":"Span","contents":[{"line":85,"column":44},{"line":85,"column":45},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":85,"column":46},{"line":85,"column":47},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Var","contents":"b"}]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toList"},[{"tag":"Span","contents":[{"line":77,"column":10},{"line":77,"column":19},{"doc":"Dict.keys"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"keys"}}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"comparable"}]]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"diff"},[{"tag":"Span","contents":[{"line":73,"column":8},{"line":73,"column":17},{"doc":"Dict.diff"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"diff"}}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"intersect"},[{"tag":"Span","contents":[{"line":68,"column":13},{"line":68,"column":27},{"doc":"Dict.intersect"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"intersect"}}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"union"},[{"tag":"Span","contents":[{"line":64,"column":9},{"line":64,"column":19},{"doc":"Dict.union"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"union"}}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"member"},[{"tag":"Span","contents":[{"line":60,"column":10},{"line":60,"column":21},{"doc":"Dict.member"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"member"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"remove"},[{"tag":"Span","contents":[{"line":56,"column":10},{"line":56,"column":21},{"doc":"Dict.remove"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"remove"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"insert"},[{"tag":"Span","contents":[{"line":51,"column":12},{"line":51,"column":27},{"doc":"Dict.insert k ()"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"k"},[{"tag":"Span","contents":[{"line":51,"column":12},{"line":51,"column":27},{"doc":"Dict.insert k ()"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":51,"column":12},{"line":51,"column":25},{"doc":"Dict.insert k"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":51,"column":12},{"line":51,"column":23},{"doc":"Dict.insert"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"insert"}}],[{"tag":"Span","contents":[{"line":51,"column":24},{"line":51,"column":25},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}]]}],[{"tag":"Span","contents":[{"line":51,"column":27},{"line":51,"column":27},{"doc":"()"}]},{"tag":"Data","contents":["_Tuple0",[]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"singleton"},[{"tag":"Span","contents":[{"line":47,"column":15},{"line":47,"column":33},{"doc":"Dict.singleton k ()"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"k"},[{"tag":"Span","contents":[{"line":47,"column":15},{"line":47,"column":33},{"doc":"Dict.singleton k ()"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":47,"column":15},{"line":47,"column":31},{"doc":"Dict.singleton k"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":47,"column":15},{"line":47,"column":29},{"doc":"Dict.singleton"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"singleton"}}],[{"tag":"Span","contents":[{"line":47,"column":30},{"line":47,"column":31},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}]]}],[{"tag":"Span","contents":[{"line":47,"column":33},{"line":47,"column":33},{"doc":"()"}]},{"tag":"Data","contents":["_Tuple0",[]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"empty"},[{"tag":"Span","contents":[{"line":43,"column":9},{"line":43,"column":19},{"doc":"Dict.empty"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"empty"}}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fromList"},[{"tag":"Span","contents":[{"line":81,"column":15},{"line":81,"column":41},{"doc":"List.foldl insert empty xs"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"xs"},[{"tag":"Span","contents":[{"line":81,"column":15},{"line":81,"column":41},{"doc":"List.foldl insert empty xs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":81,"column":15},{"line":81,"column":38},{"doc":"List.foldl insert empty"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":81,"column":15},{"line":81,"column":32},{"doc":"List.foldl insert"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":81,"column":15},{"line":81,"column":25},{"doc":"List.foldl"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"foldl"}}],[{"tag":"Span","contents":[{"line":81,"column":26},{"line":81,"column":32},{"doc":"insert"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"insert"}}]]}],[{"tag":"Span","contents":[{"line":81,"column":33},{"line":81,"column":38},{"doc":"empty"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"empty"}}]]}],[{"tag":"Span","contents":[{"line":81,"column":39},{"line":81,"column":41},{"doc":"xs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"xs"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"comparable"}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]],[{"tag":"None","contents":{"doc":"let empty : Set.Set\n    empty = Dict.empty\n    singleton : comparable -> Set.Set\n    singleton = \\k -> Dict.singleton k ()\n    insert : comparable -> Set.Set -> Set.Set\n    insert = \\k -> Dict.insert k ()\n    remove : comparable -> Set.Set -> Set.Set\n    remove = Dict.remove\n    member : comparable -> Set.Set -> Bool\n    member = Dict.member\n    union : Set.Set -> Set.Set -> Set.Set\n    union = Dict.union\n    intersect : Set.Set -> Set.Set -> Set.Set\n    intersect = Dict.intersect\n    diff : Set.Set -> Set.Set -> Set.Set\n    diff = Dict.diff\n    toList : Set.Set -> List comparable\n    toList = Dict.keys\n    fromList : List comparable -> Set.Set\n    fromList = \\xs -> List.foldl insert empty xs\n    foldl : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldl = \\f b s -> Dict.foldl (\\k _ b -> f k b) b s\n    foldr : (comparable -> b -> b) -> b -> Set.Set -> b\n    foldr = \\f b s -> Dict.foldr (\\k _ b -> f k b) b s\n    map : (comparable -> comparable') -> Set.Set -> Set.Set\n    map = \\f s -> fromList (List.map f (toList s))\n    filter : (comparable -> Bool) -> Set.Set -> Set.Set\n    filter = \\p set -> Dict.filter (\\k _ -> p k) set\n    partition : (comparable -> Bool) -> Set.Set -> (Set.Set, Set.Set)\n    partition = \\p set -> Dict.partition (\\k _ -> p k) set\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"map"},[{"tag":"Span","contents":[{"line":93,"column":11},{"line":93,"column":41},{"doc":"fromList (List.map f (toList s))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":93,"column":11},{"line":93,"column":41},{"doc":"fromList (List.map f (toList s))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"s"},[{"tag":"Span","contents":[{"line":93,"column":11},{"line":93,"column":41},{"doc":"fromList (List.map f (toList s))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":93,"column":11},{"line":93,"column":19},{"doc":"fromList"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fromList"}}],[{"tag":"Span","contents":[{"line":93,"column":21},{"line":93,"column":41},{"doc":"List.map f (toList s)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":93,"column":21},{"line":93,"column":31},{"doc":"List.map f"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":93,"column":21},{"line":93,"column":29},{"doc":"List.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":93,"column":30},{"line":93,"column":31},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]}],[{"tag":"Span","contents":[{"line":93,"column":33},{"line":93,"column":41},{"doc":"toList s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":93,"column":33},{"line":93,"column":39},{"doc":"toList"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"toList"}}],[{"tag":"Span","contents":[{"line":93,"column":40},{"line":93,"column":41},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"comparable"},{"tag":"Var","contents":"comparable'"}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Set"]},"name":"Set"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Dict"]},"name":"Dict"}},[{"tag":"Var","contents":"comparable'"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Dict"],{"tag":"As","contents":"Dict"}],[["List"],{"tag":"As","contents":"List"}]],"names":["Set"],"exports":[{"tag":"Value","contents":"empty"},{"tag":"Value","contents":"singleton"},{"tag":"Value","contents":"insert"},{"tag":"Value","contents":"remove"},{"tag":"Value","contents":"member"},{"tag":"Value","contents":"foldl"},{"tag":"Value","contents":"foldr"},{"tag":"Value","contents":"map"},{"tag":"Value","contents":"filter"},{"tag":"Value","contents":"partition"},{"tag":"Value","contents":"union"},{"tag":"Value","contents":"intersect"},{"tag":"Value","contents":"diff"},{"tag":"Value","contents":"toList"},{"tag":"Value","contents":"fromList"},{"tag":"Alias","contents":"Set"}]}
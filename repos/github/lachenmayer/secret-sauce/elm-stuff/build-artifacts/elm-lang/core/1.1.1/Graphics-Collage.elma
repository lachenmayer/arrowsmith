{"path":"","body":{"fixities":[],"aliases":{"Path":[[],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}],"Shape":[[],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}],"Form":[[],{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}],"LineStyle":[[],{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]},"datatypes":{"BasicForm":[[],[["FPath",[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]],["FShape",[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"ShapeStyle"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]],["FImage",[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]],["FElement",[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]],["FGroup",[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Transform2D"]},"name":"Transform2D"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]]}]]]],"FillStyle":[[],[["Solid",[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],["Texture",[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]],["Grad",[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}}]]]],"ShapeStyle":[[],[["Line",[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]}]],["Fill",[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}}]]]],"LineCap":[[],[["Flat",[]],["Round",[]],["Padded",[]]]],"LineJoin":[[],[["Smooth",[]],["Sharp",[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]],["Clipped",[]]]]},"types":{"outlined":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"Flat":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}},"group":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]},"Texture":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}}]},"Round":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}},"circle":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]}]},"path":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]}]},"Solid":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}}]},"toForm":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]},"solid":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]},"scale":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"ngon":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]}]}]},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"FElement":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]},"Grad":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}}]},"textured":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"FPath":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]}]},"Line":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"ShapeStyle"}}]},"gradient":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"FImage":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]}]}]}]},"square":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]}]},"sprite":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]}]}]},"FGroup":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Transform2D"]},"name":"Transform2D"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]}]},"oval":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]}]}]},"alpha":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"polygon":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]}]},"Clipped":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}},"collage":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]}]},"fill":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"dashed":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]},"Fill":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"ShapeStyle"}}]},"Smooth":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}},"dotted":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]},"traced":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"defaultLine":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},"Sharp":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}]},"Padded":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}},"moveY":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"rect":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]}]}]},"groupTransform":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Transform2D"]},"name":"Transform2D"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"segment":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]}]}]},"form":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]},"filled":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"Form":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]}]}]}]}]},"FShape":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"ShapeStyle"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}]]}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]}]},"moveX":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"move":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"rotate":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["alpha",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}],["scale",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["theta",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["x",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["y",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]},"LineStyle":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["dashOffset",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]],null]}]}]}]}]}]}]}]}},"program":[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"ngon"},[{"tag":"Span","contents":[{"line":268,"column":3},{"line":271,"column":26},{"doc":"let m = toFloat n\n    t = (2 * pi) / m\n    f = \\i -> (r * (cos (t * i)),r * (sin (t * i)))\nin List.map f [0..m - 1]"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":268,"column":3},{"line":271,"column":26},{"doc":"let m = toFloat n\n    t = (2 * pi) / m\n    f = \\i -> (r * (cos (t * i)),r * (sin (t * i)))\nin List.map f [0..m - 1]"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"r"},[{"tag":"Span","contents":[{"line":268,"column":3},{"line":271,"column":26},{"doc":"let m = toFloat n\n    t = (2 * pi) / m\n    f = \\i -> (r * (cos (t * i)),r * (sin (t * i)))\nin List.map f [0..m - 1]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"m"},[{"tag":"Span","contents":[{"line":268,"column":11},{"line":268,"column":20},{"doc":"toFloat n"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":268,"column":11},{"line":268,"column":18},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":268,"column":19},{"line":268,"column":20},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}],null]],[{"tag":"Span","contents":[{"line":268,"column":3},{"line":271,"column":26},{"doc":"let m = toFloat n\n    t = (2 * pi) / m\n    f = \\i -> (r * (cos (t * i)),r * (sin (t * i)))\nin List.map f [0..m - 1]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":269,"column":11},{"line":269,"column":21},{"doc":"(2 * pi) / m"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":269,"column":11},{"line":269,"column":17},{"doc":"2 * pi"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":269,"column":11},{"line":269,"column":12},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}],[{"tag":"Span","contents":[{"line":269,"column":15},{"line":269,"column":17},{"doc":"pi"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"pi"}}]]}],[{"tag":"Span","contents":[{"line":269,"column":20},{"line":269,"column":21},{"doc":"m"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"m"}}]]}],null]],[{"tag":"Span","contents":[{"line":268,"column":3},{"line":271,"column":26},{"doc":"let m = toFloat n\n    t = (2 * pi) / m\n    f = \\i -> (r * (cos (t * i)),r * (sin (t * i)))\nin List.map f [0..m - 1]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":270,"column":15},{"line":270,"column":43},{"doc":"(r * (cos (t * i)),r * (sin (t * i)))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"i"},[{"tag":"Span","contents":[{"line":270,"column":15},{"line":270,"column":43},{"doc":"(r * (cos (t * i)),r * (sin (t * i)))"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":270,"column":15},{"line":270,"column":27},{"doc":"r * (cos (t * i))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":270,"column":15},{"line":270,"column":16},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}],[{"tag":"Span","contents":[{"line":270,"column":19},{"line":270,"column":27},{"doc":"cos (t * i)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":270,"column":19},{"line":270,"column":22},{"doc":"cos"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"cos"}}],[{"tag":"Span","contents":[{"line":270,"column":24},{"line":270,"column":27},{"doc":"t * i"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":270,"column":24},{"line":270,"column":25},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}],[{"tag":"Span","contents":[{"line":270,"column":26},{"line":270,"column":27},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":270,"column":30},{"line":270,"column":42},{"doc":"r * (sin (t * i))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":270,"column":30},{"line":270,"column":31},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}],[{"tag":"Span","contents":[{"line":270,"column":34},{"line":270,"column":42},{"doc":"sin (t * i)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":270,"column":34},{"line":270,"column":37},{"doc":"sin"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"sin"}}],[{"tag":"Span","contents":[{"line":270,"column":39},{"line":270,"column":42},{"doc":"t * i"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":270,"column":39},{"line":270,"column":40},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}],[{"tag":"Span","contents":[{"line":270,"column":41},{"line":270,"column":42},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}]]}]]}]]}]]]}]]}],null]],[{"tag":"Span","contents":[{"line":271,"column":7},{"line":271,"column":26},{"doc":"List.map f [0..m - 1]"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":271,"column":7},{"line":271,"column":17},{"doc":"List.map f"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":271,"column":7},{"line":271,"column":15},{"doc":"List.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":271,"column":16},{"line":271,"column":17},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]}],[{"tag":"Span","contents":[{"line":271,"column":18},{"line":271,"column":26},{"doc":"[0..m - 1]"}]},{"tag":"Range","contents":[[{"tag":"Span","contents":[{"line":271,"column":19},{"line":271,"column":20},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":271,"column":22},{"line":271,"column":25},{"doc":"m - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":271,"column":22},{"line":271,"column":23},{"doc":"m"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"m"}}],[{"tag":"Span","contents":[{"line":271,"column":24},{"line":271,"column":25},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"oval"},[{"tag":"Span","contents":[{"line":249,"column":3},{"line":254,"column":26},{"doc":"let n = 50\n    t = (2 * pi) / n\n    hw = w / 2\n    hh = h / 2\n    f = \\i -> (hw * (cos (t * i)),hh * (sin (t * i)))\nin List.map f [0..n - 1]"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":249,"column":3},{"line":254,"column":26},{"doc":"let n = 50\n    t = (2 * pi) / n\n    hw = w / 2\n    hh = h / 2\n    f = \\i -> (hw * (cos (t * i)),hh * (sin (t * i)))\nin List.map f [0..n - 1]"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":249,"column":3},{"line":254,"column":26},{"doc":"let n = 50\n    t = (2 * pi) / n\n    hw = w / 2\n    hh = h / 2\n    f = \\i -> (hw * (cos (t * i)),hh * (sin (t * i)))\nin List.map f [0..n - 1]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hh"},[{"tag":"Span","contents":[{"line":252,"column":12},{"line":252,"column":15},{"doc":"h / 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":252,"column":12},{"line":252,"column":13},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}],[{"tag":"Span","contents":[{"line":252,"column":14},{"line":252,"column":15},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],null]],[{"tag":"Span","contents":[{"line":249,"column":3},{"line":254,"column":26},{"doc":"let n = 50\n    t = (2 * pi) / n\n    hw = w / 2\n    hh = h / 2\n    f = \\i -> (hw * (cos (t * i)),hh * (sin (t * i)))\nin List.map f [0..n - 1]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hw"},[{"tag":"Span","contents":[{"line":251,"column":12},{"line":251,"column":15},{"doc":"w / 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":251,"column":12},{"line":251,"column":13},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}],[{"tag":"Span","contents":[{"line":251,"column":14},{"line":251,"column":15},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],null]],[{"tag":"Span","contents":[{"line":249,"column":3},{"line":254,"column":26},{"doc":"let n = 50\n    t = (2 * pi) / n\n    hw = w / 2\n    hh = h / 2\n    f = \\i -> (hw * (cos (t * i)),hh * (sin (t * i)))\nin List.map f [0..n - 1]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":249,"column":11},{"line":249,"column":13},{"doc":"50"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":50}}],null]],[{"tag":"Span","contents":[{"line":249,"column":3},{"line":254,"column":26},{"doc":"let n = 50\n    t = (2 * pi) / n\n    hw = w / 2\n    hh = h / 2\n    f = \\i -> (hw * (cos (t * i)),hh * (sin (t * i)))\nin List.map f [0..n - 1]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":250,"column":11},{"line":250,"column":21},{"doc":"(2 * pi) / n"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":250,"column":11},{"line":250,"column":17},{"doc":"2 * pi"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":250,"column":11},{"line":250,"column":12},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}],[{"tag":"Span","contents":[{"line":250,"column":15},{"line":250,"column":17},{"doc":"pi"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"pi"}}]]}],[{"tag":"Span","contents":[{"line":250,"column":20},{"line":250,"column":21},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}],null]],[{"tag":"Span","contents":[{"line":249,"column":3},{"line":254,"column":26},{"doc":"let n = 50\n    t = (2 * pi) / n\n    hw = w / 2\n    hh = h / 2\n    f = \\i -> (hw * (cos (t * i)),hh * (sin (t * i)))\nin List.map f [0..n - 1]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":253,"column":14},{"line":253,"column":44},{"doc":"(hw * (cos (t * i)),hh * (sin (t * i)))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"i"},[{"tag":"Span","contents":[{"line":253,"column":14},{"line":253,"column":44},{"doc":"(hw * (cos (t * i)),hh * (sin (t * i)))"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":253,"column":14},{"line":253,"column":27},{"doc":"hw * (cos (t * i))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":253,"column":14},{"line":253,"column":16},{"doc":"hw"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hw"}}],[{"tag":"Span","contents":[{"line":253,"column":19},{"line":253,"column":27},{"doc":"cos (t * i)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":253,"column":19},{"line":253,"column":22},{"doc":"cos"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"cos"}}],[{"tag":"Span","contents":[{"line":253,"column":24},{"line":253,"column":27},{"doc":"t * i"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":253,"column":24},{"line":253,"column":25},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}],[{"tag":"Span","contents":[{"line":253,"column":26},{"line":253,"column":27},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":253,"column":30},{"line":253,"column":43},{"doc":"hh * (sin (t * i))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":253,"column":30},{"line":253,"column":32},{"doc":"hh"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hh"}}],[{"tag":"Span","contents":[{"line":253,"column":35},{"line":253,"column":43},{"doc":"sin (t * i)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":253,"column":35},{"line":253,"column":38},{"doc":"sin"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"sin"}}],[{"tag":"Span","contents":[{"line":253,"column":40},{"line":253,"column":43},{"doc":"t * i"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":253,"column":40},{"line":253,"column":41},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}],[{"tag":"Span","contents":[{"line":253,"column":42},{"line":253,"column":43},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}]]}]]}]]}]]]}]]}],null]],[{"tag":"Span","contents":[{"line":254,"column":7},{"line":254,"column":26},{"doc":"List.map f [0..n - 1]"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":254,"column":7},{"line":254,"column":17},{"doc":"List.map f"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":254,"column":7},{"line":254,"column":15},{"doc":"List.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":254,"column":16},{"line":254,"column":17},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]}],[{"tag":"Span","contents":[{"line":254,"column":18},{"line":254,"column":26},{"doc":"[0..n - 1]"}]},{"tag":"Range","contents":[[{"tag":"Span","contents":[{"line":254,"column":19},{"line":254,"column":20},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":254,"column":22},{"line":254,"column":25},{"doc":"n - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":254,"column":22},{"line":254,"column":23},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}],[{"tag":"Span","contents":[{"line":254,"column":24},{"line":254,"column":25},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"circle"},[{"tag":"Span","contents":[{"line":258,"column":12},{"line":258,"column":27},{"doc":"oval (2 * r) (2 * r)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"r"},[{"tag":"Span","contents":[{"line":258,"column":12},{"line":258,"column":27},{"doc":"oval (2 * r) (2 * r)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":258,"column":12},{"line":258,"column":21},{"doc":"oval (2 * r)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":258,"column":12},{"line":258,"column":16},{"doc":"oval"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"oval"}}],[{"tag":"Span","contents":[{"line":258,"column":18},{"line":258,"column":21},{"doc":"2 * r"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":258,"column":18},{"line":258,"column":19},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}],[{"tag":"Span","contents":[{"line":258,"column":20},{"line":258,"column":21},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}]]}],[{"tag":"Span","contents":[{"line":258,"column":24},{"line":258,"column":27},{"doc":"2 * r"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":258,"column":24},{"line":258,"column":25},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}],[{"tag":"Span","contents":[{"line":258,"column":26},{"line":258,"column":27},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"rect"},[{"tag":"Span","contents":[{"line":238,"column":12},{"line":240,"column":62},{"doc":"let hw = w / 2\n    hh = h / 2\nin [(-hw,-hh),(-hw,hh),(hw,hh),(hw,-hh)]"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":238,"column":12},{"line":240,"column":62},{"doc":"let hw = w / 2\n    hh = h / 2\nin [(-hw,-hh),(-hw,hh),(hw,hh),(hw,-hh)]"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":238,"column":12},{"line":240,"column":62},{"doc":"let hw = w / 2\n    hh = h / 2\nin [(-hw,-hh),(-hw,hh),(hw,hh),(hw,-hh)]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hh"},[{"tag":"Span","contents":[{"line":239,"column":21},{"line":239,"column":24},{"doc":"h / 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":239,"column":21},{"line":239,"column":22},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}],[{"tag":"Span","contents":[{"line":239,"column":23},{"line":239,"column":24},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],null]],[{"tag":"Span","contents":[{"line":238,"column":12},{"line":240,"column":62},{"doc":"let hw = w / 2\n    hh = h / 2\nin [(-hw,-hh),(-hw,hh),(hw,hh),(hw,-hh)]"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hw"},[{"tag":"Span","contents":[{"line":238,"column":21},{"line":238,"column":24},{"doc":"w / 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":238,"column":21},{"line":238,"column":22},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}],[{"tag":"Span","contents":[{"line":238,"column":23},{"line":238,"column":24},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],null]],[{"tag":"Span","contents":[{"line":240,"column":16},{"line":240,"column":62},{"doc":"[(-hw,-hh),(-hw,hh),(hw,hh),(hw,-hh)]"}]},{"tag":"ExplicitList","contents":[[{"tag":"Span","contents":[{"line":240,"column":19},{"line":240,"column":28},{"doc":"(-hw,-hh)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":240,"column":19},{"line":240,"column":23},{"doc":"-hw"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":240,"column":19},{"line":240,"column":20},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":240,"column":21},{"line":240,"column":23},{"doc":"hw"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hw"}}]]}],[{"tag":"Span","contents":[{"line":240,"column":24},{"line":240,"column":28},{"doc":"-hh"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":240,"column":24},{"line":240,"column":25},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":240,"column":26},{"line":240,"column":28},{"doc":"hh"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hh"}}]]}]]]}],[{"tag":"Span","contents":[{"line":240,"column":32},{"line":240,"column":39},{"doc":"(-hw,hh)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":240,"column":32},{"line":240,"column":36},{"doc":"-hw"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":240,"column":32},{"line":240,"column":33},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":240,"column":34},{"line":240,"column":36},{"doc":"hw"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hw"}}]]}],[{"tag":"Span","contents":[{"line":240,"column":37},{"line":240,"column":39},{"doc":"hh"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hh"}}]]]}],[{"tag":"Span","contents":[{"line":240,"column":43},{"line":240,"column":48},{"doc":"(hw,hh)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":240,"column":43},{"line":240,"column":45},{"doc":"hw"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hw"}}],[{"tag":"Span","contents":[{"line":240,"column":46},{"line":240,"column":48},{"doc":"hh"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hh"}}]]]}],[{"tag":"Span","contents":[{"line":240,"column":52},{"line":240,"column":59},{"doc":"(hw,-hh)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":240,"column":52},{"line":240,"column":54},{"doc":"hw"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hw"}}],[{"tag":"Span","contents":[{"line":240,"column":55},{"line":240,"column":59},{"doc":"-hh"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":240,"column":55},{"line":240,"column":56},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":240,"column":57},{"line":240,"column":59},{"doc":"hh"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hh"}}]]}]]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"square"},[{"tag":"Span","contents":[{"line":244,"column":12},{"line":244,"column":20},{"doc":"rect n n"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":244,"column":12},{"line":244,"column":20},{"doc":"rect n n"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":244,"column":12},{"line":244,"column":18},{"doc":"rect n"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":244,"column":12},{"line":244,"column":16},{"doc":"rect"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"rect"}}],[{"tag":"Span","contents":[{"line":244,"column":17},{"line":244,"column":18},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}],[{"tag":"Span","contents":[{"line":244,"column":19},{"line":244,"column":20},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"polygon"},[{"tag":"Span","contents":[{"line":234,"column":18},{"line":234,"column":24},{"doc":"points"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"points"},[{"tag":"Span","contents":[{"line":234,"column":18},{"line":234,"column":24},{"doc":"points"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"points"}}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"segment"},[{"tag":"Span","contents":[{"line":225,"column":17},{"line":225,"column":24},{"doc":"[p1,p2]"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"p1"},[{"tag":"Span","contents":[{"line":225,"column":17},{"line":225,"column":24},{"doc":"[p1,p2]"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"p2"},[{"tag":"Span","contents":[{"line":225,"column":17},{"line":225,"column":24},{"doc":"[p1,p2]"}]},{"tag":"ExplicitList","contents":[[{"tag":"Span","contents":[{"line":225,"column":18},{"line":225,"column":20},{"doc":"p1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p1"}}],[{"tag":"Span","contents":[{"line":225,"column":21},{"line":225,"column":23},{"doc":"p2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p2"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"path"},[{"tag":"Span","contents":[{"line":221,"column":11},{"line":221,"column":13},{"doc":"ps"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"ps"},[{"tag":"Span","contents":[{"line":221,"column":11},{"line":221,"column":13},{"doc":"ps"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"ps"}}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"collage"},[{"tag":"Span","contents":[{"line":214,"column":27},{"line":214,"column":42},{"doc":"Native.Graphics.Collage.collage"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Graphics","Collage"]},"name":"collage"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"alpha"},[{"tag":"Span","contents":[{"line":208,"column":17},{"line":208,"column":29},{"doc":"{f | alpha <- a}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"Span","contents":[{"line":208,"column":17},{"line":208,"column":29},{"doc":"{f | alpha <- a}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":208,"column":17},{"line":208,"column":29},{"doc":"{f | alpha <- a}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":208,"column":15},{"line":208,"column":16},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[["alpha",[{"tag":"Span","contents":[{"line":208,"column":28},{"line":208,"column":29},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"rotate"},[{"tag":"Span","contents":[{"line":204,"column":18},{"line":204,"column":40},{"doc":"{f | theta <- f.theta + t}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"t"},[{"tag":"Span","contents":[{"line":204,"column":18},{"line":204,"column":40},{"doc":"{f | theta <- f.theta + t}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":204,"column":18},{"line":204,"column":40},{"doc":"{f | theta <- f.theta + t}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":204,"column":16},{"line":204,"column":17},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[["theta",[{"tag":"Span","contents":[{"line":204,"column":29},{"line":204,"column":40},{"doc":"f.theta + t"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":204,"column":29},{"line":204,"column":36},{"doc":"f.theta"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":204,"column":29},{"line":204,"column":30},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],"theta"]}],[{"tag":"Span","contents":[{"line":204,"column":39},{"line":204,"column":40},{"doc":"t"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t"}}]]}]]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"scale"},[{"tag":"Span","contents":[{"line":197,"column":17},{"line":197,"column":39},{"doc":"{f | scale <- f.scale * s}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"s"},[{"tag":"Span","contents":[{"line":197,"column":17},{"line":197,"column":39},{"doc":"{f | scale <- f.scale * s}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":197,"column":17},{"line":197,"column":39},{"doc":"{f | scale <- f.scale * s}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":197,"column":15},{"line":197,"column":16},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[["scale",[{"tag":"Span","contents":[{"line":197,"column":28},{"line":197,"column":39},{"doc":"f.scale * s"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":197,"column":28},{"line":197,"column":35},{"doc":"f.scale"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":197,"column":28},{"line":197,"column":29},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],"scale"]}],[{"tag":"Span","contents":[{"line":197,"column":38},{"line":197,"column":39},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}]]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"moveY"},[{"tag":"Span","contents":[{"line":191,"column":17},{"line":191,"column":31},{"doc":"{f | y <- f.y + y}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":191,"column":17},{"line":191,"column":31},{"doc":"{f | y <- f.y + y}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":191,"column":17},{"line":191,"column":31},{"doc":"{f | y <- f.y + y}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":191,"column":15},{"line":191,"column":16},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[["y",[{"tag":"Span","contents":[{"line":191,"column":24},{"line":191,"column":31},{"doc":"f.y + y"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":191,"column":24},{"line":191,"column":27},{"doc":"f.y"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":191,"column":24},{"line":191,"column":25},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],"y"]}],[{"tag":"Span","contents":[{"line":191,"column":30},{"line":191,"column":31},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]}]]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"moveX"},[{"tag":"Span","contents":[{"line":185,"column":17},{"line":185,"column":31},{"doc":"{f | x <- f.x + x}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":185,"column":17},{"line":185,"column":31},{"doc":"{f | x <- f.x + x}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":185,"column":17},{"line":185,"column":31},{"doc":"{f | x <- f.x + x}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":185,"column":15},{"line":185,"column":16},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[["x",[{"tag":"Span","contents":[{"line":185,"column":24},{"line":185,"column":31},{"doc":"f.x + x"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":185,"column":24},{"line":185,"column":27},{"doc":"f.x"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":185,"column":24},{"line":185,"column":25},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],"x"]}],[{"tag":"Span","contents":[{"line":185,"column":30},{"line":185,"column":31},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}]]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"move"},[{"tag":"Span","contents":[{"line":179,"column":20},{"line":179,"column":48},{"doc":"{f | x <- f.x + x, y <- f.y + y}"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"x"},{"tag":"Var","contents":"y"}]]},[{"tag":"Span","contents":[{"line":179,"column":20},{"line":179,"column":48},{"doc":"{f | x <- f.x + x, y <- f.y + y}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":179,"column":20},{"line":179,"column":48},{"doc":"{f | x <- f.x + x, y <- f.y + y}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":179,"column":18},{"line":179,"column":19},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[["x",[{"tag":"Span","contents":[{"line":179,"column":27},{"line":179,"column":34},{"doc":"f.x + x"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":179,"column":27},{"line":179,"column":30},{"doc":"f.x"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":179,"column":27},{"line":179,"column":28},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],"x"]}],[{"tag":"Span","contents":[{"line":179,"column":33},{"line":179,"column":34},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}]],["y",[{"tag":"Span","contents":[{"line":179,"column":41},{"line":179,"column":48},{"doc":"f.y + y"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":179,"column":41},{"line":179,"column":44},{"doc":"f.y"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":179,"column":41},{"line":179,"column":42},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],"y"]}],[{"tag":"Span","contents":[{"line":179,"column":47},{"line":179,"column":48},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]}]]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"form"},[{"tag":"Span","contents":[{"line":123,"column":12},{"line":123,"column":55},{"doc":"{ theta = 0, scale = 1, x = 0, y = 0, alpha = 1, form = f }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":123,"column":12},{"line":123,"column":55},{"doc":"{ theta = 0, scale = 1, x = 0, y = 0, alpha = 1, form = f }"}]},{"tag":"Record","contents":[["theta",[{"tag":"Span","contents":[{"line":123,"column":18},{"line":123,"column":19},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]],["scale",[{"tag":"Span","contents":[{"line":123,"column":27},{"line":123,"column":28},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]],["x",[{"tag":"Span","contents":[{"line":123,"column":32},{"line":123,"column":33},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]],["y",[{"tag":"Span","contents":[{"line":123,"column":37},{"line":123,"column":38},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]],["alpha",[{"tag":"Span","contents":[{"line":123,"column":46},{"line":123,"column":47},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]],["form",[{"tag":"Span","contents":[{"line":123,"column":54},{"line":123,"column":55},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Fill"},[{"tag":"None","contents":{"doc":"Fill a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Fill a"}},{"tag":"Data","contents":["Fill",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"ShapeStyle"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Line"},[{"tag":"None","contents":{"doc":"Line a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Line a"}},{"tag":"Data","contents":["Line",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"ShapeStyle"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"FGroup"},[{"tag":"None","contents":{"doc":"FGroup a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"FGroup a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"FGroup a b"}},{"tag":"Data","contents":["FGroup",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Transform2D"]},"name":"Transform2D"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},[]]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"group"},[{"tag":"Span","contents":[{"line":166,"column":12},{"line":166,"column":38},{"doc":"form (FGroup T.identity fs)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"fs"},[{"tag":"Span","contents":[{"line":166,"column":12},{"line":166,"column":38},{"doc":"form (FGroup T.identity fs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":166,"column":12},{"line":166,"column":16},{"doc":"form"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"form"}}],[{"tag":"Span","contents":[{"line":166,"column":18},{"line":166,"column":38},{"doc":"FGroup T.identity fs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":166,"column":18},{"line":166,"column":35},{"doc":"FGroup T.identity"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":166,"column":18},{"line":166,"column":24},{"doc":"FGroup"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"FGroup"}}],[{"tag":"Span","contents":[{"line":166,"column":25},{"line":166,"column":35},{"doc":"T.identity"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Transform2D"]},"name":"identity"}}]]}],[{"tag":"Span","contents":[{"line":166,"column":36},{"line":166,"column":38},{"doc":"fs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fs"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"groupTransform"},[{"tag":"Span","contents":[{"line":172,"column":28},{"line":172,"column":50},{"doc":"form (FGroup matrix fs)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"matrix"},[{"tag":"Span","contents":[{"line":172,"column":28},{"line":172,"column":50},{"doc":"form (FGroup matrix fs)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"fs"},[{"tag":"Span","contents":[{"line":172,"column":28},{"line":172,"column":50},{"doc":"form (FGroup matrix fs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":172,"column":28},{"line":172,"column":32},{"doc":"form"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"form"}}],[{"tag":"Span","contents":[{"line":172,"column":34},{"line":172,"column":50},{"doc":"FGroup matrix fs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":172,"column":34},{"line":172,"column":47},{"doc":"FGroup matrix"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":172,"column":34},{"line":172,"column":40},{"doc":"FGroup"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"FGroup"}}],[{"tag":"Span","contents":[{"line":172,"column":41},{"line":172,"column":47},{"doc":"matrix"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"matrix"}}]]}],[{"tag":"Span","contents":[{"line":172,"column":48},{"line":172,"column":50},{"doc":"fs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fs"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Transform2D"]},"name":"Transform2D"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"FElement"},[{"tag":"None","contents":{"doc":"FElement a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"FElement a"}},{"tag":"Data","contents":["FElement",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toForm"},[{"tag":"Span","contents":[{"line":160,"column":12},{"line":160,"column":28},{"doc":"form (FElement e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":160,"column":12},{"line":160,"column":28},{"doc":"form (FElement e)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":160,"column":12},{"line":160,"column":16},{"doc":"form"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"form"}}],[{"tag":"Span","contents":[{"line":160,"column":18},{"line":160,"column":28},{"doc":"FElement e"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":160,"column":18},{"line":160,"column":26},{"doc":"FElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"FElement"}}],[{"tag":"Span","contents":[{"line":160,"column":27},{"line":160,"column":28},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"FImage"},[{"tag":"None","contents":{"doc":"FImage a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"FImage a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"FImage a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"FImage a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"FImage a b c d"}},{"tag":"Data","contents":["FImage",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}],[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},[]]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"sprite"},[{"tag":"Span","contents":[{"line":153,"column":22},{"line":153,"column":46},{"doc":"form (FImage w h pos src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":153,"column":22},{"line":153,"column":46},{"doc":"form (FImage w h pos src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":153,"column":22},{"line":153,"column":46},{"doc":"form (FImage w h pos src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"pos"},[{"tag":"Span","contents":[{"line":153,"column":22},{"line":153,"column":46},{"doc":"form (FImage w h pos src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"src"},[{"tag":"Span","contents":[{"line":153,"column":22},{"line":153,"column":46},{"doc":"form (FImage w h pos src)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":153,"column":22},{"line":153,"column":26},{"doc":"form"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"form"}}],[{"tag":"Span","contents":[{"line":153,"column":28},{"line":153,"column":46},{"doc":"FImage w h pos src"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":153,"column":28},{"line":153,"column":42},{"doc":"FImage w h pos"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":153,"column":28},{"line":153,"column":38},{"doc":"FImage w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":153,"column":28},{"line":153,"column":36},{"doc":"FImage w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":153,"column":28},{"line":153,"column":34},{"doc":"FImage"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"FImage"}}],[{"tag":"Span","contents":[{"line":153,"column":35},{"line":153,"column":36},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":153,"column":37},{"line":153,"column":38},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":153,"column":39},{"line":153,"column":42},{"doc":"pos"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"pos"}}]]}],[{"tag":"Span","contents":[{"line":153,"column":43},{"line":153,"column":46},{"doc":"src"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"src"}}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"FShape"},[{"tag":"None","contents":{"doc":"FShape a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"FShape a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"FShape a b"}},{"tag":"Data","contents":["FShape",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"ShapeStyle"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},[]]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fill"},[{"tag":"Span","contents":[{"line":125,"column":20},{"line":125,"column":51},{"doc":"form (FShape (Fill style) shape)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"style"},[{"tag":"Span","contents":[{"line":125,"column":20},{"line":125,"column":51},{"doc":"form (FShape (Fill style) shape)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"shape"},[{"tag":"Span","contents":[{"line":125,"column":20},{"line":125,"column":51},{"doc":"form (FShape (Fill style) shape)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":125,"column":20},{"line":125,"column":24},{"doc":"form"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"form"}}],[{"tag":"Span","contents":[{"line":125,"column":26},{"line":125,"column":51},{"doc":"FShape (Fill style) shape"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":125,"column":26},{"line":125,"column":44},{"doc":"FShape (Fill style)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":125,"column":26},{"line":125,"column":32},{"doc":"FShape"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"FShape"}}],[{"tag":"Span","contents":[{"line":125,"column":34},{"line":125,"column":44},{"doc":"Fill style"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":125,"column":34},{"line":125,"column":38},{"doc":"Fill"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Fill"}}],[{"tag":"Span","contents":[{"line":125,"column":39},{"line":125,"column":44},{"doc":"style"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"style"}}]]}]]}],[{"tag":"Span","contents":[{"line":125,"column":46},{"line":125,"column":51},{"doc":"shape"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"shape"}}]]}]]}]]}]]}],null]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"outlined"},[{"tag":"Span","contents":[{"line":143,"column":24},{"line":143,"column":55},{"doc":"form (FShape (Line style) shape)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"style"},[{"tag":"Span","contents":[{"line":143,"column":24},{"line":143,"column":55},{"doc":"form (FShape (Line style) shape)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"shape"},[{"tag":"Span","contents":[{"line":143,"column":24},{"line":143,"column":55},{"doc":"form (FShape (Line style) shape)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":143,"column":24},{"line":143,"column":28},{"doc":"form"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"form"}}],[{"tag":"Span","contents":[{"line":143,"column":30},{"line":143,"column":55},{"doc":"FShape (Line style) shape"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":143,"column":30},{"line":143,"column":48},{"doc":"FShape (Line style)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":143,"column":30},{"line":143,"column":36},{"doc":"FShape"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"FShape"}}],[{"tag":"Span","contents":[{"line":143,"column":38},{"line":143,"column":48},{"doc":"Line style"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":143,"column":38},{"line":143,"column":42},{"doc":"Line"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Line"}}],[{"tag":"Span","contents":[{"line":143,"column":43},{"line":143,"column":48},{"doc":"style"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"style"}}]]}]]}],[{"tag":"Span","contents":[{"line":143,"column":50},{"line":143,"column":55},{"doc":"shape"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"shape"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"FPath"},[{"tag":"None","contents":{"doc":"FPath a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"FPath a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"FPath a b"}},{"tag":"Data","contents":["FPath",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},[]]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"traced"},[{"tag":"Span","contents":[{"line":147,"column":21},{"line":147,"column":43},{"doc":"form (FPath style path)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"style"},[{"tag":"Span","contents":[{"line":147,"column":21},{"line":147,"column":43},{"doc":"form (FPath style path)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"path"},[{"tag":"Span","contents":[{"line":147,"column":21},{"line":147,"column":43},{"doc":"form (FPath style path)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":147,"column":21},{"line":147,"column":25},{"doc":"form"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"form"}}],[{"tag":"Span","contents":[{"line":147,"column":27},{"line":147,"column":43},{"doc":"FPath style path"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":147,"column":27},{"line":147,"column":38},{"doc":"FPath style"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":147,"column":27},{"line":147,"column":32},{"doc":"FPath"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"FPath"}}],[{"tag":"Span","contents":[{"line":147,"column":33},{"line":147,"column":38},{"doc":"style"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"style"}}]]}],[{"tag":"Span","contents":[{"line":147,"column":39},{"line":147,"column":43},{"doc":"path"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"path"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Path"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"LineStyle"},[{"tag":"None","contents":{"doc":"{ color = a\n, width = b\n, cap = c\n, join = d\n, dashing = e\n, dashOffset = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"{ color = a\n, width = b\n, cap = c\n, join = d\n, dashing = e\n, dashOffset = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"{ color = a\n, width = b\n, cap = c\n, join = d\n, dashing = e\n, dashOffset = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"{ color = a\n, width = b\n, cap = c\n, join = d\n, dashing = e\n, dashOffset = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"{ color = a\n, width = b\n, cap = c\n, join = d\n, dashing = e\n, dashOffset = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"None","contents":{"doc":"{ color = a\n, width = b\n, cap = c\n, join = d\n, dashing = e\n, dashOffset = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"None","contents":{"doc":"{ color = a\n, width = b\n, cap = c\n, join = d\n, dashing = e\n, dashOffset = f\n}"}},{"tag":"Record","contents":[["color",[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]],["width",[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]],["cap",[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]],["join",[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]],["dashing",[{"tag":"None","contents":{"doc":"e"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]],["dashOffset",[{"tag":"None","contents":{"doc":"f"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]}]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Clipped"},[{"tag":"None","contents":{"doc":"Clipped"}},{"tag":"Data","contents":["Clipped",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}},[]]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Sharp"},[{"tag":"None","contents":{"doc":"Sharp a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Sharp a"}},{"tag":"Data","contents":["Sharp",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Smooth"},[{"tag":"None","contents":{"doc":"Smooth"}},{"tag":"Data","contents":["Smooth",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}},[]]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Padded"},[{"tag":"None","contents":{"doc":"Padded"}},{"tag":"Data","contents":["Padded",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}},[]]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Round"},[{"tag":"None","contents":{"doc":"Round"}},{"tag":"Data","contents":["Round",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}},[]]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Flat"},[{"tag":"None","contents":{"doc":"Flat"}},{"tag":"Data","contents":["Flat",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}},[]]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"defaultLine"},[{"tag":"Span","contents":[{"line":90,"column":7},{"line":95,"column":21},{"doc":"{ color = black\n, width = 1\n, cap = Flat\n, join = Sharp 10\n, dashing = []\n, dashOffset = 0\n}"}]},{"tag":"Record","contents":[["color",[{"tag":"Span","contents":[{"line":90,"column":15},{"line":90,"column":20},{"doc":"black"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"black"}}]],["width",[{"tag":"Span","contents":[{"line":91,"column":15},{"line":91,"column":16},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]],["cap",[{"tag":"Span","contents":[{"line":92,"column":15},{"line":92,"column":19},{"doc":"Flat"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Flat"}}]],["join",[{"tag":"Span","contents":[{"line":93,"column":15},{"line":93,"column":23},{"doc":"Sharp 10"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":93,"column":15},{"line":93,"column":20},{"doc":"Sharp"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Sharp"}}],[{"tag":"Span","contents":[{"line":93,"column":21},{"line":93,"column":23},{"doc":"10"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":10}}]]}]],["dashing",[{"tag":"Span","contents":[{"line":94,"column":17},{"line":94,"column":19},{"doc":"[]"}]},{"tag":"ExplicitList","contents":[]}]],["dashOffset",[{"tag":"Span","contents":[{"line":95,"column":20},{"line":95,"column":21},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"solid"},[{"tag":"Span","contents":[{"line":100,"column":28},{"line":100,"column":42},{"doc":"{defaultLine | color <- clr}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"clr"},[{"tag":"Span","contents":[{"line":100,"column":28},{"line":100,"column":42},{"doc":"{defaultLine | color <- clr}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":100,"column":16},{"line":100,"column":27},{"doc":"defaultLine"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"defaultLine"}}],[["color",[{"tag":"Span","contents":[{"line":100,"column":39},{"line":100,"column":42},{"doc":"clr"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"clr"}}]]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"dashed"},[{"tag":"Span","contents":[{"line":104,"column":28},{"line":104,"column":60},{"doc":"{defaultLine | color <- clr, dashing <- [8,4]}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"clr"},[{"tag":"Span","contents":[{"line":104,"column":28},{"line":104,"column":60},{"doc":"{defaultLine | color <- clr, dashing <- [8,4]}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":104,"column":16},{"line":104,"column":27},{"doc":"defaultLine"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"defaultLine"}}],[["color",[{"tag":"Span","contents":[{"line":104,"column":39},{"line":104,"column":42},{"doc":"clr"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"clr"}}]],["dashing",[{"tag":"Span","contents":[{"line":104,"column":55},{"line":104,"column":60},{"doc":"[8,4]"}]},{"tag":"ExplicitList","contents":[[{"tag":"Span","contents":[{"line":104,"column":56},{"line":104,"column":57},{"doc":"8"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":8}}],[{"tag":"Span","contents":[{"line":104,"column":58},{"line":104,"column":59},{"doc":"4"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":4}}]]}]]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"dotted"},[{"tag":"Span","contents":[{"line":108,"column":28},{"line":108,"column":60},{"doc":"{defaultLine | color <- clr, dashing <- [3,3]}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"clr"},[{"tag":"Span","contents":[{"line":108,"column":28},{"line":108,"column":60},{"doc":"{defaultLine | color <- clr, dashing <- [3,3]}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":108,"column":16},{"line":108,"column":27},{"doc":"defaultLine"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"defaultLine"}}],[["color",[{"tag":"Span","contents":[{"line":108,"column":39},{"line":108,"column":42},{"doc":"clr"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"clr"}}]],["dashing",[{"tag":"Span","contents":[{"line":108,"column":55},{"line":108,"column":60},{"doc":"[3,3]"}]},{"tag":"ExplicitList","contents":[[{"tag":"Span","contents":[{"line":108,"column":56},{"line":108,"column":57},{"doc":"3"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":3}}],[{"tag":"Span","contents":[{"line":108,"column":58},{"line":108,"column":59},{"doc":"3"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":3}}]]}]]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineStyle"},{"tag":"Record","contents":[[["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["cap",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineCap"}}],["join",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"LineJoin"}}],["dashing",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}],["dashOffset",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Grad"},[{"tag":"None","contents":{"doc":"Grad a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Grad a"}},{"tag":"Data","contents":["Grad",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"gradient"},[{"tag":"Span","contents":[{"line":139,"column":23},{"line":139,"column":45},{"doc":"fill (Grad grad) shape"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"grad"},[{"tag":"Span","contents":[{"line":139,"column":23},{"line":139,"column":45},{"doc":"fill (Grad grad) shape"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"shape"},[{"tag":"Span","contents":[{"line":139,"column":23},{"line":139,"column":45},{"doc":"fill (Grad grad) shape"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":139,"column":23},{"line":139,"column":38},{"doc":"fill (Grad grad)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":139,"column":23},{"line":139,"column":27},{"doc":"fill"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fill"}}],[{"tag":"Span","contents":[{"line":139,"column":29},{"line":139,"column":38},{"doc":"Grad grad"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":139,"column":29},{"line":139,"column":33},{"doc":"Grad"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Grad"}}],[{"tag":"Span","contents":[{"line":139,"column":34},{"line":139,"column":38},{"doc":"grad"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"grad"}}]]}]]}],[{"tag":"Span","contents":[{"line":139,"column":40},{"line":139,"column":45},{"doc":"shape"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"shape"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Texture"},[{"tag":"None","contents":{"doc":"Texture a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Texture a"}},{"tag":"Data","contents":["Texture",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"textured"},[{"tag":"Span","contents":[{"line":135,"column":22},{"line":135,"column":46},{"doc":"fill (Texture src) shape"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"src"},[{"tag":"Span","contents":[{"line":135,"column":22},{"line":135,"column":46},{"doc":"fill (Texture src) shape"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"shape"},[{"tag":"Span","contents":[{"line":135,"column":22},{"line":135,"column":46},{"doc":"fill (Texture src) shape"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":135,"column":22},{"line":135,"column":39},{"doc":"fill (Texture src)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":135,"column":22},{"line":135,"column":26},{"doc":"fill"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fill"}}],[{"tag":"Span","contents":[{"line":135,"column":28},{"line":135,"column":39},{"doc":"Texture src"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":135,"column":28},{"line":135,"column":35},{"doc":"Texture"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Texture"}}],[{"tag":"Span","contents":[{"line":135,"column":36},{"line":135,"column":39},{"doc":"src"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"src"}}]]}]]}],[{"tag":"Span","contents":[{"line":135,"column":41},{"line":135,"column":46},{"doc":"shape"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"shape"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Solid"},[{"tag":"None","contents":{"doc":"Solid a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Solid a"}},{"tag":"Data","contents":["Solid",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"FillStyle"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"filled"},[{"tag":"Span","contents":[{"line":129,"column":22},{"line":129,"column":46},{"doc":"fill (Solid color) shape"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"color"},[{"tag":"Span","contents":[{"line":129,"column":22},{"line":129,"column":46},{"doc":"fill (Solid color) shape"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"shape"},[{"tag":"Span","contents":[{"line":129,"column":22},{"line":129,"column":46},{"doc":"fill (Solid color) shape"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":129,"column":22},{"line":129,"column":39},{"doc":"fill (Solid color)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":129,"column":22},{"line":129,"column":26},{"doc":"fill"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fill"}}],[{"tag":"Span","contents":[{"line":129,"column":28},{"line":129,"column":39},{"doc":"Solid color"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":129,"column":28},{"line":129,"column":33},{"doc":"Solid"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Solid"}}],[{"tag":"Span","contents":[{"line":129,"column":34},{"line":129,"column":39},{"doc":"color"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"color"}}]]}]]}],[{"tag":"Span","contents":[{"line":129,"column":41},{"line":129,"column":46},{"doc":"shape"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"shape"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Shape"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Form : Float\n           -> Float\n           -> Float\n           -> Float\n           -> Float\n           -> Graphics.Collage.BasicForm\n           -> Graphics.Collage.Form\n    Form = \\a b c d e f -> { theta = a\n                           , scale = b\n                           , x = c\n                           , y = d\n                           , alpha = e\n                           , form = f\n                           }\n    Solid : Color.Color -> Graphics.Collage.FillStyle\n    Solid = \\a -> Solid a\n    Texture : String -> Graphics.Collage.FillStyle\n    Texture = \\a -> Texture a\n    Grad : Color.Gradient -> Graphics.Collage.FillStyle\n    Grad = \\a -> Grad a\n    Flat : Graphics.Collage.LineCap\n    Flat = Flat\n    Round : Graphics.Collage.LineCap\n    Round = Round\n    Padded : Graphics.Collage.LineCap\n    Padded = Padded\n    Smooth : Graphics.Collage.LineJoin\n    Smooth = Smooth\n    Sharp : Float -> Graphics.Collage.LineJoin\n    Sharp = \\a -> Sharp a\n    Clipped : Graphics.Collage.LineJoin\n    Clipped = Clipped\n    LineStyle : Color.Color\n                -> Float\n                -> Graphics.Collage.LineCap\n                -> Graphics.Collage.LineJoin\n                -> List Int\n                -> Int\n                -> Graphics.Collage.LineStyle\n    LineStyle = \\a b c d e f -> { color = a\n                                , width = b\n                                , cap = c\n                                , join = d\n                                , dashing = e\n                                , dashOffset = f\n                                }\n    defaultLine : Graphics.Collage.LineStyle\n    defaultLine = { color = Color.black\n                  , width = 1\n                  , cap = Flat\n                  , join = Sharp 10\n                  , dashing = []\n                  , dashOffset = 0\n                  }\n    solid : Color.Color -> Graphics.Collage.LineStyle\n    solid = \\clr -> {defaultLine | color <- clr}\n    dashed : Color.Color -> Graphics.Collage.LineStyle\n    dashed = \\clr -> {defaultLine | color <- clr, dashing <- [8,4]}\n    dotted : Color.Color -> Graphics.Collage.LineStyle\n    dotted = \\clr -> {defaultLine | color <- clr, dashing <- [3,3]}\n    FPath : Graphics.Collage.LineStyle\n            -> Graphics.Collage.Path -> Graphics.Collage.BasicForm\n    FPath = \\a b -> FPath a b\n    FShape : Graphics.Collage.ShapeStyle\n             -> Graphics.Collage.Shape -> Graphics.Collage.BasicForm\n    FShape = \\a b -> FShape a b\n    FImage : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.BasicForm\n    FImage = \\a b c d -> FImage a b c d\n    FElement : Graphics.Element.Element -> Graphics.Collage.BasicForm\n    FElement = \\a -> FElement a\n    FGroup : Transform2D.Transform2D\n             -> List Graphics.Collage.Form -> Graphics.Collage.BasicForm\n    FGroup = \\a b -> FGroup a b\n    Line : Graphics.Collage.LineStyle -> Graphics.Collage.ShapeStyle\n    Line = \\a -> Line a\n    Fill : Graphics.Collage.FillStyle -> Graphics.Collage.ShapeStyle\n    Fill = \\a -> Fill a\n    form : Graphics.Collage.BasicForm -> Graphics.Collage.Form\n    form = \\f -> { theta = 0\n                 , scale = 1\n                 , x = 0\n                 , y = 0\n                 , alpha = 1\n                 , form = f\n                 }\n    fill = \\style shape -> form (FShape (Fill style) shape)\n    filled : Color.Color\n             -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    filled = \\color shape -> fill (Solid color) shape\n    textured : String\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    textured = \\src shape -> fill (Texture src) shape\n    gradient : Color.Gradient\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    gradient = \\grad shape -> fill (Grad grad) shape\n    outlined : Graphics.Collage.LineStyle\n               -> Graphics.Collage.Shape -> Graphics.Collage.Form\n    outlined = \\style shape -> form (FShape (Line style) shape)\n    traced : Graphics.Collage.LineStyle\n             -> Graphics.Collage.Path -> Graphics.Collage.Form\n    traced = \\style path -> form (FPath style path)\n    sprite : Int\n             -> Int -> (Int, Int) -> String -> Graphics.Collage.Form\n    sprite = \\w h pos src -> form (FImage w h pos src)\n    toForm : Graphics.Element.Element -> Graphics.Collage.Form\n    toForm = \\e -> form (FElement e)\n    group : List Graphics.Collage.Form -> Graphics.Collage.Form\n    group = \\fs -> form (FGroup Transform2D.identity fs)\n    groupTransform : Transform2D.Transform2D\n                     -> List Graphics.Collage.Form -> Graphics.Collage.Form\n    groupTransform = \\matrix fs -> form (FGroup matrix fs)\n    move : (Float, Float)\n           -> Graphics.Collage.Form -> Graphics.Collage.Form\n    move = \\(x,y) f -> {f | x <- f.x `Basics.+` x,\n                            y <- f.y `Basics.+` y}\n    moveX : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveX = \\x f -> {f | x <- f.x `Basics.+` x}\n    moveY : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    moveY = \\y f -> {f | y <- f.y `Basics.+` y}\n    scale : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    scale = \\s f -> {f | scale <- f.scale `Basics.*` s}\n    rotate : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    rotate = \\t f -> {f | theta <- f.theta `Basics.+` t}\n    alpha : Float -> Graphics.Collage.Form -> Graphics.Collage.Form\n    alpha = \\a f -> {f | alpha <- a}\n    collage : Int\n              -> Int -> List Graphics.Collage.Form -> Graphics.Element.Element\n    collage = Native.Graphics.Collage.collage\n    path : List (Float, Float) -> Graphics.Collage.Path\n    path = \\ps -> ps\n    segment : (Float, Float) -> (Float, Float) -> Graphics.Collage.Path\n    segment = \\p1 p2 -> [p1,p2]\n    polygon : List (Float, Float) -> Graphics.Collage.Shape\n    polygon = \\points -> points\n    rect : Float -> Float -> Graphics.Collage.Shape\n    rect = \\w h -> let hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                   in [(0 `Basics.-` hw,0 `Basics.-` hh),\n                       (0 `Basics.-` hw,hh),\n                       (hw,hh),\n                       (hw,0 `Basics.-` hh)]\n    square : Float -> Graphics.Collage.Shape\n    square = \\n -> rect n n\n    oval : Float -> Float -> Graphics.Collage.Shape\n    oval = \\w h -> let n = 50\n                       t = (2 `Basics.*` Basics.pi) `Basics./` n\n                       hw = w `Basics./` 2\n                       hh = h `Basics./` 2\n                       f = \\i -> (hw `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  hh `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..n `Basics.-` 1]\n    circle : Float -> Graphics.Collage.Shape\n    circle = \\r -> oval (2 `Basics.*` r) (2 `Basics.*` r)\n    ngon : Int -> Float -> Graphics.Collage.Shape\n    ngon = \\n r -> let m = Basics.toFloat n\n                       t = (2 `Basics.*` Basics.pi) `Basics./` m\n                       f = \\i -> (r `Basics.*` (Basics.cos (t `Basics.*` i)),\n                                  r `Basics.*` (Basics.sin (t `Basics.*` i)))\n                   in List.map f [0..m `Basics.-` 1]\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Form"},[{"tag":"None","contents":{"doc":"{ theta = a, scale = b, x = c, y = d, alpha = e, form = f }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"{ theta = a, scale = b, x = c, y = d, alpha = e, form = f }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"{ theta = a, scale = b, x = c, y = d, alpha = e, form = f }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"{ theta = a, scale = b, x = c, y = d, alpha = e, form = f }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"{ theta = a, scale = b, x = c, y = d, alpha = e, form = f }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"None","contents":{"doc":"{ theta = a, scale = b, x = c, y = d, alpha = e, form = f }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"None","contents":{"doc":"{ theta = a, scale = b, x = c, y = d, alpha = e, form = f }"}},{"tag":"Record","contents":[["theta",[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]],["scale",[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]],["x",[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]],["y",[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]],["alpha",[{"tag":"None","contents":{"doc":"e"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]],["form",[{"tag":"None","contents":{"doc":"f"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"Form"},{"tag":"Record","contents":[[["theta",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["scale",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["x",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["y",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["form",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Collage"]},"name":"BasicForm"}}]],null]}]}]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Basics"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}],[["Color"],{"tag":"Open","contents":{"_explicits":[{"tag":"Alias","contents":"Color"},{"tag":"Value","contents":"black"},{"tag":"Alias","contents":"Gradient"}],"_open":false}}],[["Graphics","Element"],{"tag":"Open","contents":{"_explicits":[{"tag":"Alias","contents":"Element"}],"_open":false}}],[["List"],{"tag":"As","contents":"List"}],[["Native","Graphics","Collage"],{"tag":"As","contents":"Native.Graphics.Collage"}],[["Transform2D"],{"tag":"As","contents":"T"}],[["Transform2D"],{"tag":"Open","contents":{"_explicits":[{"tag":"Alias","contents":"Transform2D"}],"_open":false}}]],"names":["Graphics","Collage"],"exports":[{"tag":"Alias","contents":"Form"},{"tag":"Value","contents":"Form"},{"tag":"Union","contents":["FillStyle",{"_explicits":["Solid","Texture","Grad"],"_open":false}]},{"tag":"Union","contents":["LineCap",{"_explicits":["Flat","Round","Padded"],"_open":false}]},{"tag":"Union","contents":["LineJoin",{"_explicits":["Smooth","Sharp","Clipped"],"_open":false}]},{"tag":"Alias","contents":"LineStyle"},{"tag":"Value","contents":"LineStyle"},{"tag":"Value","contents":"defaultLine"},{"tag":"Value","contents":"solid"},{"tag":"Value","contents":"dashed"},{"tag":"Value","contents":"dotted"},{"tag":"Union","contents":["BasicForm",{"_explicits":["FPath","FShape","FImage","FElement","FGroup"],"_open":false}]},{"tag":"Union","contents":["ShapeStyle",{"_explicits":["Line","Fill"],"_open":false}]},{"tag":"Value","contents":"form"},{"tag":"Value","contents":"fill"},{"tag":"Value","contents":"filled"},{"tag":"Value","contents":"textured"},{"tag":"Value","contents":"gradient"},{"tag":"Value","contents":"outlined"},{"tag":"Value","contents":"traced"},{"tag":"Value","contents":"sprite"},{"tag":"Value","contents":"toForm"},{"tag":"Value","contents":"group"},{"tag":"Value","contents":"groupTransform"},{"tag":"Value","contents":"move"},{"tag":"Value","contents":"moveX"},{"tag":"Value","contents":"moveY"},{"tag":"Value","contents":"scale"},{"tag":"Value","contents":"rotate"},{"tag":"Value","contents":"alpha"},{"tag":"Value","contents":"collage"},{"tag":"Alias","contents":"Path"},{"tag":"Value","contents":"path"},{"tag":"Value","contents":"segment"},{"tag":"Alias","contents":"Shape"},{"tag":"Value","contents":"polygon"},{"tag":"Value","contents":"rect"},{"tag":"Value","contents":"square"},{"tag":"Value","contents":"oval"},{"tag":"Value","contents":"circle"},{"tag":"Value","contents":"ngon"}]}
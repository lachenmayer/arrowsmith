{"path":"","body":{"fixities":[],"aliases":{},"datatypes":{"Array":[["a"],[["Array",[]]]]},"types":{"length":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]},"set":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]},"empty":{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"initialize":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Var","contents":"a"}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]},"foldr":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Var","contents":"b"}]}]}]},"get":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Var","contents":"a"}]]}]}]},"toList":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]},"Array":{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},"fromList":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]},"map":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"b"}]]}]}]},"repeat":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]},"foldl":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Var","contents":"b"}]}]}]},"filter":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]},"slice":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]},"indexedMap":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"b"}]]}]}]},"append":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]},"push":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]},"toIndexedList":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Var","contents":"a"}]]}]]}]}},"program":[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"append"},[{"tag":"Span","contents":[{"line":180,"column":17},{"line":180,"column":29},{"doc":"Native.Array.append"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"append"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"length"},[{"tag":"Span","contents":[{"line":173,"column":17},{"line":173,"column":29},{"doc":"Native.Array.length"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"length"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"slice"},[{"tag":"Span","contents":[{"line":166,"column":16},{"line":166,"column":27},{"doc":"Native.Array.slice"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"slice"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"set"},[{"tag":"Span","contents":[{"line":146,"column":14},{"line":146,"column":23},{"doc":"Native.Array.set"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"set"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"get"},[{"tag":"Span","contents":[{"line":135,"column":5},{"line":137,"column":19},{"doc":"if | (0 <= i) && (i < (Native.Array.length array)) ->\n       Just (Native.Array.get i array)\n   | True -> Nothing"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"i"},[{"tag":"Span","contents":[{"line":135,"column":5},{"line":137,"column":19},{"doc":"if | (0 <= i) && (i < (Native.Array.length array)) ->\n       Just (Native.Array.get i array)\n   | True -> Nothing"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"array"},[{"tag":"Span","contents":[{"line":135,"column":5},{"line":137,"column":19},{"doc":"if | (0 <= i) && (i < (Native.Array.length array)) ->\n       Just (Native.Array.get i array)\n   | True -> Nothing"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":135,"column":8},{"line":135,"column":47},{"doc":"(0 <= i) && (i < (Native.Array.length array))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"&&"},[{"tag":"Span","contents":[{"line":135,"column":8},{"line":135,"column":14},{"doc":"0 <= i"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<="},[{"tag":"Span","contents":[{"line":135,"column":8},{"line":135,"column":9},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":135,"column":13},{"line":135,"column":14},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}]]}],[{"tag":"Span","contents":[{"line":135,"column":18},{"line":135,"column":47},{"doc":"i < (Native.Array.length array)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":135,"column":18},{"line":135,"column":19},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}],[{"tag":"Span","contents":[{"line":135,"column":29},{"line":135,"column":47},{"doc":"Native.Array.length array"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":135,"column":29},{"line":135,"column":41},{"doc":"Native.Array.length"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"length"}}],[{"tag":"Span","contents":[{"line":135,"column":42},{"line":135,"column":47},{"doc":"array"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"array"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":136,"column":12},{"line":136,"column":42},{"doc":"Just (Native.Array.get i array)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":12},{"line":136,"column":16},{"doc":"Just"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Just"}}],[{"tag":"Span","contents":[{"line":136,"column":25},{"line":136,"column":42},{"doc":"Native.Array.get i array"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":25},{"line":136,"column":36},{"doc":"Native.Array.get i"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":25},{"line":136,"column":34},{"doc":"Native.Array.get"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"get"}}],[{"tag":"Span","contents":[{"line":136,"column":35},{"line":136,"column":36},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}]]}],[{"tag":"Span","contents":[{"line":136,"column":37},{"line":136,"column":42},{"doc":"array"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"array"}}]]}]]}]],[[{"tag":"Span","contents":[{"line":137,"column":12},{"line":137,"column":19},{"doc":"Nothing"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":137,"column":12},{"line":137,"column":19},{"doc":"Nothing"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Nothing"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Var","contents":"a"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"push"},[{"tag":"Span","contents":[{"line":121,"column":15},{"line":121,"column":25},{"doc":"Native.Array.push"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"push"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"empty"},[{"tag":"Span","contents":[{"line":114,"column":16},{"line":114,"column":27},{"doc":"Native.Array.empty"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"empty"}}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"filter"},[{"tag":"Span","contents":[{"line":105,"column":5},{"line":107,"column":57},{"doc":"let update = \\x xs -> if | isOkay x -> Native.Array.push x xs\n                         | True -> xs\nin Native.Array.foldl update Native.Array.empty arr"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"isOkay"},[{"tag":"Span","contents":[{"line":105,"column":5},{"line":107,"column":57},{"doc":"let update = \\x xs -> if | isOkay x -> Native.Array.push x xs\n                         | True -> xs\nin Native.Array.foldl update Native.Array.empty arr"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"arr"},[{"tag":"Span","contents":[{"line":105,"column":5},{"line":107,"column":57},{"doc":"let update = \\x xs -> if | isOkay x -> Native.Array.push x xs\n                         | True -> xs\nin Native.Array.foldl update Native.Array.empty arr"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"update"},[{"tag":"Span","contents":[{"line":105,"column":23},{"line":105,"column":70},{"doc":"if | isOkay x -> Native.Array.push x xs\n   | True -> xs"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":105,"column":23},{"line":105,"column":70},{"doc":"if | isOkay x -> Native.Array.push x xs\n   | True -> xs"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"xs"},[{"tag":"Span","contents":[{"line":105,"column":23},{"line":105,"column":70},{"doc":"if | isOkay x -> Native.Array.push x xs\n   | True -> xs"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":105,"column":26},{"line":105,"column":34},{"doc":"isOkay x"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":105,"column":26},{"line":105,"column":32},{"doc":"isOkay"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"isOkay"}}],[{"tag":"Span","contents":[{"line":105,"column":33},{"line":105,"column":34},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}],[{"tag":"Span","contents":[{"line":105,"column":47},{"line":105,"column":62},{"doc":"Native.Array.push x xs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":105,"column":47},{"line":105,"column":59},{"doc":"Native.Array.push x"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":105,"column":47},{"line":105,"column":57},{"doc":"Native.Array.push"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"push"}}],[{"tag":"Span","contents":[{"line":105,"column":58},{"line":105,"column":59},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}],[{"tag":"Span","contents":[{"line":105,"column":60},{"line":105,"column":62},{"doc":"xs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"xs"}}]]}]],[[{"tag":"Span","contents":[{"line":105,"column":68},{"line":105,"column":70},{"doc":"xs"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":105,"column":68},{"line":105,"column":70},{"doc":"xs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"xs"}}]]]}]]}]]}],null]],[{"tag":"Span","contents":[{"line":107,"column":16},{"line":107,"column":57},{"doc":"Native.Array.foldl update Native.Array.empty arr"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":107,"column":16},{"line":107,"column":53},{"doc":"Native.Array.foldl update Native.Array.empty"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":107,"column":16},{"line":107,"column":34},{"doc":"Native.Array.foldl update"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":107,"column":16},{"line":107,"column":27},{"doc":"Native.Array.foldl"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"foldl"}}],[{"tag":"Span","contents":[{"line":107,"column":28},{"line":107,"column":34},{"doc":"update"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"update"}}]]}],[{"tag":"Span","contents":[{"line":107,"column":42},{"line":107,"column":53},{"doc":"Native.Array.empty"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"empty"}}]]}],[{"tag":"Span","contents":[{"line":107,"column":54},{"line":107,"column":57},{"doc":"arr"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"arr"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"foldr"},[{"tag":"Span","contents":[{"line":97,"column":16},{"line":97,"column":27},{"doc":"Native.Array.foldr"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"foldr"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Var","contents":"b"}]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"foldl"},[{"tag":"Span","contents":[{"line":90,"column":16},{"line":90,"column":27},{"doc":"Native.Array.foldl"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"foldl"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Var","contents":"b"}]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"indexedMap"},[{"tag":"Span","contents":[{"line":83,"column":21},{"line":83,"column":37},{"doc":"Native.Array.indexedMap"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"indexedMap"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"b"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"map"},[{"tag":"Span","contents":[{"line":76,"column":14},{"line":76,"column":23},{"doc":"Native.Array.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"map"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"b"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toIndexedList"},[{"tag":"Span","contents":[{"line":69,"column":5},{"line":69,"column":84},{"doc":"List.map2\n  (\\v0 v1 -> (v0,v1))\n  [0..(Native.Array.length array) - 1]\n  (Native.Array.toList array)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"array"},[{"tag":"Span","contents":[{"line":69,"column":5},{"line":69,"column":84},{"doc":"List.map2\n  (\\v0 v1 -> (v0,v1))\n  [0..(Native.Array.length array) - 1]\n  (Native.Array.toList array)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":69,"column":5},{"line":69,"column":57},{"doc":"List.map2 (\\v0 v1 -> (v0,v1)) [0..(Native.Array.length array) - 1]"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":69,"column":5},{"line":69,"column":17},{"doc":"List.map2 (\\v0 v1 -> (v0,v1))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":69,"column":5},{"line":69,"column":14},{"doc":"List.map2"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"map2"}}],[{"tag":"Span","contents":[{"line":69,"column":16},{"line":69,"column":17},{"doc":"\\v0 v1 -> (v0,v1)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"v0"},[{"tag":"Span","contents":[{"line":69,"column":16},{"line":69,"column":17},{"doc":"\\v1 -> (v0,v1)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"v1"},[{"tag":"Span","contents":[{"line":69,"column":16},{"line":69,"column":17},{"doc":"(v0,v1)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":69,"column":16},{"line":69,"column":17},{"doc":"v0"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"v0"}}],[{"tag":"Span","contents":[{"line":69,"column":16},{"line":69,"column":17},{"doc":"v1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"v1"}}]]]}]]}]]}]]}],[{"tag":"Span","contents":[{"line":69,"column":19},{"line":69,"column":57},{"doc":"[0..(Native.Array.length array) - 1]"}]},{"tag":"Range","contents":[[{"tag":"Span","contents":[{"line":69,"column":21},{"line":69,"column":22},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":69,"column":33},{"line":69,"column":55},{"doc":"(Native.Array.length array) - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":69,"column":33},{"line":69,"column":51},{"doc":"Native.Array.length array"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":69,"column":33},{"line":69,"column":45},{"doc":"Native.Array.length"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"length"}}],[{"tag":"Span","contents":[{"line":69,"column":46},{"line":69,"column":51},{"doc":"array"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"array"}}]]}],[{"tag":"Span","contents":[{"line":69,"column":54},{"line":69,"column":55},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":69,"column":66},{"line":69,"column":84},{"doc":"Native.Array.toList array"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":69,"column":66},{"line":69,"column":78},{"doc":"Native.Array.toList"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"toList"}}],[{"tag":"Span","contents":[{"line":69,"column":79},{"line":69,"column":84},{"doc":"array"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"array"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Var","contents":"a"}]]}]]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toList"},[{"tag":"Span","contents":[{"line":59,"column":17},{"line":59,"column":29},{"doc":"Native.Array.toList"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"toList"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fromList"},[{"tag":"Span","contents":[{"line":52,"column":19},{"line":52,"column":33},{"doc":"Native.Array.fromList"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"fromList"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"initialize"},[{"tag":"Span","contents":[{"line":38,"column":21},{"line":38,"column":37},{"doc":"Native.Array.initialize"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Array"]},"name":"initialize"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Var","contents":"a"}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"repeat"},[{"tag":"Span","contents":[{"line":48,"column":14},{"line":48,"column":36},{"doc":"initialize n (always e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":48,"column":14},{"line":48,"column":36},{"doc":"initialize n (always e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":48,"column":14},{"line":48,"column":36},{"doc":"initialize n (always e)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":48,"column":14},{"line":48,"column":26},{"doc":"initialize n"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":48,"column":14},{"line":48,"column":24},{"doc":"initialize"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"initialize"}}],[{"tag":"Span","contents":[{"line":48,"column":25},{"line":48,"column":26},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}],[{"tag":"Span","contents":[{"line":48,"column":28},{"line":48,"column":36},{"doc":"always e"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":48,"column":28},{"line":48,"column":34},{"doc":"always"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"always"}}],[{"tag":"Span","contents":[{"line":48,"column":35},{"line":48,"column":36},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Array : Array.Array a\n    Array = Array\n    initialize : Int -> (Int -> a) -> Array.Array a\n    initialize = Native.Array.initialize\n    repeat : Int -> a -> Array.Array a\n    repeat = \\n e -> initialize n (Basics.always e)\n    fromList : List a -> Array.Array a\n    fromList = Native.Array.fromList\n    toList : Array.Array a -> List a\n    toList = Native.Array.toList\n    toIndexedList : Array.Array a -> List (Int, a)\n    toIndexedList = \\array -> List.map2\n                                (\\v0 v1 -> (v0,v1))\n                                [0..(Native.Array.length array) `Basics.-` 1]\n                                (Native.Array.toList array)\n    map : (a -> b) -> Array.Array a -> Array.Array b\n    map = Native.Array.map\n    indexedMap : (Int -> a -> b) -> Array.Array a -> Array.Array b\n    indexedMap = Native.Array.indexedMap\n    foldl : (a -> b -> b) -> b -> Array.Array a -> b\n    foldl = Native.Array.foldl\n    foldr : (a -> b -> b) -> b -> Array.Array a -> b\n    foldr = Native.Array.foldr\n    filter : (a -> Bool) -> Array.Array a -> Array.Array a\n    filter = \\isOkay arr -> let update = \\x xs -> if | isOkay x ->\n                                                         Native.Array.push x xs\n                                                     | True -> xs\n                            in Native.Array.foldl update Native.Array.empty arr\n    empty : Array.Array a\n    empty = Native.Array.empty\n    push : a -> Array.Array a -> Array.Array a\n    push = Native.Array.push\n    get : Int -> Array.Array a -> Maybe.Maybe a\n    get = \\i array -> if | (0 `Basics.<=` i)\n                             `Basics.&&` (i `Basics.<` (Native.Array.length array)) ->\n                             Maybe.Just (Native.Array.get i array)\n                         | True -> Maybe.Nothing\n    set : Int -> a -> Array.Array a -> Array.Array a\n    set = Native.Array.set\n    slice : Int -> Int -> Array.Array a -> Array.Array a\n    slice = Native.Array.slice\n    length : Array.Array a -> Int\n    length = Native.Array.length\n    append : Array.Array a -> Array.Array a -> Array.Array a\n    append = Native.Array.append\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Array"},[{"tag":"None","contents":{"doc":"Array"}},{"tag":"Data","contents":["Array",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Array"]},"name":"Array"}},[{"tag":"Var","contents":"a"}]]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Basics"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}],[["List"],{"tag":"As","contents":"List"}],[["Maybe"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}],[["Native","Array"],{"tag":"As","contents":"Native.Array"}]],"names":["Array"],"exports":[{"tag":"Union","contents":["Array",{"_explicits":["Array"],"_open":false}]},{"tag":"Value","contents":"initialize"},{"tag":"Value","contents":"repeat"},{"tag":"Value","contents":"fromList"},{"tag":"Value","contents":"toList"},{"tag":"Value","contents":"toIndexedList"},{"tag":"Value","contents":"map"},{"tag":"Value","contents":"indexedMap"},{"tag":"Value","contents":"foldl"},{"tag":"Value","contents":"foldr"},{"tag":"Value","contents":"filter"},{"tag":"Value","contents":"empty"},{"tag":"Value","contents":"push"},{"tag":"Value","contents":"get"},{"tag":"Value","contents":"set"},{"tag":"Value","contents":"slice"},{"tag":"Value","contents":"length"},{"tag":"Value","contents":"append"}]}
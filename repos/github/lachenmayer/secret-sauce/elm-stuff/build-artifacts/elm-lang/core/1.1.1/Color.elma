{"path":"","body":{"fixities":[],"aliases":{},"datatypes":{"Color":[[],[["RGBA",[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]],["HSLA",[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]]],"Gradient":[[],[["Linear",[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]}]],["Radial",[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]}]]]]},"types":{"toRgb":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Record","contents":[[["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["blue",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["green",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["red",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],null]}]},"toHsl":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Record","contents":[[["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["hue",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["lightness",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["saturation",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]],null]}]},"white":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"darkRed":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"darkBlue":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"lightRed":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"gray":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"lightBlue":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"red":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"lightGray":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"Radial":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}}]}]}]}]}]},"radial":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}}]}]}]}]}]},"rgbToHsl":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple3"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]}]},"hslToRgb":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple3"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]}]},"purple":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"lightOrange":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"brown":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"darkGray":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"greyscale":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]},"darkOrange":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"yellow":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"darkGreen":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"hsl":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]},"lightCharcoal":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"black":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"rgb":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]},"lightGrey":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"complement":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]},"lightYellow":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"darkPurple":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"darkBrown":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"darkGrey":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"linear":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}}]}]}]},"darkCharcoal":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"grayscale":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]},"lightGreen":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"Linear":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}}]}]}]},"darkYellow":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"lightPurple":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"orange":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"fmod":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]},"lightBrown":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"green":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"hsla":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]}]},"blue":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"HSLA":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]}]},"rgba":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]}]},"RGBA":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]}]},"grey":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},"charcoal":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}},"program":[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Radial"},[{"tag":"None","contents":{"doc":"Radial a b c d e"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Radial a b c d e"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"Radial a b c d e"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"Radial a b c d e"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"Radial a b c d e"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"None","contents":{"doc":"Radial a b c d e"}},{"tag":"Data","contents":["Radial",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}],[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}],[{"tag":"None","contents":{"doc":"e"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}},[]]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"radial"},[{"tag":"Span","contents":[{"line":195,"column":10},{"line":195,"column":16},{"doc":"Radial"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Radial"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"number"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Linear"},[{"tag":"None","contents":{"doc":"Linear a b c"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Linear a b c"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"Linear a b c"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"Linear a b c"}},{"tag":"Data","contents":["Linear",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}},[]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"linear"},[{"tag":"Span","contents":[{"line":187,"column":10},{"line":187,"column":16},{"doc":"Linear"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Linear"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"number"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Gradient"}}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fmod"},[{"tag":"Span","contents":[{"line":127,"column":3},{"line":128,"column":50},{"doc":"let integer = floor f\nin ((toFloat (integer % n)) + f) - (toFloat integer)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":127,"column":3},{"line":128,"column":50},{"doc":"let integer = floor f\nin ((toFloat (integer % n)) + f) - (toFloat integer)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":127,"column":3},{"line":128,"column":50},{"doc":"let integer = floor f\nin ((toFloat (integer % n)) + f) - (toFloat integer)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"integer"},[{"tag":"Span","contents":[{"line":127,"column":17},{"line":127,"column":24},{"doc":"floor f"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":127,"column":17},{"line":127,"column":22},{"doc":"floor"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"floor"}}],[{"tag":"Span","contents":[{"line":127,"column":23},{"line":127,"column":24},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]}],null]],[{"tag":"Span","contents":[{"line":128,"column":7},{"line":128,"column":50},{"doc":"((toFloat (integer % n)) + f) - (toFloat integer)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":128,"column":7},{"line":128,"column":32},{"doc":"(toFloat (integer % n)) + f"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":128,"column":7},{"line":128,"column":27},{"doc":"toFloat (integer % n)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":128,"column":7},{"line":128,"column":14},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":128,"column":16},{"line":128,"column":27},{"doc":"integer % n"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"%"},[{"tag":"Span","contents":[{"line":128,"column":16},{"line":128,"column":23},{"doc":"integer"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"integer"}}],[{"tag":"Span","contents":[{"line":128,"column":26},{"line":128,"column":27},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}]]}],[{"tag":"Span","contents":[{"line":128,"column":31},{"line":128,"column":32},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]}],[{"tag":"Span","contents":[{"line":128,"column":35},{"line":128,"column":50},{"doc":"toFloat integer"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":128,"column":35},{"line":128,"column":42},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":128,"column":43},{"line":128,"column":50},{"doc":"integer"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"integer"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"rgbToHsl"},[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"red"},[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"green"},[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"blue"},[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":134,"column":11},{"line":134,"column":30},{"doc":"(toFloat blue) / 255"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":134,"column":11},{"line":134,"column":23},{"doc":"toFloat blue"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":134,"column":11},{"line":134,"column":18},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":134,"column":19},{"line":134,"column":23},{"doc":"blue"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"blue"}}]]}],[{"tag":"Span","contents":[{"line":134,"column":27},{"line":134,"column":30},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}]]}],null]],[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"g"},[{"tag":"Span","contents":[{"line":133,"column":11},{"line":133,"column":30},{"doc":"(toFloat green) / 255"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":133,"column":11},{"line":133,"column":24},{"doc":"toFloat green"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":133,"column":11},{"line":133,"column":18},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":133,"column":19},{"line":133,"column":24},{"doc":"green"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"green"}}]]}],[{"tag":"Span","contents":[{"line":133,"column":27},{"line":133,"column":30},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}]]}],null]],[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"r"},[{"tag":"Span","contents":[{"line":132,"column":11},{"line":132,"column":30},{"doc":"(toFloat red) / 255"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":132,"column":11},{"line":132,"column":22},{"doc":"toFloat red"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":132,"column":11},{"line":132,"column":18},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":132,"column":19},{"line":132,"column":22},{"doc":"red"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"red"}}]]}],[{"tag":"Span","contents":[{"line":132,"column":27},{"line":132,"column":30},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}]]}],null]],[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"cMax"},[{"tag":"Span","contents":[{"line":136,"column":14},{"line":136,"column":29},{"doc":"max (max r g) b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":14},{"line":136,"column":26},{"doc":"max (max r g)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":14},{"line":136,"column":17},{"doc":"max"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"max"}}],[{"tag":"Span","contents":[{"line":136,"column":19},{"line":136,"column":26},{"doc":"max r g"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":19},{"line":136,"column":24},{"doc":"max r"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":19},{"line":136,"column":22},{"doc":"max"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"max"}}],[{"tag":"Span","contents":[{"line":136,"column":23},{"line":136,"column":24},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}],[{"tag":"Span","contents":[{"line":136,"column":25},{"line":136,"column":26},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]]}]]}],[{"tag":"Span","contents":[{"line":136,"column":28},{"line":136,"column":29},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],null]],[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"cMin"},[{"tag":"Span","contents":[{"line":137,"column":14},{"line":137,"column":29},{"doc":"min (min r g) b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":137,"column":14},{"line":137,"column":26},{"doc":"min (min r g)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":137,"column":14},{"line":137,"column":17},{"doc":"min"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"min"}}],[{"tag":"Span","contents":[{"line":137,"column":19},{"line":137,"column":26},{"doc":"min r g"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":137,"column":19},{"line":137,"column":24},{"doc":"min r"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":137,"column":19},{"line":137,"column":22},{"doc":"min"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"min"}}],[{"tag":"Span","contents":[{"line":137,"column":23},{"line":137,"column":24},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}],[{"tag":"Span","contents":[{"line":137,"column":25},{"line":137,"column":26},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]]}]]}],[{"tag":"Span","contents":[{"line":137,"column":28},{"line":137,"column":29},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],null]],[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"c"},[{"tag":"Span","contents":[{"line":139,"column":11},{"line":139,"column":22},{"doc":"cMax - cMin"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":139,"column":11},{"line":139,"column":15},{"doc":"cMax"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"cMax"}}],[{"tag":"Span","contents":[{"line":139,"column":18},{"line":139,"column":22},{"doc":"cMin"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"cMin"}}]]}],null]],[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightness"},[{"tag":"Span","contents":[{"line":145,"column":20},{"line":145,"column":36},{"doc":"(cMax + cMin) / 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":145,"column":20},{"line":145,"column":31},{"doc":"cMax + cMin"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":145,"column":20},{"line":145,"column":24},{"doc":"cMax"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"cMax"}}],[{"tag":"Span","contents":[{"line":145,"column":27},{"line":145,"column":31},{"doc":"cMin"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"cMin"}}]]}],[{"tag":"Span","contents":[{"line":145,"column":35},{"line":145,"column":36},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],null]],[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"saturation"},[{"tag":"Span","contents":[{"line":148,"column":11},{"line":150,"column":51},{"doc":"if | lightness == 0 -> 0\n   | True -> c / (1 - (abs ((2 * lightness) - 1)))"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":148,"column":14},{"line":148,"column":28},{"doc":"lightness == 0"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"=="},[{"tag":"Span","contents":[{"line":148,"column":14},{"line":148,"column":23},{"doc":"lightness"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lightness"}}],[{"tag":"Span","contents":[{"line":148,"column":27},{"line":148,"column":28},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":149,"column":18},{"line":149,"column":19},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]],[[{"tag":"Span","contents":[{"line":150,"column":18},{"line":150,"column":49},{"doc":"c / (1 - (abs ((2 * lightness) - 1)))"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":150,"column":18},{"line":150,"column":49},{"doc":"c / (1 - (abs ((2 * lightness) - 1)))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":150,"column":18},{"line":150,"column":19},{"doc":"c"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}],[{"tag":"Span","contents":[{"line":150,"column":23},{"line":150,"column":49},{"doc":"1 - (abs ((2 * lightness) - 1))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":150,"column":23},{"line":150,"column":24},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}],[{"tag":"Span","contents":[{"line":150,"column":27},{"line":150,"column":49},{"doc":"abs ((2 * lightness) - 1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":150,"column":27},{"line":150,"column":30},{"doc":"abs"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"abs"}}],[{"tag":"Span","contents":[{"line":150,"column":32},{"line":150,"column":49},{"doc":"(2 * lightness) - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":150,"column":32},{"line":150,"column":45},{"doc":"2 * lightness"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":150,"column":32},{"line":150,"column":33},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}],[{"tag":"Span","contents":[{"line":150,"column":36},{"line":150,"column":45},{"doc":"lightness"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lightness"}}]]}],[{"tag":"Span","contents":[{"line":150,"column":48},{"line":150,"column":49},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}]]}]]]}],null]],[{"tag":"Span","contents":[{"line":132,"column":3},{"line":152,"column":35},{"doc":"let r = (toFloat red) / 255\n    g = (toFloat green) / 255\n    b = (toFloat blue) / 255\n    cMax = max (max r g) b\n    cMin = min (min r g) b\n    c = cMax - cMin\n    hue = (degrees 60)\n            * (if | cMax == r -> ((g - b) / c) `fmod` 6\n                  | cMax == g -> ((b - r) / c) + 2\n                  | cMax == b -> ((r - g) / c) + 4)\n    lightness = (cMax + cMin) / 2\n    saturation = if | lightness == 0 -> 0\n                    | True -> c / (1 - (abs ((2 * lightness) - 1)))\nin (hue,saturation,lightness)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hue"},[{"tag":"Span","contents":[{"line":141,"column":13},{"line":143,"column":61},{"doc":"(degrees 60)\n  * (if | cMax == r -> ((g - b) / c) `fmod` 6\n        | cMax == g -> ((b - r) / c) + 2\n        | cMax == b -> ((r - g) / c) + 4)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":141,"column":13},{"line":141,"column":23},{"doc":"degrees 60"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":141,"column":13},{"line":141,"column":20},{"doc":"degrees"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"degrees"}}],[{"tag":"Span","contents":[{"line":141,"column":21},{"line":141,"column":23},{"doc":"60"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":60}}]]}],[{"tag":"Span","contents":[{"line":141,"column":26},{"line":143,"column":61},{"doc":"if | cMax == r -> ((g - b) / c) `fmod` 6\n   | cMax == g -> ((b - r) / c) + 2\n   | cMax == b -> ((r - g) / c) + 4"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":141,"column":31},{"line":141,"column":40},{"doc":"cMax == r"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"=="},[{"tag":"Span","contents":[{"line":141,"column":31},{"line":141,"column":35},{"doc":"cMax"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"cMax"}}],[{"tag":"Span","contents":[{"line":141,"column":39},{"line":141,"column":40},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}],[{"tag":"Span","contents":[{"line":141,"column":46},{"line":141,"column":66},{"doc":"((g - b) / c) `fmod` 6"}]},{"tag":"Binop","contents":[{"home":{"tag":"Local","contents":[]},"name":"fmod"},[{"tag":"Span","contents":[{"line":141,"column":46},{"line":141,"column":56},{"doc":"(g - b) / c"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":141,"column":46},{"line":141,"column":51},{"doc":"g - b"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":141,"column":46},{"line":141,"column":47},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}],[{"tag":"Span","contents":[{"line":141,"column":50},{"line":141,"column":51},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":141,"column":55},{"line":141,"column":56},{"doc":"c"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]]}],[{"tag":"Span","contents":[{"line":141,"column":65},{"line":141,"column":66},{"doc":"6"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":6}}]]}]],[[{"tag":"Span","contents":[{"line":142,"column":31},{"line":142,"column":40},{"doc":"cMax == g"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"=="},[{"tag":"Span","contents":[{"line":142,"column":31},{"line":142,"column":35},{"doc":"cMax"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"cMax"}}],[{"tag":"Span","contents":[{"line":142,"column":39},{"line":142,"column":40},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]]}],[{"tag":"Span","contents":[{"line":142,"column":46},{"line":142,"column":61},{"doc":"((b - r) / c) + 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":142,"column":46},{"line":142,"column":56},{"doc":"(b - r) / c"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":142,"column":46},{"line":142,"column":51},{"doc":"b - r"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":142,"column":46},{"line":142,"column":47},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"Span","contents":[{"line":142,"column":50},{"line":142,"column":51},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}],[{"tag":"Span","contents":[{"line":142,"column":55},{"line":142,"column":56},{"doc":"c"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]]}],[{"tag":"Span","contents":[{"line":142,"column":60},{"line":142,"column":61},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}]],[[{"tag":"Span","contents":[{"line":143,"column":31},{"line":143,"column":40},{"doc":"cMax == b"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"=="},[{"tag":"Span","contents":[{"line":143,"column":31},{"line":143,"column":35},{"doc":"cMax"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"cMax"}}],[{"tag":"Span","contents":[{"line":143,"column":39},{"line":143,"column":40},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":143,"column":46},{"line":143,"column":61},{"doc":"((r - g) / c) + 4"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":143,"column":46},{"line":143,"column":56},{"doc":"(r - g) / c"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":143,"column":46},{"line":143,"column":51},{"doc":"r - g"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":143,"column":46},{"line":143,"column":47},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}],[{"tag":"Span","contents":[{"line":143,"column":50},{"line":143,"column":51},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]]}],[{"tag":"Span","contents":[{"line":143,"column":55},{"line":143,"column":56},{"doc":"c"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]]}],[{"tag":"Span","contents":[{"line":143,"column":60},{"line":143,"column":61},{"doc":"4"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":4}}]]}]]]}]]}],null]],[{"tag":"Span","contents":[{"line":152,"column":8},{"line":152,"column":34},{"doc":"(hue,saturation,lightness)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":152,"column":8},{"line":152,"column":11},{"doc":"hue"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue"}}],[{"tag":"Span","contents":[{"line":152,"column":13},{"line":152,"column":23},{"doc":"saturation"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"saturation"}}],[{"tag":"Span","contents":[{"line":152,"column":25},{"line":152,"column":34},{"doc":"lightness"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lightness"}}]]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple3"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hslToRgb"},[{"tag":"Span","contents":[{"line":156,"column":3},{"line":172,"column":28},{"doc":"let chroma = (1 - (abs ((2 * lightness) - 1))) * saturation\n    hue' = hue / (degrees 60)\n    x = chroma * (1 - (abs ((fmod hue' 2) - 1)))\n    (r,g,b) = if | hue' < 0 -> (0,0,0)\n                 | hue' < 1 -> (chroma,x,0)\n                 | hue' < 2 -> (x,chroma,0)\n                 | hue' < 3 -> (0,chroma,x)\n                 | hue' < 4 -> (0,x,chroma)\n                 | hue' < 5 -> (x,0,chroma)\n                 | hue' < 6 -> (chroma,0,x)\n                 | otherwise -> (0,0,0)\n    m = lightness - (chroma / 2)\nin (r + m,g + m,b + m)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"hue"},[{"tag":"Span","contents":[{"line":156,"column":3},{"line":172,"column":28},{"doc":"let chroma = (1 - (abs ((2 * lightness) - 1))) * saturation\n    hue' = hue / (degrees 60)\n    x = chroma * (1 - (abs ((fmod hue' 2) - 1)))\n    (r,g,b) = if | hue' < 0 -> (0,0,0)\n                 | hue' < 1 -> (chroma,x,0)\n                 | hue' < 2 -> (x,chroma,0)\n                 | hue' < 3 -> (0,chroma,x)\n                 | hue' < 4 -> (0,x,chroma)\n                 | hue' < 5 -> (x,0,chroma)\n                 | hue' < 6 -> (chroma,0,x)\n                 | otherwise -> (0,0,0)\n    m = lightness - (chroma / 2)\nin (r + m,g + m,b + m)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"saturation"},[{"tag":"Span","contents":[{"line":156,"column":3},{"line":172,"column":28},{"doc":"let chroma = (1 - (abs ((2 * lightness) - 1))) * saturation\n    hue' = hue / (degrees 60)\n    x = chroma * (1 - (abs ((fmod hue' 2) - 1)))\n    (r,g,b) = if | hue' < 0 -> (0,0,0)\n                 | hue' < 1 -> (chroma,x,0)\n                 | hue' < 2 -> (x,chroma,0)\n                 | hue' < 3 -> (0,chroma,x)\n                 | hue' < 4 -> (0,x,chroma)\n                 | hue' < 5 -> (x,0,chroma)\n                 | hue' < 6 -> (chroma,0,x)\n                 | otherwise -> (0,0,0)\n    m = lightness - (chroma / 2)\nin (r + m,g + m,b + m)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"lightness"},[{"tag":"Span","contents":[{"line":156,"column":3},{"line":172,"column":28},{"doc":"let chroma = (1 - (abs ((2 * lightness) - 1))) * saturation\n    hue' = hue / (degrees 60)\n    x = chroma * (1 - (abs ((fmod hue' 2) - 1)))\n    (r,g,b) = if | hue' < 0 -> (0,0,0)\n                 | hue' < 1 -> (chroma,x,0)\n                 | hue' < 2 -> (x,chroma,0)\n                 | hue' < 3 -> (0,chroma,x)\n                 | hue' < 4 -> (0,x,chroma)\n                 | hue' < 5 -> (x,0,chroma)\n                 | hue' < 6 -> (chroma,0,x)\n                 | otherwise -> (0,0,0)\n    m = lightness - (chroma / 2)\nin (r + m,g + m,b + m)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hue'"},[{"tag":"Span","contents":[{"line":157,"column":14},{"line":157,"column":30},{"doc":"hue / (degrees 60)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":157,"column":14},{"line":157,"column":17},{"doc":"hue"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue"}}],[{"tag":"Span","contents":[{"line":157,"column":20},{"line":157,"column":30},{"doc":"degrees 60"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":157,"column":20},{"line":157,"column":27},{"doc":"degrees"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"degrees"}}],[{"tag":"Span","contents":[{"line":157,"column":28},{"line":157,"column":30},{"doc":"60"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":60}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":156,"column":3},{"line":172,"column":28},{"doc":"let chroma = (1 - (abs ((2 * lightness) - 1))) * saturation\n    hue' = hue / (degrees 60)\n    x = chroma * (1 - (abs ((fmod hue' 2) - 1)))\n    (r,g,b) = if | hue' < 0 -> (0,0,0)\n                 | hue' < 1 -> (chroma,x,0)\n                 | hue' < 2 -> (x,chroma,0)\n                 | hue' < 3 -> (0,chroma,x)\n                 | hue' < 4 -> (0,x,chroma)\n                 | hue' < 5 -> (x,0,chroma)\n                 | hue' < 6 -> (chroma,0,x)\n                 | otherwise -> (0,0,0)\n    m = lightness - (chroma / 2)\nin (r + m,g + m,b + m)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"chroma"},[{"tag":"Span","contents":[{"line":156,"column":17},{"line":156,"column":58},{"doc":"(1 - (abs ((2 * lightness) - 1))) * saturation"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":156,"column":17},{"line":156,"column":43},{"doc":"1 - (abs ((2 * lightness) - 1))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":156,"column":17},{"line":156,"column":18},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}],[{"tag":"Span","contents":[{"line":156,"column":21},{"line":156,"column":43},{"doc":"abs ((2 * lightness) - 1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":156,"column":21},{"line":156,"column":24},{"doc":"abs"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"abs"}}],[{"tag":"Span","contents":[{"line":156,"column":26},{"line":156,"column":43},{"doc":"(2 * lightness) - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":156,"column":26},{"line":156,"column":39},{"doc":"2 * lightness"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":156,"column":26},{"line":156,"column":27},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}],[{"tag":"Span","contents":[{"line":156,"column":30},{"line":156,"column":39},{"doc":"lightness"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lightness"}}]]}],[{"tag":"Span","contents":[{"line":156,"column":42},{"line":156,"column":43},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":156,"column":48},{"line":156,"column":58},{"doc":"saturation"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"saturation"}}]]}],null]],[{"tag":"Span","contents":[{"line":156,"column":3},{"line":172,"column":28},{"doc":"let chroma = (1 - (abs ((2 * lightness) - 1))) * saturation\n    hue' = hue / (degrees 60)\n    x = chroma * (1 - (abs ((fmod hue' 2) - 1)))\n    (r,g,b) = if | hue' < 0 -> (0,0,0)\n                 | hue' < 1 -> (chroma,x,0)\n                 | hue' < 2 -> (x,chroma,0)\n                 | hue' < 3 -> (0,chroma,x)\n                 | hue' < 4 -> (0,x,chroma)\n                 | hue' < 5 -> (x,0,chroma)\n                 | hue' < 6 -> (chroma,0,x)\n                 | otherwise -> (0,0,0)\n    m = lightness - (chroma / 2)\nin (r + m,g + m,b + m)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":159,"column":11},{"line":159,"column":45},{"doc":"chroma * (1 - (abs ((fmod hue' 2) - 1)))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":159,"column":11},{"line":159,"column":17},{"doc":"chroma"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"chroma"}}],[{"tag":"Span","contents":[{"line":159,"column":21},{"line":159,"column":45},{"doc":"1 - (abs ((fmod hue' 2) - 1))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":159,"column":21},{"line":159,"column":22},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}],[{"tag":"Span","contents":[{"line":159,"column":25},{"line":159,"column":45},{"doc":"abs ((fmod hue' 2) - 1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":159,"column":25},{"line":159,"column":28},{"doc":"abs"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"abs"}}],[{"tag":"Span","contents":[{"line":159,"column":30},{"line":159,"column":45},{"doc":"(fmod hue' 2) - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":159,"column":30},{"line":159,"column":41},{"doc":"fmod hue' 2"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":159,"column":30},{"line":159,"column":39},{"doc":"fmod hue'"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":159,"column":30},{"line":159,"column":34},{"doc":"fmod"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fmod"}}],[{"tag":"Span","contents":[{"line":159,"column":35},{"line":159,"column":39},{"doc":"hue'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue'"}}]]}],[{"tag":"Span","contents":[{"line":159,"column":40},{"line":159,"column":41},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],[{"tag":"Span","contents":[{"line":159,"column":44},{"line":159,"column":45},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}]]}],null]],[{"tag":"Span","contents":[{"line":156,"column":3},{"line":172,"column":28},{"doc":"let chroma = (1 - (abs ((2 * lightness) - 1))) * saturation\n    hue' = hue / (degrees 60)\n    x = chroma * (1 - (abs ((fmod hue' 2) - 1)))\n    (r,g,b) = if | hue' < 0 -> (0,0,0)\n                 | hue' < 1 -> (chroma,x,0)\n                 | hue' < 2 -> (x,chroma,0)\n                 | hue' < 3 -> (0,chroma,x)\n                 | hue' < 4 -> (0,x,chroma)\n                 | hue' < 5 -> (x,0,chroma)\n                 | hue' < 6 -> (chroma,0,x)\n                 | otherwise -> (0,0,0)\n    m = lightness - (chroma / 2)\nin (r + m,g + m,b + m)"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple3"},[{"tag":"Var","contents":"r"},{"tag":"Var","contents":"g"},{"tag":"Var","contents":"b"}]]},[{"tag":"Span","contents":[{"line":161,"column":17},{"line":168,"column":44},{"doc":"if | hue' < 0 -> (0,0,0)\n   | hue' < 1 -> (chroma,x,0)\n   | hue' < 2 -> (x,chroma,0)\n   | hue' < 3 -> (0,chroma,x)\n   | hue' < 4 -> (0,x,chroma)\n   | hue' < 5 -> (x,0,chroma)\n   | hue' < 6 -> (chroma,0,x)\n   | otherwise -> (0,0,0)"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":161,"column":22},{"line":161,"column":30},{"doc":"hue' < 0"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":161,"column":22},{"line":161,"column":26},{"doc":"hue'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue'"}}],[{"tag":"Span","contents":[{"line":161,"column":29},{"line":161,"column":30},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":161,"column":36},{"line":161,"column":43},{"doc":"(0,0,0)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":161,"column":36},{"line":161,"column":37},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":161,"column":39},{"line":161,"column":40},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":161,"column":42},{"line":161,"column":43},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]]}]],[[{"tag":"Span","contents":[{"line":162,"column":22},{"line":162,"column":30},{"doc":"hue' < 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":162,"column":22},{"line":162,"column":26},{"doc":"hue'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue'"}}],[{"tag":"Span","contents":[{"line":162,"column":29},{"line":162,"column":30},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],[{"tag":"Span","contents":[{"line":162,"column":36},{"line":162,"column":48},{"doc":"(chroma,x,0)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":162,"column":36},{"line":162,"column":42},{"doc":"chroma"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"chroma"}}],[{"tag":"Span","contents":[{"line":162,"column":44},{"line":162,"column":45},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}],[{"tag":"Span","contents":[{"line":162,"column":47},{"line":162,"column":48},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]]}]],[[{"tag":"Span","contents":[{"line":163,"column":22},{"line":163,"column":30},{"doc":"hue' < 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":163,"column":22},{"line":163,"column":26},{"doc":"hue'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue'"}}],[{"tag":"Span","contents":[{"line":163,"column":29},{"line":163,"column":30},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],[{"tag":"Span","contents":[{"line":163,"column":36},{"line":163,"column":48},{"doc":"(x,chroma,0)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":163,"column":36},{"line":163,"column":37},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}],[{"tag":"Span","contents":[{"line":163,"column":39},{"line":163,"column":45},{"doc":"chroma"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"chroma"}}],[{"tag":"Span","contents":[{"line":163,"column":47},{"line":163,"column":48},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]]}]],[[{"tag":"Span","contents":[{"line":164,"column":22},{"line":164,"column":30},{"doc":"hue' < 3"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":164,"column":22},{"line":164,"column":26},{"doc":"hue'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue'"}}],[{"tag":"Span","contents":[{"line":164,"column":29},{"line":164,"column":30},{"doc":"3"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":3}}]]}],[{"tag":"Span","contents":[{"line":164,"column":36},{"line":164,"column":48},{"doc":"(0,chroma,x)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":164,"column":36},{"line":164,"column":37},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":164,"column":39},{"line":164,"column":45},{"doc":"chroma"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"chroma"}}],[{"tag":"Span","contents":[{"line":164,"column":47},{"line":164,"column":48},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]]}]],[[{"tag":"Span","contents":[{"line":165,"column":22},{"line":165,"column":30},{"doc":"hue' < 4"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":165,"column":22},{"line":165,"column":26},{"doc":"hue'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue'"}}],[{"tag":"Span","contents":[{"line":165,"column":29},{"line":165,"column":30},{"doc":"4"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":4}}]]}],[{"tag":"Span","contents":[{"line":165,"column":36},{"line":165,"column":48},{"doc":"(0,x,chroma)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":165,"column":36},{"line":165,"column":37},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":165,"column":39},{"line":165,"column":40},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}],[{"tag":"Span","contents":[{"line":165,"column":42},{"line":165,"column":48},{"doc":"chroma"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"chroma"}}]]]}]],[[{"tag":"Span","contents":[{"line":166,"column":22},{"line":166,"column":30},{"doc":"hue' < 5"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":166,"column":22},{"line":166,"column":26},{"doc":"hue'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue'"}}],[{"tag":"Span","contents":[{"line":166,"column":29},{"line":166,"column":30},{"doc":"5"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":5}}]]}],[{"tag":"Span","contents":[{"line":166,"column":36},{"line":166,"column":48},{"doc":"(x,0,chroma)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":166,"column":36},{"line":166,"column":37},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}],[{"tag":"Span","contents":[{"line":166,"column":39},{"line":166,"column":40},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":166,"column":42},{"line":166,"column":48},{"doc":"chroma"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"chroma"}}]]]}]],[[{"tag":"Span","contents":[{"line":167,"column":22},{"line":167,"column":30},{"doc":"hue' < 6"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":167,"column":22},{"line":167,"column":26},{"doc":"hue'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue'"}}],[{"tag":"Span","contents":[{"line":167,"column":29},{"line":167,"column":30},{"doc":"6"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":6}}]]}],[{"tag":"Span","contents":[{"line":167,"column":36},{"line":167,"column":48},{"doc":"(chroma,0,x)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":167,"column":36},{"line":167,"column":42},{"doc":"chroma"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"chroma"}}],[{"tag":"Span","contents":[{"line":167,"column":44},{"line":167,"column":45},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":167,"column":47},{"line":167,"column":48},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]]}]],[[{"tag":"Span","contents":[{"line":168,"column":22},{"line":168,"column":31},{"doc":"otherwise"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"otherwise"}}],[{"tag":"Span","contents":[{"line":168,"column":36},{"line":168,"column":43},{"doc":"(0,0,0)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":168,"column":36},{"line":168,"column":37},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":168,"column":39},{"line":168,"column":40},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":168,"column":42},{"line":168,"column":43},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]]}]]]}],null]],[{"tag":"Span","contents":[{"line":156,"column":3},{"line":172,"column":28},{"doc":"let chroma = (1 - (abs ((2 * lightness) - 1))) * saturation\n    hue' = hue / (degrees 60)\n    x = chroma * (1 - (abs ((fmod hue' 2) - 1)))\n    (r,g,b) = if | hue' < 0 -> (0,0,0)\n                 | hue' < 1 -> (chroma,x,0)\n                 | hue' < 2 -> (x,chroma,0)\n                 | hue' < 3 -> (0,chroma,x)\n                 | hue' < 4 -> (0,x,chroma)\n                 | hue' < 5 -> (x,0,chroma)\n                 | hue' < 6 -> (chroma,0,x)\n                 | otherwise -> (0,0,0)\n    m = lightness - (chroma / 2)\nin (r + m,g + m,b + m)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"m"},[{"tag":"Span","contents":[{"line":170,"column":11},{"line":170,"column":33},{"doc":"lightness - (chroma / 2)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":170,"column":11},{"line":170,"column":20},{"doc":"lightness"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lightness"}}],[{"tag":"Span","contents":[{"line":170,"column":23},{"line":170,"column":33},{"doc":"chroma / 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":170,"column":23},{"line":170,"column":29},{"doc":"chroma"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"chroma"}}],[{"tag":"Span","contents":[{"line":170,"column":32},{"line":170,"column":33},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":172,"column":8},{"line":172,"column":27},{"doc":"(r + m,g + m,b + m)"}]},{"tag":"Data","contents":["_Tuple3",[[{"tag":"Span","contents":[{"line":172,"column":8},{"line":172,"column":13},{"doc":"r + m"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":172,"column":8},{"line":172,"column":9},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}],[{"tag":"Span","contents":[{"line":172,"column":12},{"line":172,"column":13},{"doc":"m"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"m"}}]]}],[{"tag":"Span","contents":[{"line":172,"column":15},{"line":172,"column":20},{"doc":"g + m"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":172,"column":15},{"line":172,"column":16},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}],[{"tag":"Span","contents":[{"line":172,"column":19},{"line":172,"column":20},{"doc":"m"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"m"}}]]}],[{"tag":"Span","contents":[{"line":172,"column":22},{"line":172,"column":27},{"doc":"b + m"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":172,"column":22},{"line":172,"column":23},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"Span","contents":[{"line":172,"column":26},{"line":172,"column":27},{"doc":"m"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"m"}}]]}]]]}]]}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple3"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toRgb"},[{"tag":"Span","contents":[{"line":115,"column":5},{"line":123,"column":16},{"doc":"case color of\n  RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n  HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                  in { red = round (255 * r)\n                     , green = round (255 * g)\n                     , blue = round (255 * b)\n                     , alpha = a\n                     }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"color"},[{"tag":"Span","contents":[{"line":115,"column":5},{"line":123,"column":16},{"doc":"case color of\n  RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n  HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                  in { red = round (255 * r)\n                     , green = round (255 * g)\n                     , blue = round (255 * b)\n                     , alpha = a\n                     }"}]},{"tag":"Case","contents":[[{"tag":"Span","contents":[{"line":115,"column":10},{"line":115,"column":15},{"doc":"color"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"color"}}],[[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Color"]},"name":"RGBA"},[{"tag":"Var","contents":"r"},{"tag":"Var","contents":"g"},{"tag":"Var","contents":"b"},{"tag":"Var","contents":"a"}]]},[{"tag":"Span","contents":[{"line":116,"column":25},{"line":116,"column":56},{"doc":"{ red = r, green = g, blue = b, alpha = a }"}]},{"tag":"Record","contents":[["red",[{"tag":"Span","contents":[{"line":116,"column":29},{"line":116,"column":30},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]],["green",[{"tag":"Span","contents":[{"line":116,"column":38},{"line":116,"column":39},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]],["blue",[{"tag":"Span","contents":[{"line":116,"column":46},{"line":116,"column":47},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]],["alpha",[{"tag":"Span","contents":[{"line":116,"column":55},{"line":116,"column":56},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Color"]},"name":"HSLA"},[{"tag":"Var","contents":"h"},{"tag":"Var","contents":"s"},{"tag":"Var","contents":"l"},{"tag":"Var","contents":"a"}]]},[{"tag":"Span","contents":[{"line":118,"column":11},{"line":123,"column":16},{"doc":"let (r,g,b) = hslToRgb h s l\nin { red = round (255 * r)\n   , green = round (255 * g)\n   , blue = round (255 * b)\n   , alpha = a\n   }"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple3"},[{"tag":"Var","contents":"r"},{"tag":"Var","contents":"g"},{"tag":"Var","contents":"b"}]]},[{"tag":"Span","contents":[{"line":118,"column":25},{"line":118,"column":39},{"doc":"hslToRgb h s l"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":118,"column":25},{"line":118,"column":37},{"doc":"hslToRgb h s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":118,"column":25},{"line":118,"column":35},{"doc":"hslToRgb h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":118,"column":25},{"line":118,"column":33},{"doc":"hslToRgb"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hslToRgb"}}],[{"tag":"Span","contents":[{"line":118,"column":34},{"line":118,"column":35},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":118,"column":36},{"line":118,"column":37},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}],[{"tag":"Span","contents":[{"line":118,"column":38},{"line":118,"column":39},{"doc":"l"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"l"}}]]}],null]],[{"tag":"Span","contents":[{"line":119,"column":17},{"line":122,"column":26},{"doc":"{ red = round (255 * r)\n, green = round (255 * g)\n, blue = round (255 * b)\n, alpha = a\n}"}]},{"tag":"Record","contents":[["red",[{"tag":"Span","contents":[{"line":119,"column":25},{"line":119,"column":39},{"doc":"round (255 * r)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":119,"column":25},{"line":119,"column":30},{"doc":"round"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"round"}}],[{"tag":"Span","contents":[{"line":119,"column":32},{"line":119,"column":39},{"doc":"255 * r"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":119,"column":32},{"line":119,"column":35},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}],[{"tag":"Span","contents":[{"line":119,"column":38},{"line":119,"column":39},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}]]}]],["green",[{"tag":"Span","contents":[{"line":120,"column":25},{"line":120,"column":39},{"doc":"round (255 * g)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":120,"column":25},{"line":120,"column":30},{"doc":"round"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"round"}}],[{"tag":"Span","contents":[{"line":120,"column":32},{"line":120,"column":39},{"doc":"255 * g"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":120,"column":32},{"line":120,"column":35},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}],[{"tag":"Span","contents":[{"line":120,"column":38},{"line":120,"column":39},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]]}]]}]],["blue",[{"tag":"Span","contents":[{"line":121,"column":25},{"line":121,"column":39},{"doc":"round (255 * b)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":121,"column":25},{"line":121,"column":30},{"doc":"round"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"round"}}],[{"tag":"Span","contents":[{"line":121,"column":32},{"line":121,"column":39},{"doc":"255 * b"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":121,"column":32},{"line":121,"column":35},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}],[{"tag":"Span","contents":[{"line":121,"column":38},{"line":121,"column":39},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}]]}]],["alpha",[{"tag":"Span","contents":[{"line":122,"column":25},{"line":122,"column":26},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}]]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Record","contents":[[["red",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["green",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["blue",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toHsl"},[{"tag":"Span","contents":[{"line":105,"column":5},{"line":112,"column":3},{"doc":"case color of\n  HSLA h s l a -> { hue = h, saturation = s, lightness = l, alpha = a\n                  }\n  RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                  in { hue = h, saturation = s, lightness = l, alpha = a }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"color"},[{"tag":"Span","contents":[{"line":105,"column":5},{"line":112,"column":3},{"doc":"case color of\n  HSLA h s l a -> { hue = h, saturation = s, lightness = l, alpha = a\n                  }\n  RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                  in { hue = h, saturation = s, lightness = l, alpha = a }"}]},{"tag":"Case","contents":[[{"tag":"Span","contents":[{"line":105,"column":10},{"line":105,"column":15},{"doc":"color"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"color"}}],[[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Color"]},"name":"HSLA"},[{"tag":"Var","contents":"h"},{"tag":"Var","contents":"s"},{"tag":"Var","contents":"l"},{"tag":"Var","contents":"a"}]]},[{"tag":"Span","contents":[{"line":106,"column":25},{"line":106,"column":66},{"doc":"{ hue = h, saturation = s, lightness = l, alpha = a }"}]},{"tag":"Record","contents":[["hue",[{"tag":"Span","contents":[{"line":106,"column":29},{"line":106,"column":30},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]],["saturation",[{"tag":"Span","contents":[{"line":106,"column":43},{"line":106,"column":44},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]],["lightness",[{"tag":"Span","contents":[{"line":106,"column":56},{"line":106,"column":57},{"doc":"l"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"l"}}]],["alpha",[{"tag":"Span","contents":[{"line":106,"column":65},{"line":106,"column":66},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Color"]},"name":"RGBA"},[{"tag":"Var","contents":"r"},{"tag":"Var","contents":"g"},{"tag":"Var","contents":"b"},{"tag":"Var","contents":"a"}]]},[{"tag":"Span","contents":[{"line":108,"column":11},{"line":109,"column":60},{"doc":"let (h,s,l) = rgbToHsl r g b\nin { hue = h, saturation = s, lightness = l, alpha = a }"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple3"},[{"tag":"Var","contents":"h"},{"tag":"Var","contents":"s"},{"tag":"Var","contents":"l"}]]},[{"tag":"Span","contents":[{"line":108,"column":25},{"line":108,"column":39},{"doc":"rgbToHsl r g b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":108,"column":25},{"line":108,"column":37},{"doc":"rgbToHsl r g"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":108,"column":25},{"line":108,"column":35},{"doc":"rgbToHsl r"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":108,"column":25},{"line":108,"column":33},{"doc":"rgbToHsl"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"rgbToHsl"}}],[{"tag":"Span","contents":[{"line":108,"column":34},{"line":108,"column":35},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}],[{"tag":"Span","contents":[{"line":108,"column":36},{"line":108,"column":37},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]]}],[{"tag":"Span","contents":[{"line":108,"column":38},{"line":108,"column":39},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],null]],[{"tag":"Span","contents":[{"line":109,"column":17},{"line":109,"column":58},{"doc":"{ hue = h, saturation = s, lightness = l, alpha = a }"}]},{"tag":"Record","contents":[["hue",[{"tag":"Span","contents":[{"line":109,"column":21},{"line":109,"column":22},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]],["saturation",[{"tag":"Span","contents":[{"line":109,"column":35},{"line":109,"column":36},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]],["lightness",[{"tag":"Span","contents":[{"line":109,"column":48},{"line":109,"column":49},{"doc":"l"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"l"}}]],["alpha",[{"tag":"Span","contents":[{"line":109,"column":57},{"line":109,"column":58},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}]]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Record","contents":[[["hue",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["saturation",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["lightness",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["alpha",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"HSLA"},[{"tag":"None","contents":{"doc":"HSLA a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"HSLA a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"HSLA a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"HSLA a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"HSLA a b c d"}},{"tag":"Data","contents":["HSLA",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}],[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},[]]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hsla"},[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":83},{"doc":"HSLA\n  (hue - (turns (toFloat (floor (hue / (2 * pi))))))\n  saturation\n  lightness\n  alpha"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"hue"},[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":83},{"doc":"HSLA\n  (hue - (turns (toFloat (floor (hue / (2 * pi))))))\n  saturation\n  lightness\n  alpha"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"saturation"},[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":83},{"doc":"HSLA\n  (hue - (turns (toFloat (floor (hue / (2 * pi))))))\n  saturation\n  lightness\n  alpha"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"lightness"},[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":83},{"doc":"HSLA\n  (hue - (turns (toFloat (floor (hue / (2 * pi))))))\n  saturation\n  lightness\n  alpha"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"alpha"},[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":83},{"doc":"HSLA\n  (hue - (turns (toFloat (floor (hue / (2 * pi))))))\n  saturation\n  lightness\n  alpha"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":77},{"doc":"HSLA\n  (hue - (turns (toFloat (floor (hue / (2 * pi))))))\n  saturation\n  lightness"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":67},{"doc":"HSLA (hue - (turns (toFloat (floor (hue / (2 * pi)))))) saturation"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":51},{"doc":"HSLA (hue - (turns (toFloat (floor (hue / (2 * pi))))))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":64,"column":5},{"line":64,"column":9},{"doc":"HSLA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"HSLA"}}],[{"tag":"Span","contents":[{"line":64,"column":11},{"line":64,"column":51},{"doc":"hue - (turns (toFloat (floor (hue / (2 * pi)))))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":64,"column":11},{"line":64,"column":14},{"doc":"hue"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue"}}],[{"tag":"Span","contents":[{"line":64,"column":17},{"line":64,"column":51},{"doc":"turns (toFloat (floor (hue / (2 * pi))))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":64,"column":17},{"line":64,"column":22},{"doc":"turns"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"turns"}}],[{"tag":"Span","contents":[{"line":64,"column":24},{"line":64,"column":51},{"doc":"toFloat (floor (hue / (2 * pi)))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":64,"column":24},{"line":64,"column":31},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":64,"column":33},{"line":64,"column":51},{"doc":"floor (hue / (2 * pi))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":64,"column":33},{"line":64,"column":38},{"doc":"floor"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"floor"}}],[{"tag":"Span","contents":[{"line":64,"column":40},{"line":64,"column":51},{"doc":"hue / (2 * pi)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":64,"column":40},{"line":64,"column":43},{"doc":"hue"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue"}}],[{"tag":"Span","contents":[{"line":64,"column":47},{"line":64,"column":51},{"doc":"2 * pi"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":64,"column":47},{"line":64,"column":48},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}],[{"tag":"Span","contents":[{"line":64,"column":49},{"line":64,"column":51},{"doc":"pi"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"pi"}}]]}]]}]]}]]}]]}]]}]]}],[{"tag":"Span","contents":[{"line":64,"column":57},{"line":64,"column":67},{"doc":"saturation"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"saturation"}}]]}],[{"tag":"Span","contents":[{"line":64,"column":68},{"line":64,"column":77},{"doc":"lightness"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lightness"}}]]}],[{"tag":"Span","contents":[{"line":64,"column":78},{"line":64,"column":83},{"doc":"alpha"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"alpha"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hsl"},[{"tag":"Span","contents":[{"line":82,"column":5},{"line":82,"column":36},{"doc":"hsla hue saturation lightness 1"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"hue"},[{"tag":"Span","contents":[{"line":82,"column":5},{"line":82,"column":36},{"doc":"hsla hue saturation lightness 1"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"saturation"},[{"tag":"Span","contents":[{"line":82,"column":5},{"line":82,"column":36},{"doc":"hsla hue saturation lightness 1"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"lightness"},[{"tag":"Span","contents":[{"line":82,"column":5},{"line":82,"column":36},{"doc":"hsla hue saturation lightness 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":82,"column":5},{"line":82,"column":34},{"doc":"hsla hue saturation lightness"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":82,"column":5},{"line":82,"column":24},{"doc":"hsla hue saturation"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":82,"column":5},{"line":82,"column":13},{"doc":"hsla hue"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":82,"column":5},{"line":82,"column":9},{"doc":"hsla"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hsla"}}],[{"tag":"Span","contents":[{"line":82,"column":10},{"line":82,"column":13},{"doc":"hue"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hue"}}]]}],[{"tag":"Span","contents":[{"line":82,"column":14},{"line":82,"column":24},{"doc":"saturation"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"saturation"}}]]}],[{"tag":"Span","contents":[{"line":82,"column":25},{"line":82,"column":34},{"doc":"lightness"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lightness"}}]]}],[{"tag":"Span","contents":[{"line":82,"column":35},{"line":82,"column":36},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"complement"},[{"tag":"Span","contents":[{"line":96,"column":5},{"line":102,"column":3},{"doc":"case color of\n  HSLA h s l a -> hsla (h + (degrees 180)) s l a\n  RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                  in hsla (h + (degrees 180)) s l a"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"color"},[{"tag":"Span","contents":[{"line":96,"column":5},{"line":102,"column":3},{"doc":"case color of\n  HSLA h s l a -> hsla (h + (degrees 180)) s l a\n  RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                  in hsla (h + (degrees 180)) s l a"}]},{"tag":"Case","contents":[[{"tag":"Span","contents":[{"line":96,"column":10},{"line":96,"column":15},{"doc":"color"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"color"}}],[[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Color"]},"name":"HSLA"},[{"tag":"Var","contents":"h"},{"tag":"Var","contents":"s"},{"tag":"Var","contents":"l"},{"tag":"Var","contents":"a"}]]},[{"tag":"Span","contents":[{"line":97,"column":23},{"line":97,"column":51},{"doc":"hsla (h + (degrees 180)) s l a"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":97,"column":23},{"line":97,"column":49},{"doc":"hsla (h + (degrees 180)) s l"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":97,"column":23},{"line":97,"column":47},{"doc":"hsla (h + (degrees 180)) s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":97,"column":23},{"line":97,"column":44},{"doc":"hsla (h + (degrees 180))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":97,"column":23},{"line":97,"column":27},{"doc":"hsla"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hsla"}}],[{"tag":"Span","contents":[{"line":97,"column":29},{"line":97,"column":44},{"doc":"h + (degrees 180)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":97,"column":29},{"line":97,"column":30},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}],[{"tag":"Span","contents":[{"line":97,"column":33},{"line":97,"column":44},{"doc":"degrees 180"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":97,"column":33},{"line":97,"column":40},{"doc":"degrees"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"degrees"}}],[{"tag":"Span","contents":[{"line":97,"column":41},{"line":97,"column":44},{"doc":"180"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":180}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":97,"column":46},{"line":97,"column":47},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}],[{"tag":"Span","contents":[{"line":97,"column":48},{"line":97,"column":49},{"doc":"l"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"l"}}]]}],[{"tag":"Span","contents":[{"line":97,"column":50},{"line":97,"column":51},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Color"]},"name":"RGBA"},[{"tag":"Var","contents":"r"},{"tag":"Var","contents":"g"},{"tag":"Var","contents":"b"},{"tag":"Var","contents":"a"}]]},[{"tag":"Span","contents":[{"line":98,"column":23},{"line":99,"column":55},{"doc":"let (h,s,l) = rgbToHsl r g b in hsla (h + (degrees 180)) s l a"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple3"},[{"tag":"Var","contents":"h"},{"tag":"Var","contents":"s"},{"tag":"Var","contents":"l"}]]},[{"tag":"Span","contents":[{"line":98,"column":37},{"line":98,"column":51},{"doc":"rgbToHsl r g b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":98,"column":37},{"line":98,"column":49},{"doc":"rgbToHsl r g"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":98,"column":37},{"line":98,"column":47},{"doc":"rgbToHsl r"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":98,"column":37},{"line":98,"column":45},{"doc":"rgbToHsl"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"rgbToHsl"}}],[{"tag":"Span","contents":[{"line":98,"column":46},{"line":98,"column":47},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}],[{"tag":"Span","contents":[{"line":98,"column":48},{"line":98,"column":49},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]]}],[{"tag":"Span","contents":[{"line":98,"column":50},{"line":98,"column":51},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],null]],[{"tag":"Span","contents":[{"line":99,"column":27},{"line":99,"column":55},{"doc":"hsla (h + (degrees 180)) s l a"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":99,"column":27},{"line":99,"column":53},{"doc":"hsla (h + (degrees 180)) s l"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":99,"column":27},{"line":99,"column":51},{"doc":"hsla (h + (degrees 180)) s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":99,"column":27},{"line":99,"column":48},{"doc":"hsla (h + (degrees 180))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":99,"column":27},{"line":99,"column":31},{"doc":"hsla"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hsla"}}],[{"tag":"Span","contents":[{"line":99,"column":33},{"line":99,"column":48},{"doc":"h + (degrees 180)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":99,"column":33},{"line":99,"column":34},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}],[{"tag":"Span","contents":[{"line":99,"column":37},{"line":99,"column":48},{"doc":"degrees 180"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":99,"column":37},{"line":99,"column":44},{"doc":"degrees"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"degrees"}}],[{"tag":"Span","contents":[{"line":99,"column":45},{"line":99,"column":48},{"doc":"180"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":180}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":99,"column":50},{"line":99,"column":51},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}],[{"tag":"Span","contents":[{"line":99,"column":52},{"line":99,"column":53},{"doc":"l"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"l"}}]]}],[{"tag":"Span","contents":[{"line":99,"column":54},{"line":99,"column":55},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]}]]}]]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"grayscale"},[{"tag":"Span","contents":[{"line":86,"column":15},{"line":86,"column":31},{"doc":"HSLA 0 0 (1 - p) 1"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":86,"column":15},{"line":86,"column":31},{"doc":"HSLA 0 0 (1 - p) 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":15},{"line":86,"column":28},{"doc":"HSLA 0 0 (1 - p)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":15},{"line":86,"column":23},{"doc":"HSLA 0 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":15},{"line":86,"column":21},{"doc":"HSLA 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":86,"column":15},{"line":86,"column":19},{"doc":"HSLA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"HSLA"}}],[{"tag":"Span","contents":[{"line":86,"column":20},{"line":86,"column":21},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":86,"column":22},{"line":86,"column":23},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":86,"column":25},{"line":86,"column":28},{"doc":"1 - p"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":86,"column":25},{"line":86,"column":26},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}],[{"tag":"Span","contents":[{"line":86,"column":27},{"line":86,"column":28},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}]]}]]}],[{"tag":"Span","contents":[{"line":86,"column":30},{"line":86,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"greyscale"},[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":31},{"doc":"HSLA 0 0 (1 - p) 1"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":31},{"doc":"HSLA 0 0 (1 - p) 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":28},{"doc":"HSLA 0 0 (1 - p)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":23},{"doc":"HSLA 0 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":21},{"doc":"HSLA 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":89,"column":15},{"line":89,"column":19},{"doc":"HSLA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"HSLA"}}],[{"tag":"Span","contents":[{"line":89,"column":20},{"line":89,"column":21},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":89,"column":22},{"line":89,"column":23},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":89,"column":25},{"line":89,"column":28},{"doc":"1 - p"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":89,"column":25},{"line":89,"column":26},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}],[{"tag":"Span","contents":[{"line":89,"column":27},{"line":89,"column":28},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}]]}]]}],[{"tag":"Span","contents":[{"line":89,"column":30},{"line":89,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"RGBA"},[{"tag":"None","contents":{"doc":"RGBA a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"RGBA a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"RGBA a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"RGBA a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"RGBA a b c d"}},{"tag":"Data","contents":["RGBA",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}],[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},[]]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"rgba"},[{"tag":"Span","contents":[{"line":53,"column":8},{"line":53,"column":12},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"rgb"},[{"tag":"Span","contents":[{"line":57,"column":13},{"line":57,"column":25},{"doc":"RGBA r g b 1"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"r"},[{"tag":"Span","contents":[{"line":57,"column":13},{"line":57,"column":25},{"doc":"RGBA r g b 1"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"g"},[{"tag":"Span","contents":[{"line":57,"column":13},{"line":57,"column":25},{"doc":"RGBA r g b 1"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":57,"column":13},{"line":57,"column":25},{"doc":"RGBA r g b 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":57,"column":13},{"line":57,"column":23},{"doc":"RGBA r g b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":57,"column":13},{"line":57,"column":21},{"doc":"RGBA r g"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":57,"column":13},{"line":57,"column":19},{"doc":"RGBA r"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":57,"column":13},{"line":57,"column":17},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":57,"column":18},{"line":57,"column":19},{"doc":"r"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"r"}}]]}],[{"tag":"Span","contents":[{"line":57,"column":20},{"line":57,"column":21},{"doc":"g"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]]}],[{"tag":"Span","contents":[{"line":57,"column":22},{"line":57,"column":23},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":57,"column":24},{"line":57,"column":25},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]}]}]}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightRed"},[{"tag":"Span","contents":[{"line":201,"column":15},{"line":201,"column":31},{"doc":"RGBA 239 41 41 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":201,"column":15},{"line":201,"column":29},{"doc":"RGBA 239 41 41"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":201,"column":15},{"line":201,"column":26},{"doc":"RGBA 239 41"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":201,"column":15},{"line":201,"column":23},{"doc":"RGBA 239"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":201,"column":15},{"line":201,"column":19},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":201,"column":20},{"line":201,"column":23},{"doc":"239"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":239}}]]}],[{"tag":"Span","contents":[{"line":201,"column":24},{"line":201,"column":26},{"doc":"41"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":41}}]]}],[{"tag":"Span","contents":[{"line":201,"column":27},{"line":201,"column":29},{"doc":"41"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":41}}]]}],[{"tag":"Span","contents":[{"line":201,"column":30},{"line":201,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"red"},[{"tag":"Span","contents":[{"line":203,"column":10},{"line":203,"column":26},{"doc":"RGBA 204 0 0 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":203,"column":10},{"line":203,"column":24},{"doc":"RGBA 204 0 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":203,"column":10},{"line":203,"column":21},{"doc":"RGBA 204 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":203,"column":10},{"line":203,"column":18},{"doc":"RGBA 204"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":203,"column":10},{"line":203,"column":14},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":203,"column":15},{"line":203,"column":18},{"doc":"204"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":204}}]]}],[{"tag":"Span","contents":[{"line":203,"column":20},{"line":203,"column":21},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":203,"column":23},{"line":203,"column":24},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":203,"column":25},{"line":203,"column":26},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkRed"},[{"tag":"Span","contents":[{"line":205,"column":14},{"line":205,"column":30},{"doc":"RGBA 164 0 0 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":205,"column":14},{"line":205,"column":28},{"doc":"RGBA 164 0 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":205,"column":14},{"line":205,"column":25},{"doc":"RGBA 164 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":205,"column":14},{"line":205,"column":22},{"doc":"RGBA 164"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":205,"column":14},{"line":205,"column":18},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":205,"column":19},{"line":205,"column":22},{"doc":"164"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":164}}]]}],[{"tag":"Span","contents":[{"line":205,"column":24},{"line":205,"column":25},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":205,"column":27},{"line":205,"column":28},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":205,"column":29},{"line":205,"column":30},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightOrange"},[{"tag":"Span","contents":[{"line":208,"column":15},{"line":208,"column":32},{"doc":"RGBA 252 175 62 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":208,"column":15},{"line":208,"column":30},{"doc":"RGBA 252 175 62"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":208,"column":15},{"line":208,"column":27},{"doc":"RGBA 252 175"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":208,"column":15},{"line":208,"column":23},{"doc":"RGBA 252"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":208,"column":15},{"line":208,"column":19},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":208,"column":20},{"line":208,"column":23},{"doc":"252"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":252}}]]}],[{"tag":"Span","contents":[{"line":208,"column":24},{"line":208,"column":27},{"doc":"175"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":175}}]]}],[{"tag":"Span","contents":[{"line":208,"column":28},{"line":208,"column":30},{"doc":"62"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":62}}]]}],[{"tag":"Span","contents":[{"line":208,"column":31},{"line":208,"column":32},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"orange"},[{"tag":"Span","contents":[{"line":210,"column":10},{"line":210,"column":27},{"doc":"RGBA 245 121 0 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":10},{"line":210,"column":25},{"doc":"RGBA 245 121 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":10},{"line":210,"column":22},{"doc":"RGBA 245 121"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":10},{"line":210,"column":18},{"doc":"RGBA 245"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":10},{"line":210,"column":14},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":210,"column":15},{"line":210,"column":18},{"doc":"245"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":245}}]]}],[{"tag":"Span","contents":[{"line":210,"column":19},{"line":210,"column":22},{"doc":"121"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":121}}]]}],[{"tag":"Span","contents":[{"line":210,"column":24},{"line":210,"column":25},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":210,"column":26},{"line":210,"column":27},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkOrange"},[{"tag":"Span","contents":[{"line":212,"column":14},{"line":212,"column":31},{"doc":"RGBA 206 92 0 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":212,"column":14},{"line":212,"column":29},{"doc":"RGBA 206 92 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":212,"column":14},{"line":212,"column":26},{"doc":"RGBA 206 92"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":212,"column":14},{"line":212,"column":22},{"doc":"RGBA 206"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":212,"column":14},{"line":212,"column":18},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":212,"column":19},{"line":212,"column":22},{"doc":"206"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":206}}]]}],[{"tag":"Span","contents":[{"line":212,"column":24},{"line":212,"column":26},{"doc":"92"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":92}}]]}],[{"tag":"Span","contents":[{"line":212,"column":28},{"line":212,"column":29},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":212,"column":30},{"line":212,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightYellow"},[{"tag":"Span","contents":[{"line":215,"column":15},{"line":215,"column":32},{"doc":"RGBA 255 233 79 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":215,"column":15},{"line":215,"column":30},{"doc":"RGBA 255 233 79"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":215,"column":15},{"line":215,"column":27},{"doc":"RGBA 255 233"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":215,"column":15},{"line":215,"column":23},{"doc":"RGBA 255"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":215,"column":15},{"line":215,"column":19},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":215,"column":20},{"line":215,"column":23},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}]]}],[{"tag":"Span","contents":[{"line":215,"column":24},{"line":215,"column":27},{"doc":"233"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":233}}]]}],[{"tag":"Span","contents":[{"line":215,"column":28},{"line":215,"column":30},{"doc":"79"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":79}}]]}],[{"tag":"Span","contents":[{"line":215,"column":31},{"line":215,"column":32},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"yellow"},[{"tag":"Span","contents":[{"line":217,"column":10},{"line":217,"column":27},{"doc":"RGBA 237 212 0 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":217,"column":10},{"line":217,"column":25},{"doc":"RGBA 237 212 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":217,"column":10},{"line":217,"column":22},{"doc":"RGBA 237 212"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":217,"column":10},{"line":217,"column":18},{"doc":"RGBA 237"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":217,"column":10},{"line":217,"column":14},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":217,"column":15},{"line":217,"column":18},{"doc":"237"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":237}}]]}],[{"tag":"Span","contents":[{"line":217,"column":19},{"line":217,"column":22},{"doc":"212"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":212}}]]}],[{"tag":"Span","contents":[{"line":217,"column":24},{"line":217,"column":25},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":217,"column":26},{"line":217,"column":27},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkYellow"},[{"tag":"Span","contents":[{"line":219,"column":14},{"line":219,"column":31},{"doc":"RGBA 196 160 0 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":219,"column":14},{"line":219,"column":29},{"doc":"RGBA 196 160 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":219,"column":14},{"line":219,"column":26},{"doc":"RGBA 196 160"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":219,"column":14},{"line":219,"column":22},{"doc":"RGBA 196"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":219,"column":14},{"line":219,"column":18},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":219,"column":19},{"line":219,"column":22},{"doc":"196"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":196}}]]}],[{"tag":"Span","contents":[{"line":219,"column":23},{"line":219,"column":26},{"doc":"160"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":160}}]]}],[{"tag":"Span","contents":[{"line":219,"column":28},{"line":219,"column":29},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":219,"column":30},{"line":219,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightGreen"},[{"tag":"Span","contents":[{"line":222,"column":15},{"line":222,"column":33},{"doc":"RGBA 138 226 52 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":222,"column":15},{"line":222,"column":31},{"doc":"RGBA 138 226 52"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":222,"column":15},{"line":222,"column":27},{"doc":"RGBA 138 226"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":222,"column":15},{"line":222,"column":23},{"doc":"RGBA 138"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":222,"column":15},{"line":222,"column":19},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":222,"column":20},{"line":222,"column":23},{"doc":"138"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":138}}]]}],[{"tag":"Span","contents":[{"line":222,"column":24},{"line":222,"column":27},{"doc":"226"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":226}}]]}],[{"tag":"Span","contents":[{"line":222,"column":29},{"line":222,"column":31},{"doc":"52"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":52}}]]}],[{"tag":"Span","contents":[{"line":222,"column":32},{"line":222,"column":33},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"green"},[{"tag":"Span","contents":[{"line":224,"column":10},{"line":224,"column":28},{"doc":"RGBA 115 210 22 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":224,"column":10},{"line":224,"column":26},{"doc":"RGBA 115 210 22"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":224,"column":10},{"line":224,"column":22},{"doc":"RGBA 115 210"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":224,"column":10},{"line":224,"column":18},{"doc":"RGBA 115"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":224,"column":10},{"line":224,"column":14},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":224,"column":15},{"line":224,"column":18},{"doc":"115"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":115}}]]}],[{"tag":"Span","contents":[{"line":224,"column":19},{"line":224,"column":22},{"doc":"210"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":210}}]]}],[{"tag":"Span","contents":[{"line":224,"column":24},{"line":224,"column":26},{"doc":"22"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":22}}]]}],[{"tag":"Span","contents":[{"line":224,"column":27},{"line":224,"column":28},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkGreen"},[{"tag":"Span","contents":[{"line":226,"column":14},{"line":226,"column":32},{"doc":"RGBA 78 154 6 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":226,"column":14},{"line":226,"column":30},{"doc":"RGBA 78 154 6"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":226,"column":14},{"line":226,"column":26},{"doc":"RGBA 78 154"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":226,"column":14},{"line":226,"column":22},{"doc":"RGBA 78"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":226,"column":14},{"line":226,"column":18},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":226,"column":20},{"line":226,"column":22},{"doc":"78"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":78}}]]}],[{"tag":"Span","contents":[{"line":226,"column":23},{"line":226,"column":26},{"doc":"154"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":154}}]]}],[{"tag":"Span","contents":[{"line":226,"column":29},{"line":226,"column":30},{"doc":"6"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":6}}]]}],[{"tag":"Span","contents":[{"line":226,"column":31},{"line":226,"column":32},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightBlue"},[{"tag":"Span","contents":[{"line":229,"column":15},{"line":229,"column":33},{"doc":"RGBA 114 159 207 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":229,"column":15},{"line":229,"column":31},{"doc":"RGBA 114 159 207"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":229,"column":15},{"line":229,"column":27},{"doc":"RGBA 114 159"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":229,"column":15},{"line":229,"column":23},{"doc":"RGBA 114"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":229,"column":15},{"line":229,"column":19},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":229,"column":20},{"line":229,"column":23},{"doc":"114"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":114}}]]}],[{"tag":"Span","contents":[{"line":229,"column":24},{"line":229,"column":27},{"doc":"159"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":159}}]]}],[{"tag":"Span","contents":[{"line":229,"column":28},{"line":229,"column":31},{"doc":"207"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":207}}]]}],[{"tag":"Span","contents":[{"line":229,"column":32},{"line":229,"column":33},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"blue"},[{"tag":"Span","contents":[{"line":231,"column":10},{"line":231,"column":28},{"doc":"RGBA 52 101 164 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":231,"column":10},{"line":231,"column":26},{"doc":"RGBA 52 101 164"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":231,"column":10},{"line":231,"column":22},{"doc":"RGBA 52 101"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":231,"column":10},{"line":231,"column":18},{"doc":"RGBA 52"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":231,"column":10},{"line":231,"column":14},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":231,"column":16},{"line":231,"column":18},{"doc":"52"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":52}}]]}],[{"tag":"Span","contents":[{"line":231,"column":19},{"line":231,"column":22},{"doc":"101"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":101}}]]}],[{"tag":"Span","contents":[{"line":231,"column":23},{"line":231,"column":26},{"doc":"164"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":164}}]]}],[{"tag":"Span","contents":[{"line":231,"column":27},{"line":231,"column":28},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkBlue"},[{"tag":"Span","contents":[{"line":233,"column":14},{"line":233,"column":32},{"doc":"RGBA 32 74 135 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":233,"column":14},{"line":233,"column":30},{"doc":"RGBA 32 74 135"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":233,"column":14},{"line":233,"column":26},{"doc":"RGBA 32 74"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":233,"column":14},{"line":233,"column":22},{"doc":"RGBA 32"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":233,"column":14},{"line":233,"column":18},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":233,"column":20},{"line":233,"column":22},{"doc":"32"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":32}}]]}],[{"tag":"Span","contents":[{"line":233,"column":24},{"line":233,"column":26},{"doc":"74"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":74}}]]}],[{"tag":"Span","contents":[{"line":233,"column":27},{"line":233,"column":30},{"doc":"135"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":135}}]]}],[{"tag":"Span","contents":[{"line":233,"column":31},{"line":233,"column":32},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightPurple"},[{"tag":"Span","contents":[{"line":236,"column":15},{"line":236,"column":33},{"doc":"RGBA 173 127 168 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":236,"column":15},{"line":236,"column":31},{"doc":"RGBA 173 127 168"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":236,"column":15},{"line":236,"column":27},{"doc":"RGBA 173 127"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":236,"column":15},{"line":236,"column":23},{"doc":"RGBA 173"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":236,"column":15},{"line":236,"column":19},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":236,"column":20},{"line":236,"column":23},{"doc":"173"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":173}}]]}],[{"tag":"Span","contents":[{"line":236,"column":24},{"line":236,"column":27},{"doc":"127"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":127}}]]}],[{"tag":"Span","contents":[{"line":236,"column":28},{"line":236,"column":31},{"doc":"168"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":168}}]]}],[{"tag":"Span","contents":[{"line":236,"column":32},{"line":236,"column":33},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"purple"},[{"tag":"Span","contents":[{"line":238,"column":10},{"line":238,"column":28},{"doc":"RGBA 117 80 123 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":238,"column":10},{"line":238,"column":26},{"doc":"RGBA 117 80 123"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":238,"column":10},{"line":238,"column":22},{"doc":"RGBA 117 80"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":238,"column":10},{"line":238,"column":18},{"doc":"RGBA 117"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":238,"column":10},{"line":238,"column":14},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":238,"column":15},{"line":238,"column":18},{"doc":"117"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":117}}]]}],[{"tag":"Span","contents":[{"line":238,"column":20},{"line":238,"column":22},{"doc":"80"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":80}}]]}],[{"tag":"Span","contents":[{"line":238,"column":23},{"line":238,"column":26},{"doc":"123"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":123}}]]}],[{"tag":"Span","contents":[{"line":238,"column":27},{"line":238,"column":28},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkPurple"},[{"tag":"Span","contents":[{"line":240,"column":14},{"line":240,"column":32},{"doc":"RGBA 92 53 102 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":240,"column":14},{"line":240,"column":30},{"doc":"RGBA 92 53 102"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":240,"column":14},{"line":240,"column":26},{"doc":"RGBA 92 53"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":240,"column":14},{"line":240,"column":22},{"doc":"RGBA 92"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":240,"column":14},{"line":240,"column":18},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":240,"column":20},{"line":240,"column":22},{"doc":"92"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":92}}]]}],[{"tag":"Span","contents":[{"line":240,"column":24},{"line":240,"column":26},{"doc":"53"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":53}}]]}],[{"tag":"Span","contents":[{"line":240,"column":27},{"line":240,"column":30},{"doc":"102"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":102}}]]}],[{"tag":"Span","contents":[{"line":240,"column":31},{"line":240,"column":32},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightBrown"},[{"tag":"Span","contents":[{"line":243,"column":15},{"line":243,"column":33},{"doc":"RGBA 233 185 110 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":243,"column":15},{"line":243,"column":31},{"doc":"RGBA 233 185 110"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":243,"column":15},{"line":243,"column":27},{"doc":"RGBA 233 185"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":243,"column":15},{"line":243,"column":23},{"doc":"RGBA 233"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":243,"column":15},{"line":243,"column":19},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":243,"column":20},{"line":243,"column":23},{"doc":"233"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":233}}]]}],[{"tag":"Span","contents":[{"line":243,"column":24},{"line":243,"column":27},{"doc":"185"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":185}}]]}],[{"tag":"Span","contents":[{"line":243,"column":28},{"line":243,"column":31},{"doc":"110"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":110}}]]}],[{"tag":"Span","contents":[{"line":243,"column":32},{"line":243,"column":33},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"brown"},[{"tag":"Span","contents":[{"line":245,"column":10},{"line":245,"column":28},{"doc":"RGBA 193 125 17 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":245,"column":10},{"line":245,"column":26},{"doc":"RGBA 193 125 17"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":245,"column":10},{"line":245,"column":22},{"doc":"RGBA 193 125"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":245,"column":10},{"line":245,"column":18},{"doc":"RGBA 193"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":245,"column":10},{"line":245,"column":14},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":245,"column":15},{"line":245,"column":18},{"doc":"193"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":193}}]]}],[{"tag":"Span","contents":[{"line":245,"column":19},{"line":245,"column":22},{"doc":"125"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":125}}]]}],[{"tag":"Span","contents":[{"line":245,"column":24},{"line":245,"column":26},{"doc":"17"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":17}}]]}],[{"tag":"Span","contents":[{"line":245,"column":27},{"line":245,"column":28},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkBrown"},[{"tag":"Span","contents":[{"line":247,"column":14},{"line":247,"column":32},{"doc":"RGBA 143 89 2 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":247,"column":14},{"line":247,"column":30},{"doc":"RGBA 143 89 2"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":247,"column":14},{"line":247,"column":26},{"doc":"RGBA 143 89"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":247,"column":14},{"line":247,"column":22},{"doc":"RGBA 143"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":247,"column":14},{"line":247,"column":18},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":247,"column":19},{"line":247,"column":22},{"doc":"143"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":143}}]]}],[{"tag":"Span","contents":[{"line":247,"column":24},{"line":247,"column":26},{"doc":"89"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":89}}]]}],[{"tag":"Span","contents":[{"line":247,"column":29},{"line":247,"column":30},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],[{"tag":"Span","contents":[{"line":247,"column":31},{"line":247,"column":32},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"black"},[{"tag":"Span","contents":[{"line":250,"column":17},{"line":250,"column":35},{"doc":"RGBA 0 0 0 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":17},{"line":250,"column":32},{"doc":"RGBA 0 0 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":17},{"line":250,"column":28},{"doc":"RGBA 0 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":17},{"line":250,"column":24},{"doc":"RGBA 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":17},{"line":250,"column":21},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":250,"column":23},{"line":250,"column":24},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":250,"column":27},{"line":250,"column":28},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":250,"column":31},{"line":250,"column":32},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":250,"column":34},{"line":250,"column":35},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"white"},[{"tag":"Span","contents":[{"line":252,"column":17},{"line":252,"column":35},{"doc":"RGBA 255 255 255 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":252,"column":17},{"line":252,"column":33},{"doc":"RGBA 255 255 255"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":252,"column":17},{"line":252,"column":29},{"doc":"RGBA 255 255"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":252,"column":17},{"line":252,"column":25},{"doc":"RGBA 255"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":252,"column":17},{"line":252,"column":21},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":252,"column":22},{"line":252,"column":25},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}]]}],[{"tag":"Span","contents":[{"line":252,"column":26},{"line":252,"column":29},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}]]}],[{"tag":"Span","contents":[{"line":252,"column":30},{"line":252,"column":33},{"doc":"255"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":255}}]]}],[{"tag":"Span","contents":[{"line":252,"column":34},{"line":252,"column":35},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightGrey"},[{"tag":"Span","contents":[{"line":255,"column":17},{"line":255,"column":35},{"doc":"RGBA 238 238 236 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":255,"column":17},{"line":255,"column":33},{"doc":"RGBA 238 238 236"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":255,"column":17},{"line":255,"column":29},{"doc":"RGBA 238 238"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":255,"column":17},{"line":255,"column":25},{"doc":"RGBA 238"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":255,"column":17},{"line":255,"column":21},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":255,"column":22},{"line":255,"column":25},{"doc":"238"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":238}}]]}],[{"tag":"Span","contents":[{"line":255,"column":26},{"line":255,"column":29},{"doc":"238"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":238}}]]}],[{"tag":"Span","contents":[{"line":255,"column":30},{"line":255,"column":33},{"doc":"236"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":236}}]]}],[{"tag":"Span","contents":[{"line":255,"column":34},{"line":255,"column":35},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"grey"},[{"tag":"Span","contents":[{"line":257,"column":17},{"line":257,"column":35},{"doc":"RGBA 211 215 207 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":17},{"line":257,"column":33},{"doc":"RGBA 211 215 207"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":17},{"line":257,"column":29},{"doc":"RGBA 211 215"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":17},{"line":257,"column":25},{"doc":"RGBA 211"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":17},{"line":257,"column":21},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":257,"column":22},{"line":257,"column":25},{"doc":"211"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":211}}]]}],[{"tag":"Span","contents":[{"line":257,"column":26},{"line":257,"column":29},{"doc":"215"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":215}}]]}],[{"tag":"Span","contents":[{"line":257,"column":30},{"line":257,"column":33},{"doc":"207"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":207}}]]}],[{"tag":"Span","contents":[{"line":257,"column":34},{"line":257,"column":35},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkGrey"},[{"tag":"Span","contents":[{"line":259,"column":17},{"line":259,"column":35},{"doc":"RGBA 186 189 182 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":259,"column":17},{"line":259,"column":33},{"doc":"RGBA 186 189 182"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":259,"column":17},{"line":259,"column":29},{"doc":"RGBA 186 189"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":259,"column":17},{"line":259,"column":25},{"doc":"RGBA 186"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":259,"column":17},{"line":259,"column":21},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":259,"column":22},{"line":259,"column":25},{"doc":"186"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":186}}]]}],[{"tag":"Span","contents":[{"line":259,"column":26},{"line":259,"column":29},{"doc":"189"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":189}}]]}],[{"tag":"Span","contents":[{"line":259,"column":30},{"line":259,"column":33},{"doc":"182"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":182}}]]}],[{"tag":"Span","contents":[{"line":259,"column":34},{"line":259,"column":35},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightGray"},[{"tag":"Span","contents":[{"line":262,"column":13},{"line":262,"column":31},{"doc":"RGBA 238 238 236 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":262,"column":13},{"line":262,"column":29},{"doc":"RGBA 238 238 236"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":262,"column":13},{"line":262,"column":25},{"doc":"RGBA 238 238"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":262,"column":13},{"line":262,"column":21},{"doc":"RGBA 238"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":262,"column":13},{"line":262,"column":17},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":262,"column":18},{"line":262,"column":21},{"doc":"238"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":238}}]]}],[{"tag":"Span","contents":[{"line":262,"column":22},{"line":262,"column":25},{"doc":"238"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":238}}]]}],[{"tag":"Span","contents":[{"line":262,"column":26},{"line":262,"column":29},{"doc":"236"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":236}}]]}],[{"tag":"Span","contents":[{"line":262,"column":30},{"line":262,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"gray"},[{"tag":"Span","contents":[{"line":264,"column":13},{"line":264,"column":31},{"doc":"RGBA 211 215 207 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":264,"column":13},{"line":264,"column":29},{"doc":"RGBA 211 215 207"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":264,"column":13},{"line":264,"column":25},{"doc":"RGBA 211 215"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":264,"column":13},{"line":264,"column":21},{"doc":"RGBA 211"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":264,"column":13},{"line":264,"column":17},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":264,"column":18},{"line":264,"column":21},{"doc":"211"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":211}}]]}],[{"tag":"Span","contents":[{"line":264,"column":22},{"line":264,"column":25},{"doc":"215"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":215}}]]}],[{"tag":"Span","contents":[{"line":264,"column":26},{"line":264,"column":29},{"doc":"207"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":207}}]]}],[{"tag":"Span","contents":[{"line":264,"column":30},{"line":264,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkGray"},[{"tag":"Span","contents":[{"line":266,"column":13},{"line":266,"column":31},{"doc":"RGBA 186 189 182 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":266,"column":13},{"line":266,"column":29},{"doc":"RGBA 186 189 182"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":266,"column":13},{"line":266,"column":25},{"doc":"RGBA 186 189"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":266,"column":13},{"line":266,"column":21},{"doc":"RGBA 186"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":266,"column":13},{"line":266,"column":17},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":266,"column":18},{"line":266,"column":21},{"doc":"186"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":186}}]]}],[{"tag":"Span","contents":[{"line":266,"column":22},{"line":266,"column":25},{"doc":"189"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":189}}]]}],[{"tag":"Span","contents":[{"line":266,"column":26},{"line":266,"column":29},{"doc":"182"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":182}}]]}],[{"tag":"Span","contents":[{"line":266,"column":30},{"line":266,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lightCharcoal"},[{"tag":"Span","contents":[{"line":269,"column":17},{"line":269,"column":35},{"doc":"RGBA 136 138 133 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":269,"column":17},{"line":269,"column":33},{"doc":"RGBA 136 138 133"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":269,"column":17},{"line":269,"column":29},{"doc":"RGBA 136 138"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":269,"column":17},{"line":269,"column":25},{"doc":"RGBA 136"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":269,"column":17},{"line":269,"column":21},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":269,"column":22},{"line":269,"column":25},{"doc":"136"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":136}}]]}],[{"tag":"Span","contents":[{"line":269,"column":26},{"line":269,"column":29},{"doc":"138"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":138}}]]}],[{"tag":"Span","contents":[{"line":269,"column":30},{"line":269,"column":33},{"doc":"133"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":133}}]]}],[{"tag":"Span","contents":[{"line":269,"column":34},{"line":269,"column":35},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"charcoal"},[{"tag":"Span","contents":[{"line":271,"column":17},{"line":271,"column":35},{"doc":"RGBA 85 87 83 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":271,"column":17},{"line":271,"column":33},{"doc":"RGBA 85 87 83"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":271,"column":17},{"line":271,"column":29},{"doc":"RGBA 85 87"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":271,"column":17},{"line":271,"column":25},{"doc":"RGBA 85"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":271,"column":17},{"line":271,"column":21},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":271,"column":23},{"line":271,"column":25},{"doc":"85"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":85}}]]}],[{"tag":"Span","contents":[{"line":271,"column":27},{"line":271,"column":29},{"doc":"87"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":87}}]]}],[{"tag":"Span","contents":[{"line":271,"column":31},{"line":271,"column":33},{"doc":"83"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":83}}]]}],[{"tag":"Span","contents":[{"line":271,"column":34},{"line":271,"column":35},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"let RGBA : Int -> Int -> Int -> Float -> Color.Color\n    RGBA = \\a b c d -> RGBA a b c d\n    HSLA : Float -> Float -> Float -> Float -> Color.Color\n    HSLA = \\a b c d -> HSLA a b c d\n    rgba : Int -> Int -> Int -> Float -> Color.Color\n    rgba = RGBA\n    rgb : Int -> Int -> Int -> Color.Color\n    rgb = \\r g b -> RGBA r g b 1\n    hsla : Float -> Float -> Float -> Float -> Color.Color\n    hsla = \\hue saturation lightness alpha -> HSLA\n                                                (hue\n                                                   `Basics.-` (Basics.turns\n                                                                 (Basics.toFloat\n                                                                    (Basics.floor\n                                                                       (hue\n                                                                          `Basics./` (2 `Basics.*` Basics.pi))))))\n                                                saturation\n                                                lightness\n                                                alpha\n    hsl : Float -> Float -> Float -> Color.Color\n    hsl = \\hue saturation lightness -> hsla hue saturation lightness 1\n    grayscale : Float -> Color.Color\n    grayscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    greyscale : Float -> Color.Color\n    greyscale = \\p -> HSLA 0 0 (1 `Basics.-` p) 1\n    complement : Color.Color -> Color.Color\n    complement = \\color -> case color of\n                             Color.HSLA h s l a -> hsla\n                                                     (h `Basics.+` (Basics.degrees 180)) s l a\n                             Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                                   in hsla (h `Basics.+` (Basics.degrees 180)) s l a\n    toHsl : Color.Color\n            -> { hue : Float\n               , saturation : Float\n               , lightness : Float\n               , alpha : Float\n               }\n    toHsl = \\color -> case color of\n                        Color.HSLA h s l a -> { hue = h\n                                              , saturation = s\n                                              , lightness = l\n                                              , alpha = a\n                                              }\n                        Color.RGBA r g b a -> let (h,s,l) = rgbToHsl r g b\n                                              in { hue = h, saturation = s, lightness = l, alpha = a\n                                                 }\n    toRgb : Color.Color\n            -> { red : Int, green : Int, blue : Int, alpha : Float }\n    toRgb = \\color -> case color of\n                        Color.RGBA r g b a -> { red = r, green = g, blue = b, alpha = a }\n                        Color.HSLA h s l a -> let (r,g,b) = hslToRgb h s l\n                                              in { red = Basics.round (255 `Basics.*` r)\n                                                 , green = Basics.round (255 `Basics.*` g)\n                                                 , blue = Basics.round (255 `Basics.*` b)\n                                                 , alpha = a\n                                                 }\n    fmod : Float -> Int -> Float\n    fmod = \\f n -> let integer = Basics.floor f\n                   in ((Basics.toFloat (integer `Basics.%` n)) `Basics.+` f)\n                        `Basics.-` (Basics.toFloat integer)\n    rgbToHsl : Int -> Int -> Int -> (Float, Float, Float)\n    rgbToHsl = \\red green blue -> let r = (Basics.toFloat red)\n                                            `Basics./` 255\n                                      g = (Basics.toFloat green) `Basics./` 255\n                                      b = (Basics.toFloat blue) `Basics./` 255\n                                      cMax = Basics.max (Basics.max r g) b\n                                      cMin = Basics.min (Basics.min r g) b\n                                      c = cMax `Basics.-` cMin\n                                      hue = (Basics.degrees 60)\n                                              `Basics.*` (if | cMax `Basics.==` r ->\n                                                                 ((g `Basics.-` b) `Basics./` c)\n                                                                   `fmod` 6\n                                                             | cMax `Basics.==` g ->\n                                                                 ((b `Basics.-` r) `Basics./` c)\n                                                                   `Basics.+` 2\n                                                             | cMax `Basics.==` b ->\n                                                                 ((r `Basics.-` g) `Basics./` c)\n                                                                   `Basics.+` 4)\n                                      lightness = (cMax `Basics.+` cMin) `Basics./` 2\n                                      saturation = if | lightness `Basics.==` 0 -> 0\n                                                      | True ->\n                                                          c `Basics./` (1 `Basics.-` (Basics.abs\n                                                                                        ((2 `Basics.*` lightness)\n                                                                                           `Basics.-` 1)))\n                                  in (hue,saturation,lightness)\n    hslToRgb : Float -> Float -> Float -> (Float, Float, Float)\n    hslToRgb = \\hue\n                saturation\n                lightness -> let chroma = (1 `Basics.-` (Basics.abs\n                                                           ((2 `Basics.*` lightness) `Basics.-` 1)))\n                                            `Basics.*` saturation\n                                 hue' = hue `Basics./` (Basics.degrees 60)\n                                 x = chroma\n                                       `Basics.*` (1 `Basics.-` (Basics.abs\n                                                                   ((fmod hue' 2) `Basics.-` 1)))\n                                 (r,g,b) = if | hue' `Basics.<` 0 -> (0,0,0)\n                                              | hue' `Basics.<` 1 -> (chroma,x,0)\n                                              | hue' `Basics.<` 2 -> (x,chroma,0)\n                                              | hue' `Basics.<` 3 -> (0,chroma,x)\n                                              | hue' `Basics.<` 4 -> (0,x,chroma)\n                                              | hue' `Basics.<` 5 -> (x,0,chroma)\n                                              | hue' `Basics.<` 6 -> (chroma,0,x)\n                                              | Basics.otherwise -> (0,0,0)\n                                 m = lightness `Basics.-` (chroma `Basics./` 2)\n                             in (r `Basics.+` m,g `Basics.+` m,b `Basics.+` m)\n    Linear : (Float, Float)\n             -> (Float, Float) -> List (Float, Color.Color) -> Color.Gradient\n    Linear = \\a b c -> Linear a b c\n    Radial : (Float, Float)\n             -> Float\n             -> (Float, Float)\n             -> Float\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    Radial = \\a b c d e -> Radial a b c d e\n    linear : (number, number)\n             -> (number, number) -> List (Float, Color.Color) -> Color.Gradient\n    linear = Linear\n    radial : (number, number)\n             -> number\n             -> (number, number)\n             -> number\n             -> List (Float, Color.Color)\n             -> Color.Gradient\n    radial = Radial\n    lightRed : Color.Color\n    lightRed = RGBA 239 41 41 1\n    red : Color.Color\n    red = RGBA 204 0 0 1\n    darkRed : Color.Color\n    darkRed = RGBA 164 0 0 1\n    lightOrange : Color.Color\n    lightOrange = RGBA 252 175 62 1\n    orange : Color.Color\n    orange = RGBA 245 121 0 1\n    darkOrange : Color.Color\n    darkOrange = RGBA 206 92 0 1\n    lightYellow : Color.Color\n    lightYellow = RGBA 255 233 79 1\n    yellow : Color.Color\n    yellow = RGBA 237 212 0 1\n    darkYellow : Color.Color\n    darkYellow = RGBA 196 160 0 1\n    lightGreen : Color.Color\n    lightGreen = RGBA 138 226 52 1\n    green : Color.Color\n    green = RGBA 115 210 22 1\n    darkGreen : Color.Color\n    darkGreen = RGBA 78 154 6 1\n    lightBlue : Color.Color\n    lightBlue = RGBA 114 159 207 1\n    blue : Color.Color\n    blue = RGBA 52 101 164 1\n    darkBlue : Color.Color\n    darkBlue = RGBA 32 74 135 1\n    lightPurple : Color.Color\n    lightPurple = RGBA 173 127 168 1\n    purple : Color.Color\n    purple = RGBA 117 80 123 1\n    darkPurple : Color.Color\n    darkPurple = RGBA 92 53 102 1\n    lightBrown : Color.Color\n    lightBrown = RGBA 233 185 110 1\n    brown : Color.Color\n    brown = RGBA 193 125 17 1\n    darkBrown : Color.Color\n    darkBrown = RGBA 143 89 2 1\n    black : Color.Color\n    black = RGBA 0 0 0 1\n    white : Color.Color\n    white = RGBA 255 255 255 1\n    lightGrey : Color.Color\n    lightGrey = RGBA 238 238 236 1\n    grey : Color.Color\n    grey = RGBA 211 215 207 1\n    darkGrey : Color.Color\n    darkGrey = RGBA 186 189 182 1\n    lightGray : Color.Color\n    lightGray = RGBA 238 238 236 1\n    gray : Color.Color\n    gray = RGBA 211 215 207 1\n    darkGray : Color.Color\n    darkGray = RGBA 186 189 182 1\n    lightCharcoal : Color.Color\n    lightCharcoal = RGBA 136 138 133 1\n    charcoal : Color.Color\n    charcoal = RGBA 85 87 83 1\n    darkCharcoal : Color.Color\n    darkCharcoal = RGBA 46 52 54 1\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"darkCharcoal"},[{"tag":"Span","contents":[{"line":273,"column":17},{"line":273,"column":35},{"doc":"RGBA 46 52 54 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":273,"column":17},{"line":273,"column":33},{"doc":"RGBA 46 52 54"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":273,"column":17},{"line":273,"column":29},{"doc":"RGBA 46 52"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":273,"column":17},{"line":273,"column":25},{"doc":"RGBA 46"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":273,"column":17},{"line":273,"column":21},{"doc":"RGBA"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"RGBA"}}],[{"tag":"Span","contents":[{"line":273,"column":23},{"line":273,"column":25},{"doc":"46"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":46}}]]}],[{"tag":"Span","contents":[{"line":273,"column":27},{"line":273,"column":29},{"doc":"52"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":52}}]]}],[{"tag":"Span","contents":[{"line":273,"column":31},{"line":273,"column":33},{"doc":"54"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":54}}]]}],[{"tag":"Span","contents":[{"line":273,"column":34},{"line":273,"column":35},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Basics"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}]],"names":["Color"],"exports":[{"tag":"Union","contents":["Color",{"_explicits":["RGBA","HSLA"],"_open":false}]},{"tag":"Value","contents":"rgba"},{"tag":"Value","contents":"rgb"},{"tag":"Value","contents":"hsla"},{"tag":"Value","contents":"hsl"},{"tag":"Value","contents":"grayscale"},{"tag":"Value","contents":"greyscale"},{"tag":"Value","contents":"complement"},{"tag":"Value","contents":"toHsl"},{"tag":"Value","contents":"toRgb"},{"tag":"Value","contents":"fmod"},{"tag":"Value","contents":"rgbToHsl"},{"tag":"Value","contents":"hslToRgb"},{"tag":"Union","contents":["Gradient",{"_explicits":["Linear","Radial"],"_open":false}]},{"tag":"Value","contents":"linear"},{"tag":"Value","contents":"radial"},{"tag":"Value","contents":"lightRed"},{"tag":"Value","contents":"red"},{"tag":"Value","contents":"darkRed"},{"tag":"Value","contents":"lightOrange"},{"tag":"Value","contents":"orange"},{"tag":"Value","contents":"darkOrange"},{"tag":"Value","contents":"lightYellow"},{"tag":"Value","contents":"yellow"},{"tag":"Value","contents":"darkYellow"},{"tag":"Value","contents":"lightGreen"},{"tag":"Value","contents":"green"},{"tag":"Value","contents":"darkGreen"},{"tag":"Value","contents":"lightBlue"},{"tag":"Value","contents":"blue"},{"tag":"Value","contents":"darkBlue"},{"tag":"Value","contents":"lightPurple"},{"tag":"Value","contents":"purple"},{"tag":"Value","contents":"darkPurple"},{"tag":"Value","contents":"lightBrown"},{"tag":"Value","contents":"brown"},{"tag":"Value","contents":"darkBrown"},{"tag":"Value","contents":"black"},{"tag":"Value","contents":"white"},{"tag":"Value","contents":"lightGrey"},{"tag":"Value","contents":"grey"},{"tag":"Value","contents":"darkGrey"},{"tag":"Value","contents":"lightGray"},{"tag":"Value","contents":"gray"},{"tag":"Value","contents":"darkGray"},{"tag":"Value","contents":"lightCharcoal"},{"tag":"Value","contents":"charcoal"},{"tag":"Value","contents":"darkCharcoal"}]}
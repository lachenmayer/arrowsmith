{"path":"","body":{"fixities":[],"aliases":{"Seed":[[],{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]},"datatypes":{"State":[[],[["State",[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]]],"Generator":[["a"],[["Generator",[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]}]]}]}]]]]},"types":{"magicNum3":{"tag":"Var","contents":"number"},"State":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]}]},"magicNum8":{"tag":"Var","contents":"number"},"Seed":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]}]}]}]}]},"next":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]},"list":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]]}]}]},"magicNum5":{"tag":"Var","contents":"number"},"split":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]},"magicNum2":{"tag":"Var","contents":"number"},"initState":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"customGenerator":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]}]},"iLogBase":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]}]},"magicNum4":{"tag":"Var","contents":"number"},"listHelp":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]}]]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]}]]}]}]}]}]},"magicNum1":{"tag":"Var","contents":"number"},"minInt":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},"initialSeed":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]}]},"maxInt":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},"range":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]},"magicNum0":{"tag":"Var","contents":"number"},"pair":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"b"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]}]]}]}]},"magicNum7":{"tag":"Var","contents":"number"},"float":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]},"Generator":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]}]},"generate":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]],null]}]}]]}]}]},"int":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}]},"magicNum6":{"tag":"Var","contents":"number"}},"program":[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum8"},[{"tag":"Span","contents":[{"line":281,"column":13},{"line":281,"column":23},{"doc":"2147483562"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2147483562}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"range"},[{"tag":"Span","contents":[{"line":314,"column":6},{"line":314,"column":18},{"doc":"(0,magicNum8)"}]},{"tag":"Lambda","contents":[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":314,"column":6},{"line":314,"column":18},{"doc":"(0,magicNum8)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":314,"column":6},{"line":314,"column":7},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":314,"column":9},{"line":314,"column":18},{"doc":"magicNum8"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum8"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum7"},[{"tag":"Span","contents":[{"line":280,"column":13},{"line":280,"column":23},{"doc":"2137383399"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2137383399}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum6"},[{"tag":"Span","contents":[{"line":279,"column":13},{"line":279,"column":23},{"doc":"2147483563"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2147483563}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum5"},[{"tag":"Span","contents":[{"line":278,"column":13},{"line":278,"column":17},{"doc":"3791"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":3791}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum4"},[{"tag":"Span","contents":[{"line":277,"column":13},{"line":277,"column":18},{"doc":"40692"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":40692}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum3"},[{"tag":"Span","contents":[{"line":276,"column":13},{"line":276,"column":18},{"doc":"52774"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":52774}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum2"},[{"tag":"Span","contents":[{"line":275,"column":13},{"line":275,"column":18},{"doc":"12211"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":12211}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum1"},[{"tag":"Span","contents":[{"line":274,"column":13},{"line":274,"column":18},{"doc":"53668"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":53668}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"magicNum0"},[{"tag":"Span","contents":[{"line":273,"column":13},{"line":273,"column":18},{"doc":"40014"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":40014}}],null]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"generate"},[{"tag":"Span","contents":[{"line":247,"column":5},{"line":247,"column":19},{"doc":"generator seed"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"},[{"tag":"Var","contents":"generator"}]]},[{"tag":"Span","contents":[{"line":247,"column":5},{"line":247,"column":19},{"doc":"generator seed"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"seed"},[{"tag":"Span","contents":[{"line":247,"column":5},{"line":247,"column":19},{"doc":"generator seed"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":247,"column":5},{"line":247,"column":14},{"doc":"generator"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"generator"}}],[{"tag":"Span","contents":[{"line":247,"column":15},{"line":247,"column":19},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Seed"},[{"tag":"None","contents":{"doc":"{ state = a, next = b, split = c, range = d }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"{ state = a, next = b, split = c, range = d }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"{ state = a, next = b, split = c, range = d }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"{ state = a, next = b, split = c, range = d }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"{ state = a, next = b, split = c, range = d }"}},{"tag":"Record","contents":[["state",[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]],["next",[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]],["split",[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]],["range",[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"State"},[{"tag":"None","contents":{"doc":"State a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"State a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"State a b"}},{"tag":"Data","contents":["State",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},[]]}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"initState"},[{"tag":"Span","contents":[{"line":265,"column":5},{"line":270,"column":28},{"doc":"let s = max s' (-s')\n    q = s // (magicNum6 - 1)\n    s1 = s % (magicNum6 - 1)\n    s2 = q % (magicNum7 - 1)\nin State (s1 + 1) (s2 + 1)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"s'"},[{"tag":"Span","contents":[{"line":265,"column":5},{"line":270,"column":28},{"doc":"let s = max s' (-s')\n    q = s // (magicNum6 - 1)\n    s1 = s % (magicNum6 - 1)\n    s2 = q % (magicNum7 - 1)\nin State (s1 + 1) (s2 + 1)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"s"},[{"tag":"Span","contents":[{"line":265,"column":13},{"line":265,"column":23},{"doc":"max s' (-s')"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":265,"column":13},{"line":265,"column":19},{"doc":"max s'"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":265,"column":13},{"line":265,"column":16},{"doc":"max"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"max"}}],[{"tag":"Span","contents":[{"line":265,"column":17},{"line":265,"column":19},{"doc":"s'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s'"}}]]}],[{"tag":"Span","contents":[{"line":265,"column":20},{"line":265,"column":23},{"doc":"-s'"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":265,"column":20},{"line":265,"column":23},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}],[{"tag":"Span","contents":[{"line":265,"column":21},{"line":265,"column":23},{"doc":"s'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s'"}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":265,"column":5},{"line":270,"column":28},{"doc":"let s = max s' (-s')\n    q = s // (magicNum6 - 1)\n    s1 = s % (magicNum6 - 1)\n    s2 = q % (magicNum7 - 1)\nin State (s1 + 1) (s2 + 1)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"q"},[{"tag":"Span","contents":[{"line":266,"column":14},{"line":266,"column":31},{"doc":"s // (magicNum6 - 1)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"//"},[{"tag":"Span","contents":[{"line":266,"column":14},{"line":266,"column":15},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}],[{"tag":"Span","contents":[{"line":266,"column":20},{"line":266,"column":31},{"doc":"magicNum6 - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":266,"column":20},{"line":266,"column":29},{"doc":"magicNum6"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum6"}}],[{"tag":"Span","contents":[{"line":266,"column":30},{"line":266,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":265,"column":5},{"line":270,"column":28},{"doc":"let s = max s' (-s')\n    q = s // (magicNum6 - 1)\n    s1 = s % (magicNum6 - 1)\n    s2 = q % (magicNum7 - 1)\nin State (s1 + 1) (s2 + 1)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"s2"},[{"tag":"Span","contents":[{"line":268,"column":14},{"line":268,"column":31},{"doc":"q % (magicNum7 - 1)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"%"},[{"tag":"Span","contents":[{"line":268,"column":14},{"line":268,"column":15},{"doc":"q"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"q"}}],[{"tag":"Span","contents":[{"line":268,"column":20},{"line":268,"column":31},{"doc":"magicNum7 - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":268,"column":20},{"line":268,"column":29},{"doc":"magicNum7"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum7"}}],[{"tag":"Span","contents":[{"line":268,"column":30},{"line":268,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":265,"column":5},{"line":270,"column":28},{"doc":"let s = max s' (-s')\n    q = s // (magicNum6 - 1)\n    s1 = s % (magicNum6 - 1)\n    s2 = q % (magicNum7 - 1)\nin State (s1 + 1) (s2 + 1)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"s1"},[{"tag":"Span","contents":[{"line":267,"column":14},{"line":267,"column":31},{"doc":"s % (magicNum6 - 1)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"%"},[{"tag":"Span","contents":[{"line":267,"column":14},{"line":267,"column":15},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}],[{"tag":"Span","contents":[{"line":267,"column":20},{"line":267,"column":31},{"doc":"magicNum6 - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":267,"column":20},{"line":267,"column":29},{"doc":"magicNum6"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum6"}}],[{"tag":"Span","contents":[{"line":267,"column":30},{"line":267,"column":31},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":270,"column":9},{"line":270,"column":27},{"doc":"State (s1 + 1) (s2 + 1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":270,"column":9},{"line":270,"column":20},{"doc":"State (s1 + 1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":270,"column":9},{"line":270,"column":14},{"doc":"State"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"State"}}],[{"tag":"Span","contents":[{"line":270,"column":16},{"line":270,"column":20},{"doc":"s1 + 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":270,"column":16},{"line":270,"column":18},{"doc":"s1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1"}}],[{"tag":"Span","contents":[{"line":270,"column":19},{"line":270,"column":20},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],[{"tag":"Span","contents":[{"line":270,"column":23},{"line":270,"column":27},{"doc":"s2 + 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":270,"column":23},{"line":270,"column":25},{"doc":"s2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2"}}],[{"tag":"Span","contents":[{"line":270,"column":26},{"line":270,"column":27},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"next"},[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"State"},[{"tag":"Var","contents":"s1"},{"tag":"Var","contents":"s2"}]]},[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"k'"},[{"tag":"Span","contents":[{"line":294,"column":14},{"line":294,"column":29},{"doc":"s2 // magicNum3"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"//"},[{"tag":"Span","contents":[{"line":294,"column":14},{"line":294,"column":16},{"doc":"s2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2"}}],[{"tag":"Span","contents":[{"line":294,"column":20},{"line":294,"column":29},{"doc":"magicNum3"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum3"}}]]}],null]],[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"s2'"},[{"tag":"Span","contents":[{"line":295,"column":15},{"line":295,"column":65},{"doc":"(magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":295,"column":15},{"line":295,"column":47},{"doc":"magicNum4 * (s2 - (k' * magicNum3))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":295,"column":15},{"line":295,"column":24},{"doc":"magicNum4"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum4"}}],[{"tag":"Span","contents":[{"line":295,"column":28},{"line":295,"column":47},{"doc":"s2 - (k' * magicNum3)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":295,"column":28},{"line":295,"column":30},{"doc":"s2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2"}}],[{"tag":"Span","contents":[{"line":295,"column":33},{"line":295,"column":47},{"doc":"k' * magicNum3"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":295,"column":33},{"line":295,"column":35},{"doc":"k'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k'"}}],[{"tag":"Span","contents":[{"line":295,"column":38},{"line":295,"column":47},{"doc":"magicNum3"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum3"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":295,"column":51},{"line":295,"column":65},{"doc":"k' * magicNum5"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":295,"column":51},{"line":295,"column":53},{"doc":"k'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k'"}}],[{"tag":"Span","contents":[{"line":295,"column":56},{"line":295,"column":65},{"doc":"magicNum5"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum5"}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"s2''"},[{"tag":"Span","contents":[{"line":296,"column":16},{"line":296,"column":56},{"doc":"if | s2' < 0 -> s2' + magicNum7\n   | True -> s2'"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":296,"column":19},{"line":296,"column":26},{"doc":"s2' < 0"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":296,"column":19},{"line":296,"column":22},{"doc":"s2'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2'"}}],[{"tag":"Span","contents":[{"line":296,"column":25},{"line":296,"column":26},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":296,"column":32},{"line":296,"column":47},{"doc":"s2' + magicNum7"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":296,"column":32},{"line":296,"column":35},{"doc":"s2'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2'"}}],[{"tag":"Span","contents":[{"line":296,"column":38},{"line":296,"column":47},{"doc":"magicNum7"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum7"}}]]}]],[[{"tag":"Span","contents":[{"line":296,"column":53},{"line":296,"column":56},{"doc":"s2'"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":296,"column":53},{"line":296,"column":56},{"doc":"s2'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2'"}}]]]}],null]],[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"k"},[{"tag":"Span","contents":[{"line":291,"column":13},{"line":291,"column":28},{"doc":"s1 // magicNum1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"//"},[{"tag":"Span","contents":[{"line":291,"column":13},{"line":291,"column":15},{"doc":"s1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1"}}],[{"tag":"Span","contents":[{"line":291,"column":19},{"line":291,"column":28},{"doc":"magicNum1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum1"}}]]}],null]],[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"s1'"},[{"tag":"Span","contents":[{"line":292,"column":15},{"line":292,"column":63},{"doc":"(magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":292,"column":15},{"line":292,"column":46},{"doc":"magicNum0 * (s1 - (k * magicNum1))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":292,"column":15},{"line":292,"column":24},{"doc":"magicNum0"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum0"}}],[{"tag":"Span","contents":[{"line":292,"column":28},{"line":292,"column":46},{"doc":"s1 - (k * magicNum1)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":292,"column":28},{"line":292,"column":30},{"doc":"s1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1"}}],[{"tag":"Span","contents":[{"line":292,"column":33},{"line":292,"column":46},{"doc":"k * magicNum1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":292,"column":33},{"line":292,"column":34},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}],[{"tag":"Span","contents":[{"line":292,"column":37},{"line":292,"column":46},{"doc":"magicNum1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum1"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":292,"column":50},{"line":292,"column":63},{"doc":"k * magicNum2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":292,"column":50},{"line":292,"column":51},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}],[{"tag":"Span","contents":[{"line":292,"column":54},{"line":292,"column":63},{"doc":"magicNum2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum2"}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"s1''"},[{"tag":"Span","contents":[{"line":293,"column":16},{"line":293,"column":56},{"doc":"if | s1' < 0 -> s1' + magicNum6\n   | True -> s1'"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":293,"column":19},{"line":293,"column":26},{"doc":"s1' < 0"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":293,"column":19},{"line":293,"column":22},{"doc":"s1'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1'"}}],[{"tag":"Span","contents":[{"line":293,"column":25},{"line":293,"column":26},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":293,"column":32},{"line":293,"column":47},{"doc":"s1' + magicNum6"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":293,"column":32},{"line":293,"column":35},{"doc":"s1'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1'"}}],[{"tag":"Span","contents":[{"line":293,"column":38},{"line":293,"column":47},{"doc":"magicNum6"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum6"}}]]}]],[[{"tag":"Span","contents":[{"line":293,"column":53},{"line":293,"column":56},{"doc":"s1'"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":293,"column":53},{"line":293,"column":56},{"doc":"s1'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1'"}}]]]}],null]],[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"z"},[{"tag":"Span","contents":[{"line":297,"column":13},{"line":297,"column":24},{"doc":"s1'' - s2''"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":297,"column":13},{"line":297,"column":17},{"doc":"s1''"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1''"}}],[{"tag":"Span","contents":[{"line":297,"column":20},{"line":297,"column":24},{"doc":"s2''"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2''"}}]]}],null]],[{"tag":"Span","contents":[{"line":291,"column":5},{"line":300,"column":30},{"doc":"let k = s1 // magicNum1\n    s1' = (magicNum0 * (s1 - (k * magicNum1))) - (k * magicNum2)\n    s1'' = if | s1' < 0 -> s1' + magicNum6\n              | True -> s1'\n    k' = s2 // magicNum3\n    s2' = (magicNum4 * (s2 - (k' * magicNum3))) - (k' * magicNum5)\n    s2'' = if | s2' < 0 -> s2' + magicNum7\n              | True -> s2'\n    z = s1'' - s2''\n    z' = if | z < 1 -> z + magicNum8\n            | True -> z\nin (z',State s1'' s2'')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"z'"},[{"tag":"Span","contents":[{"line":298,"column":14},{"line":298,"column":48},{"doc":"if | z < 1 -> z + magicNum8\n   | True -> z"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":298,"column":17},{"line":298,"column":22},{"doc":"z < 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":298,"column":17},{"line":298,"column":18},{"doc":"z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"z"}}],[{"tag":"Span","contents":[{"line":298,"column":21},{"line":298,"column":22},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],[{"tag":"Span","contents":[{"line":298,"column":28},{"line":298,"column":41},{"doc":"z + magicNum8"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":298,"column":28},{"line":298,"column":29},{"doc":"z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"z"}}],[{"tag":"Span","contents":[{"line":298,"column":32},{"line":298,"column":41},{"doc":"magicNum8"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum8"}}]]}]],[[{"tag":"Span","contents":[{"line":298,"column":47},{"line":298,"column":48},{"doc":"z"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":298,"column":47},{"line":298,"column":48},{"doc":"z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"z"}}]]]}],null]],[{"tag":"Span","contents":[{"line":300,"column":10},{"line":300,"column":29},{"doc":"(z',State s1'' s2'')"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":300,"column":10},{"line":300,"column":12},{"doc":"z'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"z'"}}],[{"tag":"Span","contents":[{"line":300,"column":14},{"line":300,"column":29},{"doc":"State s1'' s2''"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":300,"column":14},{"line":300,"column":24},{"doc":"State s1''"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":300,"column":14},{"line":300,"column":19},{"doc":"State"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"State"}}],[{"tag":"Span","contents":[{"line":300,"column":20},{"line":300,"column":24},{"doc":"s1''"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1''"}}]]}],[{"tag":"Span","contents":[{"line":300,"column":25},{"line":300,"column":29},{"doc":"s2''"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2''"}}]]}]]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"split"},[{"tag":"Span","contents":[{"line":305,"column":5},{"line":309,"column":43},{"doc":"let new_s1 = if | s1 == (magicNum6 - 1) -> 1\n                | True -> s1 + 1\n    new_s2 = if | s2 == 1 -> magicNum7 - 1\n                | True -> s2 - 1\n    State t1 t2 = snd (next std)\nin (State new_s1 t2,State t1 new_s2)"}]},{"tag":"Lambda","contents":[{"tag":"Alias","contents":["std",{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"State"},[{"tag":"Var","contents":"s1"},{"tag":"Var","contents":"s2"}]]}]},[{"tag":"Span","contents":[{"line":305,"column":5},{"line":309,"column":43},{"doc":"let new_s1 = if | s1 == (magicNum6 - 1) -> 1\n                | True -> s1 + 1\n    new_s2 = if | s2 == 1 -> magicNum7 - 1\n                | True -> s2 - 1\n    State t1 t2 = snd (next std)\nin (State new_s1 t2,State t1 new_s2)"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"State"},[{"tag":"Var","contents":"t1"},{"tag":"Var","contents":"t2"}]]},[{"tag":"Span","contents":[{"line":307,"column":25},{"line":307,"column":38},{"doc":"snd (next std)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":307,"column":25},{"line":307,"column":28},{"doc":"snd"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"snd"}}],[{"tag":"Span","contents":[{"line":307,"column":30},{"line":307,"column":38},{"doc":"next std"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":307,"column":30},{"line":307,"column":34},{"doc":"next"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"next"}}],[{"tag":"Span","contents":[{"line":307,"column":35},{"line":307,"column":38},{"doc":"std"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"std"}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":305,"column":5},{"line":309,"column":43},{"doc":"let new_s1 = if | s1 == (magicNum6 - 1) -> 1\n                | True -> s1 + 1\n    new_s2 = if | s2 == 1 -> magicNum7 - 1\n                | True -> s2 - 1\n    State t1 t2 = snd (next std)\nin (State new_s1 t2,State t1 new_s2)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"new_s2"},[{"tag":"Span","contents":[{"line":306,"column":18},{"line":306,"column":57},{"doc":"if | s2 == 1 -> magicNum7 - 1\n   | True -> s2 - 1"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":306,"column":21},{"line":306,"column":28},{"doc":"s2 == 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"=="},[{"tag":"Span","contents":[{"line":306,"column":21},{"line":306,"column":23},{"doc":"s2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2"}}],[{"tag":"Span","contents":[{"line":306,"column":27},{"line":306,"column":28},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],[{"tag":"Span","contents":[{"line":306,"column":34},{"line":306,"column":45},{"doc":"magicNum7 - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":306,"column":34},{"line":306,"column":43},{"doc":"magicNum7"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum7"}}],[{"tag":"Span","contents":[{"line":306,"column":44},{"line":306,"column":45},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]],[[{"tag":"Span","contents":[{"line":306,"column":51},{"line":306,"column":57},{"doc":"s2 - 1"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":306,"column":51},{"line":306,"column":57},{"doc":"s2 - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":306,"column":51},{"line":306,"column":53},{"doc":"s2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s2"}}],[{"tag":"Span","contents":[{"line":306,"column":56},{"line":306,"column":57},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]]}],null]],[{"tag":"Span","contents":[{"line":305,"column":5},{"line":309,"column":43},{"doc":"let new_s1 = if | s1 == (magicNum6 - 1) -> 1\n                | True -> s1 + 1\n    new_s2 = if | s2 == 1 -> magicNum7 - 1\n                | True -> s2 - 1\n    State t1 t2 = snd (next std)\nin (State new_s1 t2,State t1 new_s2)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"new_s1"},[{"tag":"Span","contents":[{"line":305,"column":18},{"line":305,"column":57},{"doc":"if | s1 == (magicNum6 - 1) -> 1\n   | True -> s1 + 1"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":305,"column":21},{"line":305,"column":38},{"doc":"s1 == (magicNum6 - 1)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"=="},[{"tag":"Span","contents":[{"line":305,"column":21},{"line":305,"column":23},{"doc":"s1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1"}}],[{"tag":"Span","contents":[{"line":305,"column":27},{"line":305,"column":38},{"doc":"magicNum6 - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":305,"column":27},{"line":305,"column":36},{"doc":"magicNum6"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"magicNum6"}}],[{"tag":"Span","contents":[{"line":305,"column":37},{"line":305,"column":38},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],[{"tag":"Span","contents":[{"line":305,"column":44},{"line":305,"column":45},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]],[[{"tag":"Span","contents":[{"line":305,"column":51},{"line":305,"column":57},{"doc":"s1 + 1"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":305,"column":51},{"line":305,"column":57},{"doc":"s1 + 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":305,"column":51},{"line":305,"column":53},{"doc":"s1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s1"}}],[{"tag":"Span","contents":[{"line":305,"column":56},{"line":305,"column":57},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]]}],null]],[{"tag":"Span","contents":[{"line":309,"column":10},{"line":309,"column":42},{"doc":"(State new_s1 t2,State t1 new_s2)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":309,"column":10},{"line":309,"column":25},{"doc":"State new_s1 t2"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":309,"column":10},{"line":309,"column":22},{"doc":"State new_s1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":309,"column":10},{"line":309,"column":15},{"doc":"State"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"State"}}],[{"tag":"Span","contents":[{"line":309,"column":16},{"line":309,"column":22},{"doc":"new_s1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"new_s1"}}]]}],[{"tag":"Span","contents":[{"line":309,"column":23},{"line":309,"column":25},{"doc":"t2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t2"}}]]}],[{"tag":"Span","contents":[{"line":309,"column":27},{"line":309,"column":42},{"doc":"State t1 new_s2"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":309,"column":27},{"line":309,"column":35},{"doc":"State t1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":309,"column":27},{"line":309,"column":32},{"doc":"State"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"State"}}],[{"tag":"Span","contents":[{"line":309,"column":33},{"line":309,"column":35},{"doc":"t1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"t1"}}]]}],[{"tag":"Span","contents":[{"line":309,"column":36},{"line":309,"column":42},{"doc":"new_s2"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"new_s2"}}]]}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"initialSeed"},[{"tag":"Span","contents":[{"line":257,"column":5},{"line":257,"column":40},{"doc":"Seed (initState n) next split range"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":257,"column":5},{"line":257,"column":40},{"doc":"Seed (initState n) next split range"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":5},{"line":257,"column":34},{"doc":"Seed (initState n) next split"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":5},{"line":257,"column":28},{"doc":"Seed (initState n) next"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":5},{"line":257,"column":22},{"doc":"Seed (initState n)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":5},{"line":257,"column":9},{"doc":"Seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Seed"}}],[{"tag":"Span","contents":[{"line":257,"column":11},{"line":257,"column":22},{"doc":"initState n"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":257,"column":11},{"line":257,"column":20},{"doc":"initState"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"initState"}}],[{"tag":"Span","contents":[{"line":257,"column":21},{"line":257,"column":22},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}]]}],[{"tag":"Span","contents":[{"line":257,"column":24},{"line":257,"column":28},{"doc":"next"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"next"}}]]}],[{"tag":"Span","contents":[{"line":257,"column":29},{"line":257,"column":34},{"doc":"split"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"split"}}]]}],[{"tag":"Span","contents":[{"line":257,"column":35},{"line":257,"column":40},{"doc":"range"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"range"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Generator"},[{"tag":"None","contents":{"doc":"Generator a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Generator a"}},{"tag":"Data","contents":["Generator",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"customGenerator"},[{"tag":"Span","contents":[{"line":211,"column":5},{"line":211,"column":23},{"doc":"Generator generate"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"generate"},[{"tag":"Span","contents":[{"line":211,"column":5},{"line":211,"column":23},{"doc":"Generator generate"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":211,"column":5},{"line":211,"column":14},{"doc":"Generator"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Generator"}}],[{"tag":"Span","contents":[{"line":211,"column":15},{"line":211,"column":23},{"doc":"generate"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"generate"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]}]]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"listHelp"},[{"tag":"Span","contents":[{"line":189,"column":5},{"line":193,"column":58},{"doc":"if | n < 1 -> (List.reverse list,seed)\n   | True ->\n       let (value,seed') = generate seed\n       in listHelp (value :: list) (n - 1) generate seed'"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"list"},[{"tag":"Span","contents":[{"line":189,"column":5},{"line":193,"column":58},{"doc":"if | n < 1 -> (List.reverse list,seed)\n   | True ->\n       let (value,seed') = generate seed\n       in listHelp (value :: list) (n - 1) generate seed'"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":189,"column":5},{"line":193,"column":58},{"doc":"if | n < 1 -> (List.reverse list,seed)\n   | True ->\n       let (value,seed') = generate seed\n       in listHelp (value :: list) (n - 1) generate seed'"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"generate"},[{"tag":"Span","contents":[{"line":189,"column":5},{"line":193,"column":58},{"doc":"if | n < 1 -> (List.reverse list,seed)\n   | True ->\n       let (value,seed') = generate seed\n       in listHelp (value :: list) (n - 1) generate seed'"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"seed"},[{"tag":"Span","contents":[{"line":189,"column":5},{"line":193,"column":58},{"doc":"if | n < 1 -> (List.reverse list,seed)\n   | True ->\n       let (value,seed') = generate seed\n       in listHelp (value :: list) (n - 1) generate seed'"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":189,"column":8},{"line":189,"column":13},{"doc":"n < 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":189,"column":8},{"line":189,"column":9},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}],[{"tag":"Span","contents":[{"line":189,"column":12},{"line":189,"column":13},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],[{"tag":"Span","contents":[{"line":190,"column":11},{"line":190,"column":34},{"doc":"(List.reverse list,seed)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":190,"column":11},{"line":190,"column":28},{"doc":"List.reverse list"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":190,"column":11},{"line":190,"column":23},{"doc":"List.reverse"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"reverse"}}],[{"tag":"Span","contents":[{"line":190,"column":24},{"line":190,"column":28},{"doc":"list"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"list"}}]]}],[{"tag":"Span","contents":[{"line":190,"column":30},{"line":190,"column":34},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}]]]}]],[[{"tag":"Span","contents":[{"line":192,"column":9},{"line":193,"column":58},{"doc":"let (value,seed') = generate seed\nin listHelp (value :: list) (n - 1) generate seed'"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":192,"column":9},{"line":193,"column":58},{"doc":"let (value,seed') = generate seed\nin listHelp (value :: list) (n - 1) generate seed'"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"value"},{"tag":"Var","contents":"seed'"}]]},[{"tag":"Span","contents":[{"line":192,"column":30},{"line":192,"column":43},{"doc":"generate seed"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":192,"column":30},{"line":192,"column":38},{"doc":"generate"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"generate"}}],[{"tag":"Span","contents":[{"line":192,"column":39},{"line":192,"column":43},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}]]}],null]],[{"tag":"Span","contents":[{"line":193,"column":13},{"line":193,"column":58},{"doc":"listHelp (value :: list) (n - 1) generate seed'"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":193,"column":13},{"line":193,"column":52},{"doc":"listHelp (value :: list) (n - 1) generate"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":193,"column":13},{"line":193,"column":42},{"doc":"listHelp (value :: list) (n - 1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":193,"column":13},{"line":193,"column":36},{"doc":"listHelp (value :: list)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":193,"column":13},{"line":193,"column":21},{"doc":"listHelp"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"listHelp"}}],[{"tag":"Span","contents":[{"line":193,"column":23},{"line":193,"column":36},{"doc":"value :: list"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["List"]},"name":"::"},[{"tag":"Span","contents":[{"line":193,"column":23},{"line":193,"column":28},{"doc":"value"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"value"}}],[{"tag":"Span","contents":[{"line":193,"column":32},{"line":193,"column":36},{"doc":"list"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"list"}}]]}]]}],[{"tag":"Span","contents":[{"line":193,"column":39},{"line":193,"column":42},{"doc":"n - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":193,"column":39},{"line":193,"column":40},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}],[{"tag":"Span","contents":[{"line":193,"column":41},{"line":193,"column":42},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],[{"tag":"Span","contents":[{"line":193,"column":44},{"line":193,"column":52},{"doc":"generate"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"generate"}}]]}],[{"tag":"Span","contents":[{"line":193,"column":53},{"line":193,"column":58},{"doc":"seed'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed'"}}]]}]]}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]}]]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Seed"},{"tag":"Record","contents":[[["state",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}],["next",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["split",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}}]]}]}],["range",{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"State"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],null]}]}]]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"list"},[{"tag":"Span","contents":[{"line":183,"column":3},{"line":184,"column":32},{"doc":"Generator <| (\\seed -> listHelp [] n generate seed)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":183,"column":3},{"line":184,"column":32},{"doc":"Generator <| (\\seed -> listHelp [] n generate seed)"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"},[{"tag":"Var","contents":"generate"}]]},[{"tag":"Span","contents":[{"line":183,"column":3},{"line":184,"column":32},{"doc":"Generator <| (\\seed -> listHelp [] n generate seed)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<|"},[{"tag":"Span","contents":[{"line":183,"column":3},{"line":183,"column":12},{"doc":"Generator"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Generator"}}],[{"tag":"Span","contents":[{"line":184,"column":5},{"line":184,"column":32},{"doc":"listHelp [] n generate seed"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"seed"},[{"tag":"Span","contents":[{"line":184,"column":5},{"line":184,"column":32},{"doc":"listHelp [] n generate seed"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":184,"column":5},{"line":184,"column":27},{"doc":"listHelp [] n generate"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":184,"column":5},{"line":184,"column":18},{"doc":"listHelp [] n"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":184,"column":5},{"line":184,"column":16},{"doc":"listHelp []"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":184,"column":5},{"line":184,"column":13},{"doc":"listHelp"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"listHelp"}}],[{"tag":"Span","contents":[{"line":184,"column":14},{"line":184,"column":16},{"doc":"[]"}]},{"tag":"ExplicitList","contents":[]}]]}],[{"tag":"Span","contents":[{"line":184,"column":17},{"line":184,"column":18},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}],[{"tag":"Span","contents":[{"line":184,"column":19},{"line":184,"column":27},{"doc":"generate"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"generate"}}]]}],[{"tag":"Span","contents":[{"line":184,"column":28},{"line":184,"column":32},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"pair"},[{"tag":"Span","contents":[{"line":160,"column":3},{"line":164,"column":31},{"doc":"Generator\n  <| (\\seed -> let (left,seed') = genLeft seed\n                   (right,seed'') = genRight seed'\n               in ((left,right),seed''))"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"},[{"tag":"Var","contents":"genLeft"}]]},[{"tag":"Span","contents":[{"line":160,"column":3},{"line":164,"column":31},{"doc":"Generator\n  <| (\\seed -> let (left,seed') = genLeft seed\n                   (right,seed'') = genRight seed'\n               in ((left,right),seed''))"}]},{"tag":"Lambda","contents":[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"},[{"tag":"Var","contents":"genRight"}]]},[{"tag":"Span","contents":[{"line":160,"column":3},{"line":164,"column":31},{"doc":"Generator\n  <| (\\seed -> let (left,seed') = genLeft seed\n                   (right,seed'') = genRight seed'\n               in ((left,right),seed''))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<|"},[{"tag":"Span","contents":[{"line":160,"column":3},{"line":160,"column":12},{"doc":"Generator"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Generator"}}],[{"tag":"Span","contents":[{"line":161,"column":5},{"line":164,"column":31},{"doc":"let (left,seed') = genLeft seed\n    (right,seed'') = genRight seed'\nin ((left,right),seed'')"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"seed"},[{"tag":"Span","contents":[{"line":161,"column":5},{"line":164,"column":31},{"doc":"let (left,seed') = genLeft seed\n    (right,seed'') = genRight seed'\nin ((left,right),seed'')"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"left"},{"tag":"Var","contents":"seed'"}]]},[{"tag":"Span","contents":[{"line":161,"column":27},{"line":161,"column":39},{"doc":"genLeft seed"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":161,"column":27},{"line":161,"column":34},{"doc":"genLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"genLeft"}}],[{"tag":"Span","contents":[{"line":161,"column":35},{"line":161,"column":39},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}]]}],null]],[{"tag":"Span","contents":[{"line":161,"column":5},{"line":164,"column":31},{"doc":"let (left,seed') = genLeft seed\n    (right,seed'') = genRight seed'\nin ((left,right),seed'')"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"right"},{"tag":"Var","contents":"seed''"}]]},[{"tag":"Span","contents":[{"line":162,"column":27},{"line":162,"column":41},{"doc":"genRight seed'"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":162,"column":27},{"line":162,"column":35},{"doc":"genRight"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"genRight"}}],[{"tag":"Span","contents":[{"line":162,"column":36},{"line":162,"column":41},{"doc":"seed'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed'"}}]]}],null]],[{"tag":"Span","contents":[{"line":164,"column":10},{"line":164,"column":30},{"doc":"((left,right),seed'')"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":164,"column":11},{"line":164,"column":21},{"doc":"(left,right)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":164,"column":11},{"line":164,"column":15},{"doc":"left"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"left"}}],[{"tag":"Span","contents":[{"line":164,"column":16},{"line":164,"column":21},{"doc":"right"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"right"}}]]]}],[{"tag":"Span","contents":[{"line":164,"column":24},{"line":164,"column":30},{"doc":"seed''"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed''"}}]]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Var","contents":"b"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]]}]]}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"minInt"},[{"tag":"Span","contents":[{"line":119,"column":10},{"line":119,"column":21},{"doc":"-2147483648"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":-2147483648}}],{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"maxInt"},[{"tag":"Span","contents":[{"line":114,"column":10},{"line":114,"column":20},{"doc":"2147483647"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2147483647}}],{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"iLogBase"},[{"tag":"Span","contents":[{"line":109,"column":5},{"line":109,"column":49},{"doc":"if | i < b -> 1\n   | True -> 1 + (iLogBase b (i // b))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":109,"column":5},{"line":109,"column":49},{"doc":"if | i < b -> 1\n   | True -> 1 + (iLogBase b (i // b))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"i"},[{"tag":"Span","contents":[{"line":109,"column":5},{"line":109,"column":49},{"doc":"if | i < b -> 1\n   | True -> 1 + (iLogBase b (i // b))"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":109,"column":8},{"line":109,"column":13},{"doc":"i < b"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":109,"column":8},{"line":109,"column":9},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}],[{"tag":"Span","contents":[{"line":109,"column":12},{"line":109,"column":13},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":109,"column":19},{"line":109,"column":20},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]],[[{"tag":"Span","contents":[{"line":109,"column":26},{"line":109,"column":48},{"doc":"1 + (iLogBase b (i // b))"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":109,"column":26},{"line":109,"column":48},{"doc":"1 + (iLogBase b (i // b))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":109,"column":26},{"line":109,"column":27},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}],[{"tag":"Span","contents":[{"line":109,"column":30},{"line":109,"column":48},{"doc":"iLogBase b (i // b)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":109,"column":30},{"line":109,"column":40},{"doc":"iLogBase b"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":109,"column":30},{"line":109,"column":38},{"doc":"iLogBase"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"iLogBase"}}],[{"tag":"Span","contents":[{"line":109,"column":39},{"line":109,"column":40},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":109,"column":42},{"line":109,"column":48},{"doc":"i // b"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"//"},[{"tag":"Span","contents":[{"line":109,"column":42},{"line":109,"column":43},{"doc":"i"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}],[{"tag":"Span","contents":[{"line":109,"column":47},{"line":109,"column":48},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}]]}]]}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"int"},[{"tag":"Span","contents":[{"line":88,"column":3},{"line":104,"column":49},{"doc":"Generator\n  <| (\\seed -> let (lo,hi) = if | a < b -> (a,b)\n                                | True -> (b,a)\n                   k = (hi - lo) + 1\n                   base = 2147483561\n                   n = iLogBase base k\n                   f = \\n acc state -> case n of\n                                         0 -> (acc,state)\n                                         _ -> let (x,state') = seed.next state\n                                              in f (n - 1) (x + (acc * base)) state'\n                   (v,state') = f n 1 seed.state\n               in (lo + (v % k),{seed | state <- state'}))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"Span","contents":[{"line":88,"column":3},{"line":104,"column":49},{"doc":"Generator\n  <| (\\seed -> let (lo,hi) = if | a < b -> (a,b)\n                                | True -> (b,a)\n                   k = (hi - lo) + 1\n                   base = 2147483561\n                   n = iLogBase base k\n                   f = \\n acc state -> case n of\n                                         0 -> (acc,state)\n                                         _ -> let (x,state') = seed.next state\n                                              in f (n - 1) (x + (acc * base)) state'\n                   (v,state') = f n 1 seed.state\n               in (lo + (v % k),{seed | state <- state'}))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":88,"column":3},{"line":104,"column":49},{"doc":"Generator\n  <| (\\seed -> let (lo,hi) = if | a < b -> (a,b)\n                                | True -> (b,a)\n                   k = (hi - lo) + 1\n                   base = 2147483561\n                   n = iLogBase base k\n                   f = \\n acc state -> case n of\n                                         0 -> (acc,state)\n                                         _ -> let (x,state') = seed.next state\n                                              in f (n - 1) (x + (acc * base)) state'\n                   (v,state') = f n 1 seed.state\n               in (lo + (v % k),{seed | state <- state'}))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<|"},[{"tag":"Span","contents":[{"line":88,"column":3},{"line":88,"column":12},{"doc":"Generator"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Generator"}}],[{"tag":"Span","contents":[{"line":89,"column":5},{"line":104,"column":49},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    k = (hi - lo) + 1\n    base = 2147483561\n    n = iLogBase base k\n    f = \\n acc state -> case n of\n                          0 -> (acc,state)\n                          _ -> let (x,state') = seed.next state\n                               in f (n - 1) (x + (acc * base)) state'\n    (v,state') = f n 1 seed.state\nin (lo + (v % k),{seed | state <- state'})"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"seed"},[{"tag":"Span","contents":[{"line":89,"column":5},{"line":104,"column":49},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    k = (hi - lo) + 1\n    base = 2147483561\n    n = iLogBase base k\n    f = \\n acc state -> case n of\n                          0 -> (acc,state)\n                          _ -> let (x,state') = seed.next state\n                               in f (n - 1) (x + (acc * base)) state'\n    (v,state') = f n 1 seed.state\nin (lo + (v % k),{seed | state <- state'})"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"base"},[{"tag":"Span","contents":[{"line":93,"column":16},{"line":93,"column":26},{"doc":"2147483561"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2147483561}}],null]],[{"tag":"Span","contents":[{"line":89,"column":5},{"line":104,"column":49},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    k = (hi - lo) + 1\n    base = 2147483561\n    n = iLogBase base k\n    f = \\n acc state -> case n of\n                          0 -> (acc,state)\n                          _ -> let (x,state') = seed.next state\n                               in f (n - 1) (x + (acc * base)) state'\n    (v,state') = f n 1 seed.state\nin (lo + (v % k),{seed | state <- state'})"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":97,"column":13},{"line":102,"column":9},{"doc":"case n of\n  0 -> (acc,state)\n  _ -> let (x,state') = seed.next state\n       in f (n - 1) (x + (acc * base)) state'"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":97,"column":13},{"line":102,"column":9},{"doc":"case n of\n  0 -> (acc,state)\n  _ -> let (x,state') = seed.next state\n       in f (n - 1) (x + (acc * base)) state'"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"acc"},[{"tag":"Span","contents":[{"line":97,"column":13},{"line":102,"column":9},{"doc":"case n of\n  0 -> (acc,state)\n  _ -> let (x,state') = seed.next state\n       in f (n - 1) (x + (acc * base)) state'"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"state"},[{"tag":"Span","contents":[{"line":97,"column":13},{"line":102,"column":9},{"doc":"case n of\n  0 -> (acc,state)\n  _ -> let (x,state') = seed.next state\n       in f (n - 1) (x + (acc * base)) state'"}]},{"tag":"Case","contents":[[{"tag":"Span","contents":[{"line":97,"column":18},{"line":97,"column":19},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}],[[{"tag":"Literal","contents":{"tag":"IntNum","contents":0}},[{"tag":"Span","contents":[{"line":98,"column":21},{"line":98,"column":31},{"doc":"(acc,state)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":98,"column":21},{"line":98,"column":24},{"doc":"acc"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"acc"}}],[{"tag":"Span","contents":[{"line":98,"column":26},{"line":98,"column":31},{"doc":"state"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"state"}}]]]}]],[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":99,"column":20},{"line":100,"column":57},{"doc":"let (x,state') = seed.next state\nin f (n - 1) (x + (acc * base)) state'"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"x"},{"tag":"Var","contents":"state'"}]]},[{"tag":"Span","contents":[{"line":99,"column":38},{"line":99,"column":53},{"doc":"seed.next state"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":99,"column":38},{"line":99,"column":47},{"doc":"seed.next"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":99,"column":38},{"line":99,"column":42},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}],"next"]}],[{"tag":"Span","contents":[{"line":99,"column":48},{"line":99,"column":53},{"doc":"state"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"state"}}]]}],null]],[{"tag":"Span","contents":[{"line":100,"column":24},{"line":100,"column":57},{"doc":"f (n - 1) (x + (acc * base)) state'"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":100,"column":24},{"line":100,"column":49},{"doc":"f (n - 1) (x + (acc * base))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":100,"column":24},{"line":100,"column":32},{"doc":"f (n - 1)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":100,"column":24},{"line":100,"column":25},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":100,"column":27},{"line":100,"column":32},{"doc":"n - 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":100,"column":27},{"line":100,"column":28},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}],[{"tag":"Span","contents":[{"line":100,"column":31},{"line":100,"column":32},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}]]}],[{"tag":"Span","contents":[{"line":100,"column":35},{"line":100,"column":49},{"doc":"x + (acc * base)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":100,"column":35},{"line":100,"column":36},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}],[{"tag":"Span","contents":[{"line":100,"column":39},{"line":100,"column":49},{"doc":"acc * base"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":100,"column":39},{"line":100,"column":42},{"doc":"acc"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"acc"}}],[{"tag":"Span","contents":[{"line":100,"column":45},{"line":100,"column":49},{"doc":"base"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"base"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":100,"column":51},{"line":100,"column":57},{"doc":"state'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"state'"}}]]}]]}]]]]}]]}]]}]]}],null]],[{"tag":"Span","contents":[{"line":89,"column":5},{"line":104,"column":49},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    k = (hi - lo) + 1\n    base = 2147483561\n    n = iLogBase base k\n    f = \\n acc state -> case n of\n                          0 -> (acc,state)\n                          _ -> let (x,state') = seed.next state\n                               in f (n - 1) (x + (acc * base)) state'\n    (v,state') = f n 1 seed.state\nin (lo + (v % k),{seed | state <- state'})"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"lo"},{"tag":"Var","contents":"hi"}]]},[{"tag":"Span","contents":[{"line":89,"column":19},{"line":89,"column":49},{"doc":"if | a < b -> (a,b)\n   | True -> (b,a)"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":89,"column":22},{"line":89,"column":27},{"doc":"a < b"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":89,"column":22},{"line":89,"column":23},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"Span","contents":[{"line":89,"column":26},{"line":89,"column":27},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":89,"column":34},{"line":89,"column":37},{"doc":"(a,b)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":89,"column":34},{"line":89,"column":35},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"Span","contents":[{"line":89,"column":36},{"line":89,"column":37},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]],[[{"tag":"Span","contents":[{"line":89,"column":45},{"line":89,"column":48},{"doc":"(b,a)"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":89,"column":45},{"line":89,"column":48},{"doc":"(b,a)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":89,"column":45},{"line":89,"column":46},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"Span","contents":[{"line":89,"column":47},{"line":89,"column":48},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]]}],null]],[{"tag":"Span","contents":[{"line":89,"column":5},{"line":104,"column":49},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    k = (hi - lo) + 1\n    base = 2147483561\n    n = iLogBase base k\n    f = \\n acc state -> case n of\n                          0 -> (acc,state)\n                          _ -> let (x,state') = seed.next state\n                               in f (n - 1) (x + (acc * base)) state'\n    (v,state') = f n 1 seed.state\nin (lo + (v % k),{seed | state <- state'})"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"k"},[{"tag":"Span","contents":[{"line":91,"column":13},{"line":91,"column":24},{"doc":"(hi - lo) + 1"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":91,"column":13},{"line":91,"column":20},{"doc":"hi - lo"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":91,"column":13},{"line":91,"column":15},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}],[{"tag":"Span","contents":[{"line":91,"column":18},{"line":91,"column":20},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}]]}],[{"tag":"Span","contents":[{"line":91,"column":23},{"line":91,"column":24},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],null]],[{"tag":"Span","contents":[{"line":89,"column":5},{"line":104,"column":49},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    k = (hi - lo) + 1\n    base = 2147483561\n    n = iLogBase base k\n    f = \\n acc state -> case n of\n                          0 -> (acc,state)\n                          _ -> let (x,state') = seed.next state\n                               in f (n - 1) (x + (acc * base)) state'\n    (v,state') = f n 1 seed.state\nin (lo + (v % k),{seed | state <- state'})"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"n"},[{"tag":"Span","contents":[{"line":94,"column":13},{"line":94,"column":28},{"doc":"iLogBase base k"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":94,"column":13},{"line":94,"column":26},{"doc":"iLogBase base"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":94,"column":13},{"line":94,"column":21},{"doc":"iLogBase"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"iLogBase"}}],[{"tag":"Span","contents":[{"line":94,"column":22},{"line":94,"column":26},{"doc":"base"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"base"}}]]}],[{"tag":"Span","contents":[{"line":94,"column":27},{"line":94,"column":28},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}]]}],null]],[{"tag":"Span","contents":[{"line":89,"column":5},{"line":104,"column":49},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    k = (hi - lo) + 1\n    base = 2147483561\n    n = iLogBase base k\n    f = \\n acc state -> case n of\n                          0 -> (acc,state)\n                          _ -> let (x,state') = seed.next state\n                               in f (n - 1) (x + (acc * base)) state'\n    (v,state') = f n 1 seed.state\nin (lo + (v % k),{seed | state <- state'})"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"v"},{"tag":"Var","contents":"state'"}]]},[{"tag":"Span","contents":[{"line":102,"column":23},{"line":102,"column":39},{"doc":"f n 1 seed.state"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":102,"column":23},{"line":102,"column":28},{"doc":"f n 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":102,"column":23},{"line":102,"column":26},{"doc":"f n"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":102,"column":23},{"line":102,"column":24},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":102,"column":25},{"line":102,"column":26},{"doc":"n"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"n"}}]]}],[{"tag":"Span","contents":[{"line":102,"column":27},{"line":102,"column":28},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],[{"tag":"Span","contents":[{"line":102,"column":29},{"line":102,"column":39},{"doc":"seed.state"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":102,"column":29},{"line":102,"column":33},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}],"state"]}]]}],null]],[{"tag":"Span","contents":[{"line":104,"column":10},{"line":104,"column":48},{"doc":"(lo + (v % k),{seed | state <- state'})"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":104,"column":10},{"line":104,"column":20},{"doc":"lo + (v % k)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":104,"column":10},{"line":104,"column":12},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}],[{"tag":"Span","contents":[{"line":104,"column":15},{"line":104,"column":20},{"doc":"v % k"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"%"},[{"tag":"Span","contents":[{"line":104,"column":15},{"line":104,"column":16},{"doc":"v"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"v"}}],[{"tag":"Span","contents":[{"line":104,"column":19},{"line":104,"column":20},{"doc":"k"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"k"}}]]}]]}],[{"tag":"Span","contents":[{"line":104,"column":29},{"line":104,"column":46},{"doc":"{seed | state <- state'}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":104,"column":24},{"line":104,"column":28},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}],[["state",[{"tag":"Span","contents":[{"line":104,"column":40},{"line":104,"column":46},{"doc":"state'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"state'"}}]]]]}]]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]}]],[{"tag":"None","contents":{"doc":"let int : Int -> Int -> Random.Generator Int\n    int = \\a b -> Generator\n                    `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                           | True -> (b,a)\n                                              k = (hi `Basics.-` lo) `Basics.+` 1\n                                              base = 2147483561\n                                              n = iLogBase base k\n                                              f = \\n acc state -> case n of\n                                                                    0 -> (acc,state)\n                                                                    _ -> let (x,state') = seed.next\n                                                                                            state\n                                                                         in f (n `Basics.-` 1)\n                                                                              (x `Basics.+` (acc\n                                                                                               `Basics.*` base))\n                                                                              state'\n                                              (v,state') = f n 1 seed.state\n                                          in (lo `Basics.+` (v `Basics.%` k),\n                                              {seed | state <- state'}))\n    iLogBase : Int -> Int -> Int\n    iLogBase = \\b i -> if | i `Basics.<` b -> 1\n                          | True -> 1 `Basics.+` (iLogBase b (i `Basics.//` b))\n    maxInt : Int\n    maxInt = 2147483647\n    minInt : Int\n    minInt = -2147483648\n    float : Float -> Float -> Random.Generator Float\n    float = \\a b -> Generator\n                      `Basics.<|` (\\seed -> let (lo,hi) = if | a `Basics.<` b -> (a,b)\n                                                             | True -> (b,a)\n                                                (number,seed') = generate (int minInt maxInt) seed\n                                                negativeOneToOne = (Basics.toFloat number)\n                                                                     `Basics./` (Basics.toFloat\n                                                                                   (maxInt\n                                                                                      `Basics.-` minInt))\n                                                scaled = ((lo `Basics.+` hi) `Basics./` 2)\n                                                           `Basics.+` ((hi `Basics.-` lo)\n                                                                         `Basics.*` negativeOneToOne)\n                                            in (scaled,seed'))\n    pair : Random.Generator a\n           -> Random.Generator b -> Random.Generator (a, b)\n    pair = \\(Random.Generator genLeft)\n            (Random.Generator genRight) -> Generator\n                                             `Basics.<|` (\\seed -> let (left,seed') = genLeft seed\n                                                                       (right,seed'') = genRight\n                                                                                          seed'\n                                                                   in ((left,right),seed''))\n    list : Int -> Random.Generator a -> Random.Generator (List a)\n    list = \\n (Random.Generator generate) -> Generator\n                                               `Basics.<|` (\\seed -> listHelp [] n generate seed)\n    listHelp : List a\n               -> Int\n               -> (Random.Seed -> (a, Random.Seed))\n               -> Random.Seed\n               -> (List a, Random.Seed)\n    listHelp = \\list n generate seed -> if | n `Basics.<` 1 ->\n                                               (List.reverse list,seed)\n                                           | True ->\n                                               let (value,seed') = generate seed\n                                               in listHelp\n                                                    (value `List.::` list)\n                                                    (n `Basics.-` 1)\n                                                    generate\n                                                    seed'\n    customGenerator : (Random.Seed -> (a, Random.Seed))\n                      -> Random.Generator a\n    customGenerator = \\generate -> Generator generate\n    Generator : (Random.Seed -> (a, Random.Seed)) -> Random.Generator a\n    Generator = \\a -> Generator a\n    State : Int -> Int -> Random.State\n    State = \\a b -> State a b\n    Seed : Random.State\n           -> (Random.State -> (Int, Random.State))\n           -> (Random.State -> (Random.State, Random.State))\n           -> (Random.State -> (Int, Int))\n           -> Random.Seed\n    Seed = \\a b c d -> { state = a, next = b, split = c, range = d }\n    generate : Random.Generator a -> Random.Seed -> (a, Random.Seed)\n    generate = \\(Random.Generator generator) seed -> generator seed\n    initialSeed : Int -> Random.Seed\n    initialSeed = \\n -> Seed (initState n) next split range\n    initState : Int -> Random.State\n    initState = \\s' -> let s = Basics.max s' (0 `Basics.-` s')\n                           q = s `Basics.//` (magicNum6 `Basics.-` 1)\n                           s1 = s `Basics.%` (magicNum6 `Basics.-` 1)\n                           s2 = q `Basics.%` (magicNum7 `Basics.-` 1)\n                       in State (s1 `Basics.+` 1) (s2 `Basics.+` 1)\n    magicNum0 = 40014\n    magicNum1 = 53668\n    magicNum2 = 12211\n    magicNum3 = 52774\n    magicNum4 = 40692\n    magicNum5 = 3791\n    magicNum6 = 2147483563\n    magicNum7 = 2137383399\n    magicNum8 = 2147483562\n    next : Random.State -> (Int, Random.State)\n    next = \\(Random.State s1 s2) -> let k = s1 `Basics.//` magicNum1\n                                        s1' = (magicNum0\n                                                 `Basics.*` (s1\n                                                               `Basics.-` (k `Basics.*` magicNum1)))\n                                                `Basics.-` (k `Basics.*` magicNum2)\n                                        s1'' = if | s1' `Basics.<` 0 -> s1' `Basics.+` magicNum6\n                                                  | True -> s1'\n                                        k' = s2 `Basics.//` magicNum3\n                                        s2' = (magicNum4\n                                                 `Basics.*` (s2\n                                                               `Basics.-` (k'\n                                                                             `Basics.*` magicNum3)))\n                                                `Basics.-` (k' `Basics.*` magicNum5)\n                                        s2'' = if | s2' `Basics.<` 0 -> s2' `Basics.+` magicNum7\n                                                  | True -> s2'\n                                        z = s1'' `Basics.-` s2''\n                                        z' = if | z `Basics.<` 1 -> z `Basics.+` magicNum8\n                                                | True -> z\n                                    in (z',State s1'' s2'')\n    split : Random.State -> (Random.State, Random.State)\n    split = \\((Random.State s1 s2) as std) -> let new_s1 = if | s1\n                                                                  `Basics.==` (magicNum6\n                                                                                 `Basics.-` 1) ->\n                                                                  1\n                                                              | True -> s1 `Basics.+` 1\n                                                  new_s2 = if | s2 `Basics.==` 1 ->\n                                                                  magicNum7 `Basics.-` 1\n                                                              | True -> s2 `Basics.-` 1\n                                                  Random.State t1 t2 = Basics.snd (next std)\n                                              in (State new_s1 t2,State t1 new_s2)\n    range : Random.State -> (Int, Int)\n    range = \\_ -> (0,magicNum8)\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"float"},[{"tag":"Span","contents":[{"line":133,"column":3},{"line":144,"column":24},{"doc":"Generator\n  <| (\\seed -> let (lo,hi) = if | a < b -> (a,b)\n                                | True -> (b,a)\n                   (number,seed') = generate (int minInt maxInt) seed\n                   negativeOneToOne = (toFloat number) / (toFloat (maxInt - minInt))\n                   scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)\n               in (scaled,seed'))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"Span","contents":[{"line":133,"column":3},{"line":144,"column":24},{"doc":"Generator\n  <| (\\seed -> let (lo,hi) = if | a < b -> (a,b)\n                                | True -> (b,a)\n                   (number,seed') = generate (int minInt maxInt) seed\n                   negativeOneToOne = (toFloat number) / (toFloat (maxInt - minInt))\n                   scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)\n               in (scaled,seed'))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"Span","contents":[{"line":133,"column":3},{"line":144,"column":24},{"doc":"Generator\n  <| (\\seed -> let (lo,hi) = if | a < b -> (a,b)\n                                | True -> (b,a)\n                   (number,seed') = generate (int minInt maxInt) seed\n                   negativeOneToOne = (toFloat number) / (toFloat (maxInt - minInt))\n                   scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)\n               in (scaled,seed'))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<|"},[{"tag":"Span","contents":[{"line":133,"column":3},{"line":133,"column":12},{"doc":"Generator"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Generator"}}],[{"tag":"Span","contents":[{"line":134,"column":5},{"line":144,"column":24},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    (number,seed') = generate (int minInt maxInt) seed\n    negativeOneToOne = (toFloat number) / (toFloat (maxInt - minInt))\n    scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)\nin (scaled,seed')"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"seed"},[{"tag":"Span","contents":[{"line":134,"column":5},{"line":144,"column":24},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    (number,seed') = generate (int minInt maxInt) seed\n    negativeOneToOne = (toFloat number) / (toFloat (maxInt - minInt))\n    scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)\nin (scaled,seed')"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"number"},{"tag":"Var","contents":"seed'"}]]},[{"tag":"Span","contents":[{"line":137,"column":13},{"line":137,"column":46},{"doc":"generate (int minInt maxInt) seed"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":137,"column":13},{"line":137,"column":40},{"doc":"generate (int minInt maxInt)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":137,"column":13},{"line":137,"column":21},{"doc":"generate"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"generate"}}],[{"tag":"Span","contents":[{"line":137,"column":23},{"line":137,"column":40},{"doc":"int minInt maxInt"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":137,"column":23},{"line":137,"column":33},{"doc":"int minInt"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":137,"column":23},{"line":137,"column":26},{"doc":"int"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"int"}}],[{"tag":"Span","contents":[{"line":137,"column":27},{"line":137,"column":33},{"doc":"minInt"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"minInt"}}]]}],[{"tag":"Span","contents":[{"line":137,"column":34},{"line":137,"column":40},{"doc":"maxInt"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"maxInt"}}]]}]]}],[{"tag":"Span","contents":[{"line":137,"column":42},{"line":137,"column":46},{"doc":"seed"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed"}}]]}],null]],[{"tag":"Span","contents":[{"line":134,"column":5},{"line":144,"column":24},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    (number,seed') = generate (int minInt maxInt) seed\n    negativeOneToOne = (toFloat number) / (toFloat (maxInt - minInt))\n    scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)\nin (scaled,seed')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"negativeOneToOne"},[{"tag":"Span","contents":[{"line":140,"column":13},{"line":140,"column":54},{"doc":"(toFloat number) / (toFloat (maxInt - minInt))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":140,"column":13},{"line":140,"column":27},{"doc":"toFloat number"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":140,"column":13},{"line":140,"column":20},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":140,"column":21},{"line":140,"column":27},{"doc":"number"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"number"}}]]}],[{"tag":"Span","contents":[{"line":140,"column":30},{"line":140,"column":54},{"doc":"toFloat (maxInt - minInt)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":140,"column":30},{"line":140,"column":37},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":140,"column":39},{"line":140,"column":54},{"doc":"maxInt - minInt"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":140,"column":39},{"line":140,"column":45},{"doc":"maxInt"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"maxInt"}}],[{"tag":"Span","contents":[{"line":140,"column":48},{"line":140,"column":54},{"doc":"minInt"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"minInt"}}]]}]]}]]}],null]],[{"tag":"Span","contents":[{"line":134,"column":5},{"line":144,"column":24},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    (number,seed') = generate (int minInt maxInt) seed\n    negativeOneToOne = (toFloat number) / (toFloat (maxInt - minInt))\n    scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)\nin (scaled,seed')"}]},{"tag":"Let","contents":[[[{"tag":"Data","contents":[{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"},[{"tag":"Var","contents":"lo"},{"tag":"Var","contents":"hi"}]]},[{"tag":"Span","contents":[{"line":134,"column":20},{"line":134,"column":50},{"doc":"if | a < b -> (a,b)\n   | True -> (b,a)"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":134,"column":23},{"line":134,"column":28},{"doc":"a < b"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"<"},[{"tag":"Span","contents":[{"line":134,"column":23},{"line":134,"column":24},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"Span","contents":[{"line":134,"column":27},{"line":134,"column":28},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]}],[{"tag":"Span","contents":[{"line":134,"column":35},{"line":134,"column":38},{"doc":"(a,b)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":134,"column":35},{"line":134,"column":36},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"Span","contents":[{"line":134,"column":37},{"line":134,"column":38},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]],[[{"tag":"Span","contents":[{"line":134,"column":46},{"line":134,"column":49},{"doc":"(b,a)"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":134,"column":46},{"line":134,"column":49},{"doc":"(b,a)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":134,"column":46},{"line":134,"column":47},{"doc":"b"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"Span","contents":[{"line":134,"column":48},{"line":134,"column":49},{"doc":"a"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]]}],null]],[{"tag":"Span","contents":[{"line":134,"column":5},{"line":144,"column":24},{"doc":"let (lo,hi) = if | a < b -> (a,b)\n                 | True -> (b,a)\n    (number,seed') = generate (int minInt maxInt) seed\n    negativeOneToOne = (toFloat number) / (toFloat (maxInt - minInt))\n    scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)\nin (scaled,seed')"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"scaled"},[{"tag":"Span","contents":[{"line":142,"column":19},{"line":142,"column":57},{"doc":"((lo + hi) / 2) + ((hi - lo) * negativeOneToOne)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":142,"column":19},{"line":142,"column":27},{"doc":"(lo + hi) / 2"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":142,"column":19},{"line":142,"column":24},{"doc":"lo + hi"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":142,"column":19},{"line":142,"column":21},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}],[{"tag":"Span","contents":[{"line":142,"column":22},{"line":142,"column":24},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}]]}],[{"tag":"Span","contents":[{"line":142,"column":26},{"line":142,"column":27},{"doc":"2"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":2}}]]}],[{"tag":"Span","contents":[{"line":142,"column":32},{"line":142,"column":57},{"doc":"(hi - lo) * negativeOneToOne"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":142,"column":32},{"line":142,"column":37},{"doc":"hi - lo"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"-"},[{"tag":"Span","contents":[{"line":142,"column":32},{"line":142,"column":34},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}],[{"tag":"Span","contents":[{"line":142,"column":35},{"line":142,"column":37},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}]]}],[{"tag":"Span","contents":[{"line":142,"column":41},{"line":142,"column":57},{"doc":"negativeOneToOne"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"negativeOneToOne"}}]]}]]}],null]],[{"tag":"Span","contents":[{"line":144,"column":10},{"line":144,"column":23},{"doc":"(scaled,seed')"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":144,"column":10},{"line":144,"column":16},{"doc":"scaled"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"scaled"}}],[{"tag":"Span","contents":[{"line":144,"column":18},{"line":144,"column":23},{"doc":"seed'"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seed'"}}]]]}]]}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Random"]},"name":"Generator"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Basics"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}],[["List"],{"tag":"As","contents":"List"}],[["List"],{"tag":"Open","contents":{"_explicits":[{"tag":"Value","contents":"::"}],"_open":false}}]],"names":["Random"],"exports":[{"tag":"Value","contents":"int"},{"tag":"Value","contents":"float"},{"tag":"Value","contents":"list"},{"tag":"Value","contents":"pair"},{"tag":"Value","contents":"minInt"},{"tag":"Value","contents":"maxInt"},{"tag":"Value","contents":"generate"},{"tag":"Value","contents":"initialSeed"},{"tag":"Value","contents":"customGenerator"},{"tag":"Union","contents":["Generator",{"_explicits":[],"_open":false}]},{"tag":"Alias","contents":"Seed"},{"tag":"Value","contents":"Seed"}]}
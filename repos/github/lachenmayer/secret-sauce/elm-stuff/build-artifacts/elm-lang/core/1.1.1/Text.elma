{"path":"","body":{"fixities":[],"aliases":{"Style":[[],{"tag":"Record","contents":[[["typeface",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}],["height",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["bold",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["italic",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["line",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]}]],null]}]},"datatypes":{"Text":[[],[["Text",[]]]],"Line":[[],[["Under",[]],["Over",[]],["Through",[]]]]},"types":{"style":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Text"]},"name":"Style"},{"tag":"Record","contents":[[["bold",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["height",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}],["italic",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["line",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]}],["typeface",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]},"markdown":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},"height":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]},"asText":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]},"Style":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Text"]},"name":"Style"},{"tag":"Record","contents":[[["bold",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["height",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}],["italic",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["line",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]}],["typeface",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]],null]}]}]}]}]}]}]}]},"join":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]},"empty":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},"Text":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},"color":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]},"Under":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"link":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]},"Through":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}},"Over":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}},"line":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]},"typeface":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]},"defaultStyle":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Text"]},"name":"Style"},{"tag":"Record","contents":[[["bold",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["height",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}]]}],["italic",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["line",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]}],["typeface",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]],null]}]},"rightAligned":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]},"concat":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]},"leftAligned":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]},"monospace":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]},"justified":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]},"plainText":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]},"centered":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Time"]},"name":"Time"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]},"italic":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]},"bold":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]},"fromString":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]},"append":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}},"program":[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"markdown"},[{"tag":"Span","contents":[{"line":252,"column":19},{"line":252,"column":32},{"doc":"Native.Text.markdown"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"markdown"}}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"justified"},[{"tag":"Span","contents":[{"line":240,"column":20},{"line":240,"column":34},{"doc":"Native.Text.justified"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"justified"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"centered"},[{"tag":"Span","contents":[{"line":234,"column":19},{"line":234,"column":32},{"doc":"Native.Text.centered"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"centered"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"rightAligned"},[{"tag":"Span","contents":[{"line":228,"column":23},{"line":228,"column":40},{"doc":"Native.Text.rightAligned"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"rightAligned"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"leftAligned"},[{"tag":"Span","contents":[{"line":222,"column":22},{"line":222,"column":38},{"doc":"Native.Text.leftAligned"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"leftAligned"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"line"},[{"tag":"Span","contents":[{"line":216,"column":15},{"line":216,"column":24},{"doc":"Native.Text.line"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"line"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"italic"},[{"tag":"Span","contents":[{"line":207,"column":17},{"line":207,"column":28},{"doc":"Native.Text.italic"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"italic"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"bold"},[{"tag":"Span","contents":[{"line":200,"column":15},{"line":200,"column":24},{"doc":"Native.Text.bold"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"bold"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"color"},[{"tag":"Span","contents":[{"line":193,"column":16},{"line":193,"column":26},{"doc":"Native.Text.color"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"color"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"height"},[{"tag":"Span","contents":[{"line":186,"column":17},{"line":186,"column":28},{"doc":"Native.Text.height"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"height"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"link"},[{"tag":"Span","contents":[{"line":179,"column":15},{"line":179,"column":24},{"doc":"Native.Text.link"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"link"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"monospace"},[{"tag":"Span","contents":[{"line":172,"column":20},{"line":172,"column":34},{"doc":"Native.Text.monospace"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"monospace"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"typeface"},[{"tag":"Span","contents":[{"line":165,"column":19},{"line":165,"column":32},{"doc":"Native.Text.typeface"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"typeface"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"style"},[{"tag":"Span","contents":[{"line":153,"column":16},{"line":153,"column":26},{"doc":"Native.Text.style"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"style"}}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Text"]},"name":"Style"},{"tag":"Record","contents":[[["typeface",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}],["height",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["bold",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["italic",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["line",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"append"},[{"tag":"Span","contents":[{"line":118,"column":12},{"line":118,"column":23},{"doc":"Native.Text.append"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"append"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fromString"},[{"tag":"Span","contents":[{"line":100,"column":21},{"line":100,"column":36},{"doc":"Native.Text.fromString"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Text"]},"name":"fromString"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"empty"},[{"tag":"Span","contents":[{"line":109,"column":5},{"line":109,"column":18},{"doc":"fromString \"\""}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":109,"column":5},{"line":109,"column":15},{"doc":"fromString"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fromString"}}],[{"tag":"Span","contents":[{"line":109,"column":16},{"line":109,"column":18},{"doc":"\"\""}]},{"tag":"Literal","contents":{"tag":"Str","contents":""}}]]}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"concat"},[{"tag":"Span","contents":[{"line":131,"column":5},{"line":131,"column":34},{"doc":"List.foldr append empty texts"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"texts"},[{"tag":"Span","contents":[{"line":131,"column":5},{"line":131,"column":34},{"doc":"List.foldr append empty texts"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":131,"column":5},{"line":131,"column":28},{"doc":"List.foldr append empty"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":131,"column":5},{"line":131,"column":22},{"doc":"List.foldr append"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":131,"column":5},{"line":131,"column":15},{"doc":"List.foldr"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"foldr"}}],[{"tag":"Span","contents":[{"line":131,"column":16},{"line":131,"column":22},{"doc":"append"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"append"}}]]}],[{"tag":"Span","contents":[{"line":131,"column":23},{"line":131,"column":28},{"doc":"empty"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"empty"}}]]}],[{"tag":"Span","contents":[{"line":131,"column":29},{"line":131,"column":34},{"doc":"texts"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"texts"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"join"},[{"tag":"Span","contents":[{"line":143,"column":5},{"line":143,"column":45},{"doc":"concat (List.intersperse seperator texts)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"seperator"},[{"tag":"Span","contents":[{"line":143,"column":5},{"line":143,"column":45},{"doc":"concat (List.intersperse seperator texts)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"texts"},[{"tag":"Span","contents":[{"line":143,"column":5},{"line":143,"column":45},{"doc":"concat (List.intersperse seperator texts)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":143,"column":5},{"line":143,"column":11},{"doc":"concat"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"concat"}}],[{"tag":"Span","contents":[{"line":143,"column":13},{"line":143,"column":45},{"doc":"List.intersperse seperator texts"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":143,"column":13},{"line":143,"column":39},{"doc":"List.intersperse seperator"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":143,"column":13},{"line":143,"column":29},{"doc":"List.intersperse"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"intersperse"}}],[{"tag":"Span","contents":[{"line":143,"column":30},{"line":143,"column":39},{"doc":"seperator"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"seperator"}}]]}],[{"tag":"Span","contents":[{"line":143,"column":40},{"line":143,"column":45},{"doc":"texts"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"texts"}}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"plainText"},[{"tag":"Span","contents":[{"line":248,"column":5},{"line":248,"column":32},{"doc":"leftAligned (fromString str)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"str"},[{"tag":"Span","contents":[{"line":248,"column":5},{"line":248,"column":32},{"doc":"leftAligned (fromString str)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":248,"column":5},{"line":248,"column":16},{"doc":"leftAligned"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"leftAligned"}}],[{"tag":"Span","contents":[{"line":248,"column":18},{"line":248,"column":32},{"doc":"fromString str"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":248,"column":18},{"line":248,"column":28},{"doc":"fromString"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fromString"}}],[{"tag":"Span","contents":[{"line":248,"column":29},{"line":248,"column":32},{"doc":"str"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"str"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"asText"},[{"tag":"Span","contents":[{"line":261,"column":5},{"line":261,"column":55},{"doc":"leftAligned (monospace (fromString (toString value)))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"value"},[{"tag":"Span","contents":[{"line":261,"column":5},{"line":261,"column":55},{"doc":"leftAligned (monospace (fromString (toString value)))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":261,"column":5},{"line":261,"column":16},{"doc":"leftAligned"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"leftAligned"}}],[{"tag":"Span","contents":[{"line":261,"column":18},{"line":261,"column":55},{"doc":"monospace (fromString (toString value))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":261,"column":18},{"line":261,"column":27},{"doc":"monospace"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"monospace"}}],[{"tag":"Span","contents":[{"line":261,"column":29},{"line":261,"column":55},{"doc":"fromString (toString value)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":261,"column":29},{"line":261,"column":39},{"doc":"fromString"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"fromString"}}],[{"tag":"Span","contents":[{"line":261,"column":41},{"line":261,"column":55},{"doc":"toString value"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":261,"column":41},{"line":261,"column":49},{"doc":"toString"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toString"}}],[{"tag":"Span","contents":[{"line":261,"column":50},{"line":261,"column":55},{"doc":"value"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"value"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"defaultStyle"},[{"tag":"Span","contents":[{"line":86,"column":5},{"line":91,"column":19},{"doc":"{ typeface = []\n, height = Nothing\n, color = black\n, bold = False\n, italic = False\n, line = Nothing\n}"}]},{"tag":"Record","contents":[["typeface",[{"tag":"Span","contents":[{"line":86,"column":16},{"line":86,"column":18},{"doc":"[]"}]},{"tag":"ExplicitList","contents":[]}]],["height",[{"tag":"Span","contents":[{"line":87,"column":14},{"line":87,"column":21},{"doc":"Nothing"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Nothing"}}]],["color",[{"tag":"Span","contents":[{"line":88,"column":13},{"line":88,"column":18},{"doc":"black"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"black"}}]],["bold",[{"tag":"Span","contents":[{"line":89,"column":12},{"line":89,"column":17},{"doc":"False"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":false}}]],["italic",[{"tag":"Span","contents":[{"line":90,"column":14},{"line":90,"column":19},{"doc":"False"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":false}}]],["line",[{"tag":"Span","contents":[{"line":91,"column":12},{"line":91,"column":19},{"doc":"Nothing"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Nothing"}}]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Text"]},"name":"Style"},{"tag":"Record","contents":[[["typeface",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}],["height",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["bold",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["italic",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["line",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Style"},[{"tag":"None","contents":{"doc":"{ typeface = a\n, height = b\n, color = c\n, bold = d\n, italic = e\n, line = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"{ typeface = a\n, height = b\n, color = c\n, bold = d\n, italic = e\n, line = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"{ typeface = a\n, height = b\n, color = c\n, bold = d\n, italic = e\n, line = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"{ typeface = a\n, height = b\n, color = c\n, bold = d\n, italic = e\n, line = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"{ typeface = a\n, height = b\n, color = c\n, bold = d\n, italic = e\n, line = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"None","contents":{"doc":"{ typeface = a\n, height = b\n, color = c\n, bold = d\n, italic = e\n, line = f\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"None","contents":{"doc":"{ typeface = a\n, height = b\n, color = c\n, bold = d\n, italic = e\n, line = f\n}"}},{"tag":"Record","contents":[["typeface",[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]],["height",[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]],["color",[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]],["bold",[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]],["italic",[{"tag":"None","contents":{"doc":"e"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]],["line",[{"tag":"None","contents":{"doc":"f"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Text"]},"name":"Style"},{"tag":"Record","contents":[[["typeface",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}],["height",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}],["color",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}],["bold",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["italic",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}],["line",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}}]]}]],null]}]}]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Through"},[{"tag":"None","contents":{"doc":"Through"}},{"tag":"Data","contents":["Through",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}},[]]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Over"},[{"tag":"None","contents":{"doc":"Over"}},{"tag":"Data","contents":["Over",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}},[]]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Under"},[{"tag":"None","contents":{"doc":"Under"}},{"tag":"Data","contents":["Under",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Line"}},[]]}]],[{"tag":"None","contents":{"doc":"let Text : Text.Text\n    Text = Text\n    Under : Text.Line\n    Under = Under\n    Over : Text.Line\n    Over = Over\n    Through : Text.Line\n    Through = Through\n    Style : List String\n            -> Maybe.Maybe Float\n            -> Color.Color\n            -> Bool\n            -> Bool\n            -> Maybe.Maybe Text.Line\n            -> Text.Style\n    Style = \\a b c d e f -> { typeface = a\n                            , height = b\n                            , color = c\n                            , bold = d\n                            , italic = e\n                            , line = f\n                            }\n    defaultStyle : Text.Style\n    defaultStyle = { typeface = []\n                   , height = Maybe.Nothing\n                   , color = Color.black\n                   , bold = False\n                   , italic = False\n                   , line = Maybe.Nothing\n                   }\n    fromString : String -> Text.Text\n    fromString = Native.Text.fromString\n    empty : Text.Text\n    empty = fromString \"\"\n    append : Text.Text -> Text.Text -> Text.Text\n    append = Native.Text.append\n    concat : List Text.Text -> Text.Text\n    concat = \\texts -> List.foldr append empty texts\n    join : Text.Text -> List Text.Text -> Text.Text\n    join = \\seperator texts -> concat\n                                 (List.intersperse seperator texts)\n    style : Text.Style -> Text.Text -> Text.Text\n    style = Native.Text.style\n    typeface : List String -> Text.Text -> Text.Text\n    typeface = Native.Text.typeface\n    monospace : Text.Text -> Text.Text\n    monospace = Native.Text.monospace\n    link : String -> Text.Text -> Text.Text\n    link = Native.Text.link\n    height : Float -> Text.Text -> Text.Text\n    height = Native.Text.height\n    color : Color.Color -> Text.Text -> Text.Text\n    color = Native.Text.color\n    bold : Text.Text -> Text.Text\n    bold = Native.Text.bold\n    italic : Text.Text -> Text.Text\n    italic = Native.Text.italic\n    line : Text.Line -> Text.Text -> Text.Text\n    line = Native.Text.line\n    leftAligned : Text.Text -> Graphics.Element.Element\n    leftAligned = Native.Text.leftAligned\n    rightAligned : Text.Text -> Graphics.Element.Element\n    rightAligned = Native.Text.rightAligned\n    centered : Text.Text -> Graphics.Element.Element\n    centered = Native.Text.centered\n    justified : Text.Text -> Graphics.Element.Element\n    justified = Native.Text.justified\n    plainText : String -> Graphics.Element.Element\n    plainText = \\str -> leftAligned (fromString str)\n    markdown : Graphics.Element.Element\n    markdown = Native.Text.markdown\n    asText : a -> Graphics.Element.Element\n    asText = \\value -> leftAligned\n                         (monospace (fromString (Basics.toString value)))\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Text"},[{"tag":"None","contents":{"doc":"Text"}},{"tag":"Data","contents":["Text",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Text"]},"name":"Text"}},[]]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Basics"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}],[["Color"],{"tag":"Open","contents":{"_explicits":[{"tag":"Alias","contents":"Color"},{"tag":"Value","contents":"black"}],"_open":false}}],[["Graphics","Element"],{"tag":"Open","contents":{"_explicits":[{"tag":"Alias","contents":"Element"},{"tag":"Alias","contents":"Three"},{"tag":"Alias","contents":"Pos"},{"tag":"Alias","contents":"ElementPrim"},{"tag":"Alias","contents":"Properties"}],"_open":false}}],[["List"],{"tag":"As","contents":"List"}],[["Maybe"],{"tag":"Open","contents":{"_explicits":[{"tag":"Union","contents":["Maybe",{"_explicits":["Nothing"],"_open":false}]}],"_open":false}}],[["Native","Text"],{"tag":"As","contents":"Native.Text"}]],"names":["Text"],"exports":[{"tag":"Union","contents":["Text",{"_explicits":["Text"],"_open":false}]},{"tag":"Union","contents":["Line",{"_explicits":["Under","Over","Through"],"_open":false}]},{"tag":"Alias","contents":"Style"},{"tag":"Value","contents":"Style"},{"tag":"Value","contents":"defaultStyle"},{"tag":"Value","contents":"fromString"},{"tag":"Value","contents":"empty"},{"tag":"Value","contents":"append"},{"tag":"Value","contents":"concat"},{"tag":"Value","contents":"join"},{"tag":"Value","contents":"style"},{"tag":"Value","contents":"typeface"},{"tag":"Value","contents":"monospace"},{"tag":"Value","contents":"link"},{"tag":"Value","contents":"height"},{"tag":"Value","contents":"color"},{"tag":"Value","contents":"bold"},{"tag":"Value","contents":"italic"},{"tag":"Value","contents":"line"},{"tag":"Value","contents":"leftAligned"},{"tag":"Value","contents":"rightAligned"},{"tag":"Value","contents":"centered"},{"tag":"Value","contents":"justified"},{"tag":"Value","contents":"plainText"},{"tag":"Value","contents":"markdown"},{"tag":"Value","contents":"asText"}]}
{"path":"","body":{"fixities":[["L",4,"<~"],["L",4,"~"]],"aliases":{},"datatypes":{"Channel":[["a"],[["Channel",[]]]],"Message":[[],[["Message",[]]]],"Signal":[["a"],[["Signal",[]]]]},"types":{"keepIf":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]},"map3":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},{"tag":"Var","contents":"result"}]}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"c"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]}]},"dropRepeats":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"map4":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},{"tag":"Var","contents":"result"}]}]}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"c"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"d"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]}]}]},"mergeMany":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]},"channel":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Channel"}},[{"tag":"Var","contents":"a"}]]}]},"Channel":{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Channel"}},[{"tag":"Var","contents":"a"}]]},"~":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]}]}]},"map5":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},{"tag":"Var","contents":"result"}]}]}]}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"c"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"d"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"e"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]}]}]}]},"send":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Channel"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Message"}}]}]},"map":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"result"}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]},"sampleOn":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]}]}]},"keepWhen":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]},"<~":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]}]}]},"dropWhen":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]},"merge":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]},"subscribe":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Channel"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]},"Message":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Message"}},"Signal":{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},"constant":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]},"map2":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"result"}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]},"dropIf":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]},"foldp":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"state"},{"tag":"Var","contents":"state"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"state"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"state"}]]}]}]}]}},"program":[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"subscribe"},[{"tag":"Span","contents":[{"line":333,"column":12},{"line":333,"column":28},{"doc":"Native.Signal.subscribe"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"subscribe"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Channel"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"send"},[{"tag":"Span","contents":[{"line":307,"column":12},{"line":307,"column":23},{"doc":"Native.Signal.send"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"send"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Channel"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Message"}}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"channel"},[{"tag":"Span","contents":[{"line":285,"column":12},{"line":285,"column":24},{"doc":"Native.Signal.input"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"input"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Channel"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Message"},[{"tag":"None","contents":{"doc":"Message"}},{"tag":"Data","contents":["Message",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Message"}},[]]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Channel"},[{"tag":"None","contents":{"doc":"Channel"}},{"tag":"Data","contents":["Channel",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Channel"}},[{"tag":"Var","contents":"a"}]]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"~"},[{"tag":"Span","contents":[{"line":262,"column":12},{"line":262,"column":42},{"doc":"Native.Signal.map2 (\\f x -> f x) sf s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"sf"},[{"tag":"Span","contents":[{"line":262,"column":12},{"line":262,"column":42},{"doc":"Native.Signal.map2 (\\f x -> f x) sf s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"s"},[{"tag":"Span","contents":[{"line":262,"column":12},{"line":262,"column":42},{"doc":"Native.Signal.map2 (\\f x -> f x) sf s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":262,"column":12},{"line":262,"column":40},{"doc":"Native.Signal.map2 (\\f x -> f x) sf"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":262,"column":12},{"line":262,"column":36},{"doc":"Native.Signal.map2 (\\f x -> f x)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":262,"column":12},{"line":262,"column":23},{"doc":"Native.Signal.map2"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"map2"}}],[{"tag":"Span","contents":[{"line":262,"column":33},{"line":262,"column":36},{"doc":"f x"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":262,"column":33},{"line":262,"column":36},{"doc":"f x"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":262,"column":33},{"line":262,"column":36},{"doc":"f x"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":262,"column":33},{"line":262,"column":34},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}],[{"tag":"Span","contents":[{"line":262,"column":35},{"line":262,"column":36},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]]}]]}]]}]]}],[{"tag":"Span","contents":[{"line":262,"column":38},{"line":262,"column":40},{"doc":"sf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"sf"}}]]}],[{"tag":"Span","contents":[{"line":262,"column":41},{"line":262,"column":42},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"<~"},[{"tag":"Span","contents":[{"line":242,"column":12},{"line":242,"column":26},{"doc":"Native.Signal.map f s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"Span","contents":[{"line":242,"column":12},{"line":242,"column":26},{"doc":"Native.Signal.map f s"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"s"},[{"tag":"Span","contents":[{"line":242,"column":12},{"line":242,"column":26},{"doc":"Native.Signal.map f s"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":242,"column":12},{"line":242,"column":24},{"doc":"Native.Signal.map f"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":242,"column":12},{"line":242,"column":22},{"doc":"Native.Signal.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":242,"column":23},{"line":242,"column":24},{"doc":"f"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]]}],[{"tag":"Span","contents":[{"line":242,"column":25},{"line":242,"column":26},{"doc":"s"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"s"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"b"}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"sampleOn"},[{"tag":"Span","contents":[{"line":234,"column":12},{"line":234,"column":27},{"doc":"Native.Signal.sampleOn"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"sampleOn"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"dropRepeats"},[{"tag":"Span","contents":[{"line":226,"column":12},{"line":226,"column":30},{"doc":"Native.Signal.dropRepeats"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"dropRepeats"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"dropIf"},[{"tag":"Span","contents":[{"line":187,"column":12},{"line":187,"column":25},{"doc":"Native.Signal.dropIf"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"dropIf"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"keepIf"},[{"tag":"Span","contents":[{"line":169,"column":12},{"line":169,"column":25},{"doc":"Native.Signal.keepIf"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"keepIf"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"keepWhen"},[{"tag":"Span","contents":[{"line":200,"column":5},{"line":200,"column":68},{"doc":"snd\n  <~ (keepIf\n        fst (False,def) (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"bs"},[{"tag":"Span","contents":[{"line":200,"column":5},{"line":200,"column":68},{"doc":"snd\n  <~ (keepIf\n        fst (False,def) (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"def"},[{"tag":"Span","contents":[{"line":200,"column":5},{"line":200,"column":68},{"doc":"snd\n  <~ (keepIf\n        fst (False,def) (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"sig"},[{"tag":"Span","contents":[{"line":200,"column":5},{"line":200,"column":68},{"doc":"snd\n  <~ (keepIf\n        fst (False,def) (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))"}]},{"tag":"Binop","contents":[{"home":{"tag":"Local","contents":[]},"name":"<~"},[{"tag":"Span","contents":[{"line":200,"column":5},{"line":200,"column":8},{"doc":"snd"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"snd"}}],[{"tag":"Span","contents":[{"line":200,"column":13},{"line":200,"column":68},{"doc":"keepIf\n  fst (False,def) (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":200,"column":13},{"line":200,"column":35},{"doc":"keepIf fst (False,def)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":200,"column":13},{"line":200,"column":23},{"doc":"keepIf fst"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":200,"column":13},{"line":200,"column":19},{"doc":"keepIf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"keepIf"}}],[{"tag":"Span","contents":[{"line":200,"column":20},{"line":200,"column":23},{"doc":"fst"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"fst"}}]]}],[{"tag":"Span","contents":[{"line":200,"column":25},{"line":200,"column":35},{"doc":"(False,def)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":200,"column":25},{"line":200,"column":30},{"doc":"False"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":false}}],[{"tag":"Span","contents":[{"line":200,"column":32},{"line":200,"column":35},{"doc":"def"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"def"}}]]]}]]}],[{"tag":"Span","contents":[{"line":200,"column":39},{"line":200,"column":68},{"doc":"((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig"}]},{"tag":"Binop","contents":[{"home":{"tag":"Local","contents":[]},"name":"~"},[{"tag":"Span","contents":[{"line":200,"column":39},{"line":200,"column":61},{"doc":"(\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Local","contents":[]},"name":"<~"},[{"tag":"Span","contents":[{"line":200,"column":39},{"line":200,"column":40},{"doc":"\\v0 v1 -> (v0,v1)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"v0"},[{"tag":"Span","contents":[{"line":200,"column":39},{"line":200,"column":40},{"doc":"\\v1 -> (v0,v1)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"v1"},[{"tag":"Span","contents":[{"line":200,"column":39},{"line":200,"column":40},{"doc":"(v0,v1)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":200,"column":39},{"line":200,"column":40},{"doc":"v0"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"v0"}}],[{"tag":"Span","contents":[{"line":200,"column":39},{"line":200,"column":40},{"doc":"v1"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"v1"}}]]]}]]}]]}],[{"tag":"Span","contents":[{"line":200,"column":46},{"line":200,"column":61},{"doc":"sampleOn sig bs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":200,"column":46},{"line":200,"column":58},{"doc":"sampleOn sig"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":200,"column":46},{"line":200,"column":54},{"doc":"sampleOn"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"sampleOn"}}],[{"tag":"Span","contents":[{"line":200,"column":55},{"line":200,"column":58},{"doc":"sig"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"sig"}}]]}],[{"tag":"Span","contents":[{"line":200,"column":59},{"line":200,"column":61},{"doc":"bs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"bs"}}]]}]]}],[{"tag":"Span","contents":[{"line":200,"column":65},{"line":200,"column":68},{"doc":"sig"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"sig"}}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"dropWhen"},[{"tag":"Span","contents":[{"line":207,"column":15},{"line":207,"column":34},{"doc":"keepWhen (not <~ bs)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"bs"},[{"tag":"Span","contents":[{"line":207,"column":15},{"line":207,"column":34},{"doc":"keepWhen (not <~ bs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":207,"column":15},{"line":207,"column":23},{"doc":"keepWhen"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"keepWhen"}}],[{"tag":"Span","contents":[{"line":207,"column":25},{"line":207,"column":34},{"doc":"not <~ bs"}]},{"tag":"Binop","contents":[{"home":{"tag":"Local","contents":[]},"name":"<~"},[{"tag":"Span","contents":[{"line":207,"column":25},{"line":207,"column":28},{"doc":"not"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"not"}}],[{"tag":"Span","contents":[{"line":207,"column":32},{"line":207,"column":34},{"doc":"bs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"bs"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"merge"},[{"tag":"Span","contents":[{"line":132,"column":12},{"line":132,"column":24},{"doc":"Native.Signal.merge"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"merge"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"mergeMany"},[{"tag":"Span","contents":[{"line":151,"column":5},{"line":151,"column":30},{"doc":"List.foldr1 merge signals"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"signals"},[{"tag":"Span","contents":[{"line":151,"column":5},{"line":151,"column":30},{"doc":"List.foldr1 merge signals"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":151,"column":5},{"line":151,"column":22},{"doc":"List.foldr1 merge"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":151,"column":5},{"line":151,"column":16},{"doc":"List.foldr1"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"foldr1"}}],[{"tag":"Span","contents":[{"line":151,"column":17},{"line":151,"column":22},{"doc":"merge"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"merge"}}]]}],[{"tag":"Span","contents":[{"line":151,"column":23},{"line":151,"column":30},{"doc":"signals"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"signals"}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"foldp"},[{"tag":"Span","contents":[{"line":112,"column":12},{"line":112,"column":24},{"doc":"Native.Signal.foldp"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"foldp"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"state"},{"tag":"Var","contents":"state"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"state"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"state"}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"map5"},[{"tag":"Span","contents":[{"line":91,"column":12},{"line":91,"column":23},{"doc":"Native.Signal.map5"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"map5"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},{"tag":"Var","contents":"result"}]}]}]}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"c"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"d"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"e"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"map4"},[{"tag":"Span","contents":[{"line":86,"column":12},{"line":86,"column":23},{"doc":"Native.Signal.map4"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"map4"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},{"tag":"Var","contents":"result"}]}]}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"c"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"d"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"map3"},[{"tag":"Span","contents":[{"line":81,"column":12},{"line":81,"column":23},{"doc":"Native.Signal.map3"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"map3"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},{"tag":"Var","contents":"result"}]}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"c"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"map2"},[{"tag":"Span","contents":[{"line":76,"column":12},{"line":76,"column":23},{"doc":"Native.Signal.map2"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"map2"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"result"}]}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"b"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"map"},[{"tag":"Span","contents":[{"line":58,"column":12},{"line":58,"column":22},{"doc":"Native.Signal.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"map"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Var","contents":"result"}]},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"result"}]]}]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"constant"},[{"tag":"Span","contents":[{"line":43,"column":12},{"line":43,"column":27},{"doc":"Native.Signal.constant"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Signal"]},"name":"constant"}}],{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]}]],[{"tag":"None","contents":{"doc":"let Signal : Signal.Signal a\n    Signal = Signal\n    constant : a -> Signal.Signal a\n    constant = Native.Signal.constant\n    map : (a -> result) -> Signal.Signal a -> Signal.Signal result\n    map = Native.Signal.map\n    map2 : (a -> b -> result)\n           -> Signal.Signal a -> Signal.Signal b -> Signal.Signal result\n    map2 = Native.Signal.map2\n    map3 : (a -> b -> c -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal result\n    map3 = Native.Signal.map3\n    map4 : (a -> b -> c -> d -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal result\n    map4 = Native.Signal.map4\n    map5 : (a -> b -> c -> d -> e -> result)\n           -> Signal.Signal a\n           -> Signal.Signal b\n           -> Signal.Signal c\n           -> Signal.Signal d\n           -> Signal.Signal e\n           -> Signal.Signal result\n    map5 = Native.Signal.map5\n    foldp : (a -> state -> state)\n            -> state -> Signal.Signal a -> Signal.Signal state\n    foldp = Native.Signal.foldp\n    merge : Signal.Signal a -> Signal.Signal a -> Signal.Signal a\n    merge = Native.Signal.merge\n    mergeMany : List (Signal.Signal a) -> Signal.Signal a\n    mergeMany = \\signals -> List.foldr1 merge signals\n    keepIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    keepIf = Native.Signal.keepIf\n    dropIf : (a -> Bool) -> a -> Signal.Signal a -> Signal.Signal a\n    dropIf = Native.Signal.dropIf\n    keepWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    keepWhen = \\bs def sig -> Basics.snd\n                                <~ (keepIf\n                                      Basics.fst\n                                      (False,def)\n                                      (((\\v0 v1 -> (v0,v1)) <~ (sampleOn sig bs)) ~ sig))\n    dropWhen : Signal.Signal Bool\n               -> a -> Signal.Signal a -> Signal.Signal a\n    dropWhen = \\bs -> keepWhen (Basics.not <~ bs)\n    dropRepeats : Signal.Signal a -> Signal.Signal a\n    dropRepeats = Native.Signal.dropRepeats\n    sampleOn : Signal.Signal a -> Signal.Signal b -> Signal.Signal b\n    sampleOn = Native.Signal.sampleOn\n    (<~) : (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (<~) = \\f s -> Native.Signal.map f s\n    (~) : Signal.Signal (a -> b) -> Signal.Signal a -> Signal.Signal b\n    (~) = \\sf s -> Native.Signal.map2 (\\f x -> f x) sf s\n    Channel : Signal.Channel a\n    Channel = Channel\n    Message : Signal.Message\n    Message = Message\n    channel : a -> Signal.Channel a\n    channel = Native.Signal.input\n    send : Signal.Channel a -> a -> Signal.Message\n    send = Native.Signal.send\n    subscribe : Signal.Channel a -> Signal.Signal a\n    subscribe = Native.Signal.subscribe\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Signal"},[{"tag":"None","contents":{"doc":"Signal"}},{"tag":"Data","contents":["Signal",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Signal"]},"name":"Signal"}},[{"tag":"Var","contents":"a"}]]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Basics"],{"tag":"Open","contents":{"_explicits":[{"tag":"Value","contents":"fst"},{"tag":"Value","contents":"snd"},{"tag":"Value","contents":"not"}],"_open":false}}],[["List"],{"tag":"As","contents":"List"}],[["Native","Signal"],{"tag":"As","contents":"Native.Signal"}]],"names":["Signal"],"exports":[{"tag":"Union","contents":["Signal",{"_explicits":["Signal"],"_open":false}]},{"tag":"Value","contents":"constant"},{"tag":"Value","contents":"map"},{"tag":"Value","contents":"map2"},{"tag":"Value","contents":"map3"},{"tag":"Value","contents":"map4"},{"tag":"Value","contents":"map5"},{"tag":"Value","contents":"foldp"},{"tag":"Value","contents":"merge"},{"tag":"Value","contents":"mergeMany"},{"tag":"Value","contents":"keepIf"},{"tag":"Value","contents":"dropIf"},{"tag":"Value","contents":"keepWhen"},{"tag":"Value","contents":"dropWhen"},{"tag":"Value","contents":"dropRepeats"},{"tag":"Value","contents":"sampleOn"},{"tag":"Value","contents":"<~"},{"tag":"Value","contents":"~"},{"tag":"Union","contents":["Channel",{"_explicits":["Channel"],"_open":false}]},{"tag":"Union","contents":["Message",{"_explicits":["Message"],"_open":false}]},{"tag":"Value","contents":"channel"},{"tag":"Value","contents":"send"},{"tag":"Value","contents":"subscribe"}]}
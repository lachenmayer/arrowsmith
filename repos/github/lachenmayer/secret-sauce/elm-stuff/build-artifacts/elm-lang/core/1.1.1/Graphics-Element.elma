{"path":"","body":{"fixities":[],"aliases":{"Element":[[],{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}],"Position":[[],{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}],"Properties":[[],{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]},"datatypes":{"Direction":[[],[["DUp",[]],["DDown",[]],["DLeft",[]],["DRight",[]],["DIn",[]],["DOut",[]]]],"Pos":[[],[["Absolute",[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]],["Relative",[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]]],"ImageStyle":[[],[["Plain",[]],["Fitted",[]],["Cropped",[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]],["Tiled",[]]]],"ElementPrim":[[],[["Image",[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]],["Container",[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]],["Flow",[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]]}]],["Spacer",[]],["RawHtml",[]],["Custom",[]]]],"Three":[[],[["P",[]],["Z",[]],["N",[]]]]},"types":{"bottomLeft":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"sizeOf":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]},"DRight":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"inward":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"tiledImage":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]}]},"absolute":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]},"height":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"Cropped":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}}]},"image":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]}]},"Absolute":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]},"bottomRight":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"Image":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]}]}]}]},"bottomRightAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"Flow":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]}]},"down":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"tag":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"Z":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},"flow":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"up":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"empty":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},"midRightAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"color":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"size":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]}]},"Tiled":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},"P":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"link":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"midRight":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"Custom":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},"left":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"DIn":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"midTop":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"Spacer":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},"topRightAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"width":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"outward":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"N":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},"spacer":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"midLeftAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"DDown":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"fittedImage":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]}]},"bottomLeftAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"opacity":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"relative":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]},"beside":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"Relative":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]},"midBottom":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"above":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"DLeft":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"container":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]}]}]},"widthOf":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]},"Container":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]}]},"Plain":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},"midBottomAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"newElement":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Record","contents":[[["element",{"tag":"Var","contents":"a"}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"DOut":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"topLeftAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"middle":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"middleAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"croppedImage":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]}]}]},"right":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},"layers":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]},"topLeft":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"topRight":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"midLeft":{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},"below":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"Element":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]}]}]},"midTopAt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]},"Fitted":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},"heightOf":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}],["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]},"RawHtml":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},"Position":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]}]},"Properties":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["height",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["id",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["width",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],null]}]}]}]}]}]}]}]}]}]}]},"DUp":{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}}},"program":[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"DOut"},[{"tag":"None","contents":{"doc":"DOut"}},{"tag":"Data","contents":["DOut",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"outward"},[{"tag":"Span","contents":[{"line":394,"column":11},{"line":394,"column":15},{"doc":"DOut"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DOut"}}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"DIn"},[{"tag":"None","contents":{"doc":"DIn"}},{"tag":"Data","contents":["DIn",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"inward"},[{"tag":"Span","contents":[{"line":391,"column":10},{"line":391,"column":13},{"doc":"DIn"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DIn"}}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"DRight"},[{"tag":"None","contents":{"doc":"DRight"}},{"tag":"Data","contents":["DRight",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"right"},[{"tag":"Span","contents":[{"line":388,"column":9},{"line":388,"column":15},{"doc":"DRight"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DRight"}}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"DLeft"},[{"tag":"None","contents":{"doc":"DLeft"}},{"tag":"Data","contents":["DLeft",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"left"},[{"tag":"Span","contents":[{"line":385,"column":8},{"line":385,"column":13},{"doc":"DLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DLeft"}}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"DDown"},[{"tag":"None","contents":{"doc":"DDown"}},{"tag":"Data","contents":["DDown",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"down"},[{"tag":"Span","contents":[{"line":382,"column":8},{"line":382,"column":13},{"doc":"DDown"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DDown"}}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"DUp"},[{"tag":"None","contents":{"doc":"DUp"}},{"tag":"Data","contents":["DUp",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"up"},[{"tag":"Span","contents":[{"line":379,"column":6},{"line":379,"column":9},{"doc":"DUp"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DUp"}}],{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Position"},[{"tag":"None","contents":{"doc":"{ horizontal = a, vertical = b, x = c, y = d }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"{ horizontal = a, vertical = b, x = c, y = d }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"{ horizontal = a, vertical = b, x = c, y = d }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"{ horizontal = a, vertical = b, x = c, y = d }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"{ horizontal = a, vertical = b, x = c, y = d }"}},{"tag":"Record","contents":[["horizontal",[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]],["vertical",[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]],["x",[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]],["y",[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Relative"},[{"tag":"None","contents":{"doc":"Relative a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Relative a"}},{"tag":"Data","contents":["Relative",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"relative"},[{"tag":"Span","contents":[{"line":338,"column":12},{"line":338,"column":20},{"doc":"Relative"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Relative"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Absolute"},[{"tag":"None","contents":{"doc":"Absolute a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Absolute a"}},{"tag":"Data","contents":["Absolute",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"absolute"},[{"tag":"Span","contents":[{"line":336,"column":12},{"line":336,"column":20},{"doc":"Absolute"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Absolute"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"N"},[{"tag":"None","contents":{"doc":"N"}},{"tag":"Data","contents":["N",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"bottomLeftAt"},[{"tag":"Span","contents":[{"line":366,"column":23},{"line":366,"column":65},{"doc":"{ horizontal = N, vertical = N, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":366,"column":23},{"line":366,"column":65},{"doc":"{ horizontal = N, vertical = N, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":366,"column":23},{"line":366,"column":65},{"doc":"{ horizontal = N, vertical = N, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":366,"column":36},{"line":366,"column":37},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]],["vertical",[{"tag":"Span","contents":[{"line":366,"column":50},{"line":366,"column":51},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]],["x",[{"tag":"Span","contents":[{"line":366,"column":57},{"line":366,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":366,"column":64},{"line":366,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Z"},[{"tag":"None","contents":{"doc":"Z"}},{"tag":"Data","contents":["Z",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"middle"},[{"tag":"Span","contents":[{"line":341,"column":17},{"line":341,"column":73},{"doc":"{ horizontal = Z, vertical = Z, x = Relative 0.5, y = Relative 0.5\n}"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":341,"column":28},{"line":341,"column":29},{"doc":"Z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Z"}}]],["vertical",[{"tag":"Span","contents":[{"line":341,"column":40},{"line":341,"column":41},{"doc":"Z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Z"}}]],["x",[{"tag":"Span","contents":[{"line":341,"column":45},{"line":341,"column":57},{"doc":"Relative 0.5"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":341,"column":45},{"line":341,"column":53},{"doc":"Relative"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Relative"}}],[{"tag":"Span","contents":[{"line":341,"column":54},{"line":341,"column":57},{"doc":"0.5"}]},{"tag":"Literal","contents":{"tag":"FloatNum","contents":0.5}}]]}]],["y",[{"tag":"Span","contents":[{"line":341,"column":61},{"line":341,"column":73},{"doc":"Relative 0.5"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":341,"column":61},{"line":341,"column":69},{"doc":"Relative"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Relative"}}],[{"tag":"Span","contents":[{"line":341,"column":70},{"line":341,"column":73},{"doc":"0.5"}]},{"tag":"Literal","contents":{"tag":"FloatNum","contents":0.5}}]]}]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"midLeft"},[{"tag":"Span","contents":[{"line":351,"column":25},{"line":351,"column":59},{"doc":"{middle | horizontal <- N, x <- Absolute 0}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":351,"column":17},{"line":351,"column":23},{"doc":"middle"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"middle"}}],[["horizontal",[{"tag":"Span","contents":[{"line":351,"column":41},{"line":351,"column":42},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]],["x",[{"tag":"Span","contents":[{"line":351,"column":49},{"line":351,"column":59},{"doc":"Absolute 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":351,"column":49},{"line":351,"column":57},{"doc":"Absolute"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Absolute"}}],[{"tag":"Span","contents":[{"line":351,"column":58},{"line":351,"column":59},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}]]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"middleAt"},[{"tag":"Span","contents":[{"line":360,"column":23},{"line":360,"column":65},{"doc":"{ horizontal = Z, vertical = Z, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":360,"column":23},{"line":360,"column":65},{"doc":"{ horizontal = Z, vertical = Z, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":360,"column":23},{"line":360,"column":65},{"doc":"{ horizontal = Z, vertical = Z, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":360,"column":36},{"line":360,"column":37},{"doc":"Z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Z"}}]],["vertical",[{"tag":"Span","contents":[{"line":360,"column":50},{"line":360,"column":51},{"doc":"Z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Z"}}]],["x",[{"tag":"Span","contents":[{"line":360,"column":57},{"line":360,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":360,"column":64},{"line":360,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"midLeftAt"},[{"tag":"Span","contents":[{"line":370,"column":23},{"line":370,"column":65},{"doc":"{ horizontal = N, vertical = Z, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":370,"column":23},{"line":370,"column":65},{"doc":"{ horizontal = N, vertical = Z, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":370,"column":23},{"line":370,"column":65},{"doc":"{ horizontal = N, vertical = Z, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":370,"column":36},{"line":370,"column":37},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]],["vertical",[{"tag":"Span","contents":[{"line":370,"column":50},{"line":370,"column":51},{"doc":"Z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Z"}}]],["x",[{"tag":"Span","contents":[{"line":370,"column":57},{"line":370,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":370,"column":64},{"line":370,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"midBottomAt"},[{"tag":"Span","contents":[{"line":376,"column":23},{"line":376,"column":65},{"doc":"{ horizontal = Z, vertical = N, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":376,"column":23},{"line":376,"column":65},{"doc":"{ horizontal = Z, vertical = N, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":376,"column":23},{"line":376,"column":65},{"doc":"{ horizontal = Z, vertical = N, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":376,"column":36},{"line":376,"column":37},{"doc":"Z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Z"}}]],["vertical",[{"tag":"Span","contents":[{"line":376,"column":50},{"line":376,"column":51},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]],["x",[{"tag":"Span","contents":[{"line":376,"column":57},{"line":376,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":376,"column":64},{"line":376,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"P"},[{"tag":"None","contents":{"doc":"P"}},{"tag":"Data","contents":["P",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"topLeft"},[{"tag":"Span","contents":[{"line":343,"column":17},{"line":343,"column":69},{"doc":"{ horizontal = N, vertical = P, x = Absolute 0, y = Absolute 0 }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":343,"column":28},{"line":343,"column":29},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]],["vertical",[{"tag":"Span","contents":[{"line":343,"column":40},{"line":343,"column":41},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]],["x",[{"tag":"Span","contents":[{"line":343,"column":45},{"line":343,"column":55},{"doc":"Absolute 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":343,"column":45},{"line":343,"column":53},{"doc":"Absolute"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Absolute"}}],[{"tag":"Span","contents":[{"line":343,"column":54},{"line":343,"column":55},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}]],["y",[{"tag":"Span","contents":[{"line":343,"column":59},{"line":343,"column":69},{"doc":"Absolute 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":343,"column":59},{"line":343,"column":67},{"doc":"Absolute"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Absolute"}}],[{"tag":"Span","contents":[{"line":343,"column":68},{"line":343,"column":69},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"bottomLeft"},[{"tag":"Span","contents":[{"line":347,"column":25},{"line":347,"column":40},{"doc":"{topLeft | vertical <- N}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":347,"column":17},{"line":347,"column":24},{"doc":"topLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"topLeft"}}],[["vertical",[{"tag":"Span","contents":[{"line":347,"column":39},{"line":347,"column":40},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"topRight"},[{"tag":"Span","contents":[{"line":345,"column":25},{"line":345,"column":42},{"doc":"{topLeft | horizontal <- P}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":345,"column":17},{"line":345,"column":24},{"doc":"topLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"topLeft"}}],[["horizontal",[{"tag":"Span","contents":[{"line":345,"column":41},{"line":345,"column":42},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"bottomRight"},[{"tag":"Span","contents":[{"line":349,"column":28},{"line":349,"column":45},{"doc":"{bottomLeft | horizontal <- P}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":349,"column":17},{"line":349,"column":27},{"doc":"bottomLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"bottomLeft"}}],[["horizontal",[{"tag":"Span","contents":[{"line":349,"column":44},{"line":349,"column":45},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"midRight"},[{"tag":"Span","contents":[{"line":353,"column":25},{"line":353,"column":42},{"doc":"{midLeft | horizontal <- P}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":353,"column":17},{"line":353,"column":24},{"doc":"midLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"midLeft"}}],[["horizontal",[{"tag":"Span","contents":[{"line":353,"column":41},{"line":353,"column":42},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"midTop"},[{"tag":"Span","contents":[{"line":355,"column":25},{"line":355,"column":57},{"doc":"{middle | vertical <- P, y <- Absolute 0}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":355,"column":17},{"line":355,"column":23},{"doc":"middle"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"middle"}}],[["vertical",[{"tag":"Span","contents":[{"line":355,"column":39},{"line":355,"column":40},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]],["y",[{"tag":"Span","contents":[{"line":355,"column":47},{"line":355,"column":57},{"doc":"Absolute 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":355,"column":47},{"line":355,"column":55},{"doc":"Absolute"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Absolute"}}],[{"tag":"Span","contents":[{"line":355,"column":56},{"line":355,"column":57},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}]]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"midBottom"},[{"tag":"Span","contents":[{"line":357,"column":25},{"line":357,"column":40},{"doc":"{midTop | vertical <- N}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":357,"column":17},{"line":357,"column":23},{"doc":"midTop"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"midTop"}}],[["vertical",[{"tag":"Span","contents":[{"line":357,"column":39},{"line":357,"column":40},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]]]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"topLeftAt"},[{"tag":"Span","contents":[{"line":362,"column":23},{"line":362,"column":65},{"doc":"{ horizontal = N, vertical = P, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":362,"column":23},{"line":362,"column":65},{"doc":"{ horizontal = N, vertical = P, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":362,"column":23},{"line":362,"column":65},{"doc":"{ horizontal = N, vertical = P, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":362,"column":36},{"line":362,"column":37},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]],["vertical",[{"tag":"Span","contents":[{"line":362,"column":50},{"line":362,"column":51},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]],["x",[{"tag":"Span","contents":[{"line":362,"column":57},{"line":362,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":362,"column":64},{"line":362,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"topRightAt"},[{"tag":"Span","contents":[{"line":364,"column":23},{"line":364,"column":65},{"doc":"{ horizontal = P, vertical = P, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":364,"column":23},{"line":364,"column":65},{"doc":"{ horizontal = P, vertical = P, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":364,"column":23},{"line":364,"column":65},{"doc":"{ horizontal = P, vertical = P, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":364,"column":36},{"line":364,"column":37},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]],["vertical",[{"tag":"Span","contents":[{"line":364,"column":50},{"line":364,"column":51},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]],["x",[{"tag":"Span","contents":[{"line":364,"column":57},{"line":364,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":364,"column":64},{"line":364,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"bottomRightAt"},[{"tag":"Span","contents":[{"line":368,"column":23},{"line":368,"column":65},{"doc":"{ horizontal = P, vertical = N, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":368,"column":23},{"line":368,"column":65},{"doc":"{ horizontal = P, vertical = N, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":368,"column":23},{"line":368,"column":65},{"doc":"{ horizontal = P, vertical = N, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":368,"column":36},{"line":368,"column":37},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]],["vertical",[{"tag":"Span","contents":[{"line":368,"column":50},{"line":368,"column":51},{"doc":"N"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"N"}}]],["x",[{"tag":"Span","contents":[{"line":368,"column":57},{"line":368,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":368,"column":64},{"line":368,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"midRightAt"},[{"tag":"Span","contents":[{"line":372,"column":23},{"line":372,"column":65},{"doc":"{ horizontal = P, vertical = Z, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":372,"column":23},{"line":372,"column":65},{"doc":"{ horizontal = P, vertical = Z, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":372,"column":23},{"line":372,"column":65},{"doc":"{ horizontal = P, vertical = Z, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":372,"column":36},{"line":372,"column":37},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]],["vertical",[{"tag":"Span","contents":[{"line":372,"column":50},{"line":372,"column":51},{"doc":"Z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Z"}}]],["x",[{"tag":"Span","contents":[{"line":372,"column":57},{"line":372,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":372,"column":64},{"line":372,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"midTopAt"},[{"tag":"Span","contents":[{"line":374,"column":23},{"line":374,"column":65},{"doc":"{ horizontal = Z, vertical = P, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"x"},[{"tag":"Span","contents":[{"line":374,"column":23},{"line":374,"column":65},{"doc":"{ horizontal = Z, vertical = P, x = x, y = y }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"y"},[{"tag":"Span","contents":[{"line":374,"column":23},{"line":374,"column":65},{"doc":"{ horizontal = Z, vertical = P, x = x, y = y }"}]},{"tag":"Record","contents":[["horizontal",[{"tag":"Span","contents":[{"line":374,"column":36},{"line":374,"column":37},{"doc":"Z"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Z"}}]],["vertical",[{"tag":"Span","contents":[{"line":374,"column":50},{"line":374,"column":51},{"doc":"P"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"P"}}]],["x",[{"tag":"Span","contents":[{"line":374,"column":57},{"line":374,"column":58},{"doc":"x"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"x"}}]],["y",[{"tag":"Span","contents":[{"line":374,"column":64},{"line":374,"column":65},{"doc":"y"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"y"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Tiled"},[{"tag":"None","contents":{"doc":"Tiled"}},{"tag":"Data","contents":["Tiled",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Cropped"},[{"tag":"None","contents":{"doc":"Cropped a"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Cropped a"}},{"tag":"Data","contents":["Cropped",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},[]]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Fitted"},[{"tag":"None","contents":{"doc":"Fitted"}},{"tag":"Data","contents":["Fitted",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Plain"},[{"tag":"None","contents":{"doc":"Plain"}},{"tag":"Data","contents":["Plain",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Custom"},[{"tag":"None","contents":{"doc":"Custom"}},{"tag":"Data","contents":["Custom",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"RawHtml"},[{"tag":"None","contents":{"doc":"RawHtml"}},{"tag":"Data","contents":["RawHtml",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Spacer"},[{"tag":"None","contents":{"doc":"Spacer"}},{"tag":"Data","contents":["Spacer",[]]}],{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},[]]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Flow"},[{"tag":"None","contents":{"doc":"Flow a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Flow a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"Flow a b"}},{"tag":"Data","contents":["Flow",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},[]]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Container"},[{"tag":"None","contents":{"doc":"Container a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Container a b"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"Container a b"}},{"tag":"Data","contents":["Container",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},[]]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Image"},[{"tag":"None","contents":{"doc":"Image a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"Image a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"Image a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"Image a b c d"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"Image a b c d"}},{"tag":"Data","contents":["Image",[[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}],[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}],[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}],[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ImageStyle"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},[]]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"link"},[{"tag":"Span","contents":[{"line":175,"column":5},{"line":179,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | href <- href} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"href"},[{"tag":"Span","contents":[{"line":175,"column":5},{"line":179,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | href <- href} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":175,"column":5},{"line":179,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | href <- href} }"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":175,"column":13},{"line":175,"column":20},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":175,"column":13},{"line":175,"column":14},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],null]],[{"tag":"Span","contents":[{"line":177,"column":11},{"line":178,"column":39},{"doc":"{ element = e.element, props = {p | href <- href} }"}]},{"tag":"Record","contents":[["element",[{"tag":"Span","contents":[{"line":177,"column":21},{"line":177,"column":30},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":177,"column":21},{"line":177,"column":22},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}]],["props",[{"tag":"Span","contents":[{"line":178,"column":23},{"line":178,"column":37},{"doc":"{p | href <- href}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":178,"column":21},{"line":178,"column":22},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[["href",[{"tag":"Span","contents":[{"line":178,"column":33},{"line":178,"column":37},{"doc":"href"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"href"}}]]]]}]]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"tag"},[{"tag":"Span","contents":[{"line":165,"column":5},{"line":169,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | tag <- name} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"name"},[{"tag":"Span","contents":[{"line":165,"column":5},{"line":169,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | tag <- name} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":165,"column":5},{"line":169,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | tag <- name} }"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":165,"column":13},{"line":165,"column":20},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":165,"column":13},{"line":165,"column":14},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],null]],[{"tag":"Span","contents":[{"line":167,"column":11},{"line":168,"column":38},{"doc":"{ element = e.element, props = {p | tag <- name} }"}]},{"tag":"Record","contents":[["element",[{"tag":"Span","contents":[{"line":167,"column":21},{"line":167,"column":30},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":167,"column":21},{"line":167,"column":22},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}]],["props",[{"tag":"Span","contents":[{"line":168,"column":23},{"line":168,"column":36},{"doc":"{p | tag <- name}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":168,"column":21},{"line":168,"column":22},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[["tag",[{"tag":"Span","contents":[{"line":168,"column":32},{"line":168,"column":36},{"doc":"name"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"name"}}]]]]}]]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"color"},[{"tag":"Span","contents":[{"line":153,"column":13},{"line":156,"column":14},{"doc":"let p = e.props\nin { element = e.element, props = {p | color <- Just c} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"Span","contents":[{"line":153,"column":13},{"line":156,"column":14},{"doc":"let p = e.props\nin { element = e.element, props = {p | color <- Just c} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":153,"column":13},{"line":156,"column":14},{"doc":"let p = e.props\nin { element = e.element, props = {p | color <- Just c} }"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":153,"column":21},{"line":153,"column":28},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":153,"column":21},{"line":153,"column":22},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],null]],[{"tag":"Span","contents":[{"line":154,"column":15},{"line":155,"column":45},{"doc":"{ element = e.element, props = {p | color <- Just c} }"}]},{"tag":"Record","contents":[["element",[{"tag":"Span","contents":[{"line":154,"column":25},{"line":154,"column":34},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":154,"column":25},{"line":154,"column":26},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}]],["props",[{"tag":"Span","contents":[{"line":155,"column":27},{"line":155,"column":44},{"doc":"{p | color <- Just c}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":155,"column":25},{"line":155,"column":26},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[["color",[{"tag":"Span","contents":[{"line":155,"column":38},{"line":155,"column":44},{"doc":"Just c"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":155,"column":38},{"line":155,"column":42},{"doc":"Just"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Just"}}],[{"tag":"Span","contents":[{"line":155,"column":43},{"line":155,"column":44},{"doc":"c"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]]}]]]]}]]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"opacity"},[{"tag":"Span","contents":[{"line":144,"column":5},{"line":148,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | opacity <- o} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"o"},[{"tag":"Span","contents":[{"line":144,"column":5},{"line":148,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | opacity <- o} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":144,"column":5},{"line":148,"column":10},{"doc":"let p = e.props\nin { element = e.element, props = {p | opacity <- o} }"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":144,"column":13},{"line":144,"column":20},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":144,"column":13},{"line":144,"column":14},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],null]],[{"tag":"Span","contents":[{"line":146,"column":11},{"line":147,"column":39},{"doc":"{ element = e.element, props = {p | opacity <- o} }"}]},{"tag":"Record","contents":[["element",[{"tag":"Span","contents":[{"line":146,"column":21},{"line":146,"column":30},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":146,"column":21},{"line":146,"column":22},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}]],["props",[{"tag":"Span","contents":[{"line":147,"column":23},{"line":147,"column":37},{"doc":"{p | opacity <- o}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":147,"column":21},{"line":147,"column":22},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[["opacity",[{"tag":"Span","contents":[{"line":147,"column":36},{"line":147,"column":37},{"doc":"o"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"o"}}]]]]}]]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"height"},[{"tag":"Span","contents":[{"line":119,"column":5},{"line":130,"column":10},{"doc":"let p = e.props\n    props = case e.element of\n              Image _ w h _ -> {p | width <- round\n                                               (((toFloat w) / (toFloat h)) * (toFloat nh))}\n              _ -> p\nin { element = e.element, props = {p | height <- nh} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"nh"},[{"tag":"Span","contents":[{"line":119,"column":5},{"line":130,"column":10},{"doc":"let p = e.props\n    props = case e.element of\n              Image _ w h _ -> {p | width <- round\n                                               (((toFloat w) / (toFloat h)) * (toFloat nh))}\n              _ -> p\nin { element = e.element, props = {p | height <- nh} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":119,"column":5},{"line":130,"column":10},{"doc":"let p = e.props\n    props = case e.element of\n              Image _ w h _ -> {p | width <- round\n                                               (((toFloat w) / (toFloat h)) * (toFloat nh))}\n              _ -> p\nin { element = e.element, props = {p | height <- nh} }"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":119,"column":13},{"line":119,"column":20},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":119,"column":13},{"line":119,"column":14},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],null]],[{"tag":"Span","contents":[{"line":119,"column":5},{"line":130,"column":10},{"doc":"let p = e.props\n    props = case e.element of\n              Image _ w h _ -> {p | width <- round\n                                               (((toFloat w) / (toFloat h)) * (toFloat nh))}\n              _ -> p\nin { element = e.element, props = {p | height <- nh} }"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"props"},[{"tag":"Span","contents":[{"line":121,"column":13},{"line":127,"column":5},{"doc":"case e.element of\n  Image _ w h _ -> {p | width <- round\n                                   (((toFloat w) / (toFloat h)) * (toFloat nh))}\n  _ -> p"}]},{"tag":"Case","contents":[[{"tag":"Span","contents":[{"line":121,"column":18},{"line":121,"column":27},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":121,"column":18},{"line":121,"column":19},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}],[[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Image"},[{"tag":"Anything","contents":[]},{"tag":"Var","contents":"w"},{"tag":"Var","contents":"h"},{"tag":"Anything","contents":[]}]]},[{"tag":"Span","contents":[{"line":123,"column":23},{"line":124,"column":74},{"doc":"{p | width <- round (((toFloat w) / (toFloat h)) * (toFloat nh))}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":123,"column":21},{"line":123,"column":22},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[["width",[{"tag":"Span","contents":[{"line":124,"column":32},{"line":124,"column":73},{"doc":"round (((toFloat w) / (toFloat h)) * (toFloat nh))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":124,"column":32},{"line":124,"column":37},{"doc":"round"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"round"}}],[{"tag":"Span","contents":[{"line":124,"column":39},{"line":124,"column":73},{"doc":"((toFloat w) / (toFloat h)) * (toFloat nh)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":124,"column":39},{"line":124,"column":60},{"doc":"(toFloat w) / (toFloat h)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":124,"column":39},{"line":124,"column":48},{"doc":"toFloat w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":124,"column":39},{"line":124,"column":46},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":124,"column":47},{"line":124,"column":48},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":124,"column":51},{"line":124,"column":60},{"doc":"toFloat h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":124,"column":51},{"line":124,"column":58},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":124,"column":59},{"line":124,"column":60},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}]]}],[{"tag":"Span","contents":[{"line":124,"column":63},{"line":124,"column":73},{"doc":"toFloat nh"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":124,"column":63},{"line":124,"column":70},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":124,"column":71},{"line":124,"column":73},{"doc":"nh"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"nh"}}]]}]]}]]}]]]]}]],[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":126,"column":20},{"line":126,"column":21},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}]]]]}],null]],[{"tag":"Span","contents":[{"line":128,"column":11},{"line":129,"column":39},{"doc":"{ element = e.element, props = {p | height <- nh} }"}]},{"tag":"Record","contents":[["element",[{"tag":"Span","contents":[{"line":128,"column":21},{"line":128,"column":30},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":128,"column":21},{"line":128,"column":22},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}]],["props",[{"tag":"Span","contents":[{"line":129,"column":23},{"line":129,"column":37},{"doc":"{p | height <- nh}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":129,"column":21},{"line":129,"column":22},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[["height",[{"tag":"Span","contents":[{"line":129,"column":35},{"line":129,"column":37},{"doc":"nh"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"nh"}}]]]]}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"width"},[{"tag":"Span","contents":[{"line":95,"column":5},{"line":113,"column":10},{"doc":"let p = e.props\n    props = case e.element of\n              Image _ w h _ -> {p | height <- round\n                                                (((toFloat h) / (toFloat w)) * (toFloat nw))}\n              RawHtml -> {p | height <- snd\n                                          (Native.Graphics.Element.htmlHeight nw e.element)}\n              _ -> p\nin { element = e.element, props = {props | width <- nw} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"nw"},[{"tag":"Span","contents":[{"line":95,"column":5},{"line":113,"column":10},{"doc":"let p = e.props\n    props = case e.element of\n              Image _ w h _ -> {p | height <- round\n                                                (((toFloat h) / (toFloat w)) * (toFloat nw))}\n              RawHtml -> {p | height <- snd\n                                          (Native.Graphics.Element.htmlHeight nw e.element)}\n              _ -> p\nin { element = e.element, props = {props | width <- nw} }"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":95,"column":5},{"line":113,"column":10},{"doc":"let p = e.props\n    props = case e.element of\n              Image _ w h _ -> {p | height <- round\n                                                (((toFloat h) / (toFloat w)) * (toFloat nw))}\n              RawHtml -> {p | height <- snd\n                                          (Native.Graphics.Element.htmlHeight nw e.element)}\n              _ -> p\nin { element = e.element, props = {props | width <- nw} }"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"p"},[{"tag":"Span","contents":[{"line":95,"column":13},{"line":95,"column":20},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":95,"column":13},{"line":95,"column":14},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],null]],[{"tag":"Span","contents":[{"line":95,"column":5},{"line":113,"column":10},{"doc":"let p = e.props\n    props = case e.element of\n              Image _ w h _ -> {p | height <- round\n                                                (((toFloat h) / (toFloat w)) * (toFloat nw))}\n              RawHtml -> {p | height <- snd\n                                          (Native.Graphics.Element.htmlHeight nw e.element)}\n              _ -> p\nin { element = e.element, props = {props | width <- nw} }"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"props"},[{"tag":"Span","contents":[{"line":98,"column":13},{"line":110,"column":5},{"doc":"case e.element of\n  Image _ w h _ -> {p | height <- round\n                                    (((toFloat h) / (toFloat w)) * (toFloat nw))}\n  RawHtml -> {p | height <- snd\n                              (Native.Graphics.Element.htmlHeight nw e.element)}\n  _ -> p"}]},{"tag":"Case","contents":[[{"tag":"Span","contents":[{"line":98,"column":18},{"line":98,"column":27},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":98,"column":18},{"line":98,"column":19},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}],[[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Image"},[{"tag":"Anything","contents":[]},{"tag":"Var","contents":"w"},{"tag":"Var","contents":"h"},{"tag":"Anything","contents":[]}]]},[{"tag":"Span","contents":[{"line":100,"column":23},{"line":101,"column":75},{"doc":"{p | height <- round (((toFloat h) / (toFloat w)) * (toFloat nw))}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":100,"column":21},{"line":100,"column":22},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[["height",[{"tag":"Span","contents":[{"line":101,"column":33},{"line":101,"column":74},{"doc":"round (((toFloat h) / (toFloat w)) * (toFloat nw))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":101,"column":33},{"line":101,"column":38},{"doc":"round"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"round"}}],[{"tag":"Span","contents":[{"line":101,"column":40},{"line":101,"column":74},{"doc":"((toFloat h) / (toFloat w)) * (toFloat nw)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"*"},[{"tag":"Span","contents":[{"line":101,"column":40},{"line":101,"column":61},{"doc":"(toFloat h) / (toFloat w)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"/"},[{"tag":"Span","contents":[{"line":101,"column":40},{"line":101,"column":49},{"doc":"toFloat h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":101,"column":40},{"line":101,"column":47},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":101,"column":48},{"line":101,"column":49},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":101,"column":52},{"line":101,"column":61},{"doc":"toFloat w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":101,"column":52},{"line":101,"column":59},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":101,"column":60},{"line":101,"column":61},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}]]}],[{"tag":"Span","contents":[{"line":101,"column":64},{"line":101,"column":74},{"doc":"toFloat nw"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":101,"column":64},{"line":101,"column":71},{"doc":"toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"toFloat"}}],[{"tag":"Span","contents":[{"line":101,"column":72},{"line":101,"column":74},{"doc":"nw"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"nw"}}]]}]]}]]}]]]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"RawHtml"},[]]},[{"tag":"Span","contents":[{"line":105,"column":23},{"line":106,"column":86},{"doc":"{p | height <- snd\n                 (Native.Graphics.Element.htmlHeight nw e.element)}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":105,"column":21},{"line":105,"column":22},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}],[["height",[{"tag":"Span","contents":[{"line":106,"column":33},{"line":106,"column":85},{"doc":"snd (Native.Graphics.Element.htmlHeight nw e.element)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":106,"column":33},{"line":106,"column":36},{"doc":"snd"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"snd"}}],[{"tag":"Span","contents":[{"line":106,"column":54},{"line":106,"column":85},{"doc":"Native.Graphics.Element.htmlHeight nw e.element"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":106,"column":54},{"line":106,"column":75},{"doc":"Native.Graphics.Element.htmlHeight nw"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":106,"column":54},{"line":106,"column":72},{"doc":"Native.Graphics.Element.htmlHeight"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Graphics","Element"]},"name":"htmlHeight"}}],[{"tag":"Span","contents":[{"line":106,"column":73},{"line":106,"column":75},{"doc":"nw"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"nw"}}]]}],[{"tag":"Span","contents":[{"line":106,"column":76},{"line":106,"column":85},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":106,"column":76},{"line":106,"column":77},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}]]}]]}]]]]}]],[{"tag":"Anything","contents":[]},[{"tag":"Span","contents":[{"line":109,"column":20},{"line":109,"column":21},{"doc":"p"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"p"}}]]]]}],null]],[{"tag":"Span","contents":[{"line":111,"column":11},{"line":112,"column":42},{"doc":"{ element = e.element, props = {props | width <- nw} }"}]},{"tag":"Record","contents":[["element",[{"tag":"Span","contents":[{"line":111,"column":21},{"line":111,"column":30},{"doc":"e.element"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":111,"column":21},{"line":111,"column":22},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"element"]}]],["props",[{"tag":"Span","contents":[{"line":112,"column":27},{"line":112,"column":40},{"doc":"{props | width <- nw}"}]},{"tag":"Modify","contents":[[{"tag":"Span","contents":[{"line":112,"column":21},{"line":112,"column":26},{"doc":"props"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"props"}}],[["width",[{"tag":"Span","contents":[{"line":112,"column":38},{"line":112,"column":40},{"doc":"nw"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"nw"}}]]]]}]]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"size"},[{"tag":"Span","contents":[{"line":136,"column":5},{"line":136,"column":24},{"doc":"height h (width w e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":136,"column":5},{"line":136,"column":24},{"doc":"height h (width w e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":136,"column":5},{"line":136,"column":24},{"doc":"height h (width w e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":136,"column":5},{"line":136,"column":24},{"doc":"height h (width w e)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":5},{"line":136,"column":13},{"doc":"height h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":5},{"line":136,"column":11},{"doc":"height"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"height"}}],[{"tag":"Span","contents":[{"line":136,"column":12},{"line":136,"column":13},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":136,"column":15},{"line":136,"column":24},{"doc":"width w e"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":15},{"line":136,"column":22},{"doc":"width w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":136,"column":15},{"line":136,"column":20},{"doc":"width"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"width"}}],[{"tag":"Span","contents":[{"line":136,"column":21},{"line":136,"column":22},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":136,"column":23},{"line":136,"column":24},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"sizeOf"},[{"tag":"Span","contents":[{"line":89,"column":6},{"line":89,"column":35},{"doc":"(e.props.width,e.props.height)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":89,"column":6},{"line":89,"column":35},{"doc":"(e.props.width,e.props.height)"}]},{"tag":"Data","contents":["_Tuple2",[[{"tag":"Span","contents":[{"line":89,"column":8},{"line":89,"column":19},{"doc":"e.props.width"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":89,"column":6},{"line":89,"column":13},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":89,"column":6},{"line":89,"column":7},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],"width"]}],[{"tag":"Span","contents":[{"line":89,"column":23},{"line":89,"column":35},{"doc":"e.props.height"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":89,"column":21},{"line":89,"column":28},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":89,"column":21},{"line":89,"column":22},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],"height"]}]]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"heightOf"},[{"tag":"Span","contents":[{"line":83,"column":7},{"line":83,"column":19},{"doc":"e.props.height"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":83,"column":7},{"line":83,"column":19},{"doc":"e.props.height"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":83,"column":5},{"line":83,"column":12},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":83,"column":5},{"line":83,"column":6},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],"height"]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"widthOf"},[{"tag":"Span","contents":[{"line":77,"column":7},{"line":77,"column":18},{"doc":"e.props.width"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":77,"column":7},{"line":77,"column":18},{"doc":"e.props.width"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":77,"column":5},{"line":77,"column":12},{"doc":"e.props"}]},{"tag":"Access","contents":[[{"tag":"Span","contents":[{"line":77,"column":5},{"line":77,"column":6},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}],"props"]}],"width"]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Element"},[{"tag":"None","contents":{"doc":"{ props = a, element = b }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"{ props = a, element = b }"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"{ props = a, element = b }"}},{"tag":"Record","contents":[["props",[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]],["element",[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"Properties"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"c"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"d"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"f"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"g"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"i"},[{"tag":"None","contents":{"doc":"{ id = a\n, width = b\n, height = c\n, opacity = d\n, color = e\n, href = f\n, tag = g\n, hover = h\n, click = i\n}"}},{"tag":"Record","contents":[["id",[{"tag":"None","contents":{"doc":"a"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"a"}}]],["width",[{"tag":"None","contents":{"doc":"b"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"b"}}]],["height",[{"tag":"None","contents":{"doc":"c"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"c"}}]],["opacity",[{"tag":"None","contents":{"doc":"d"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"d"}}]],["color",[{"tag":"None","contents":{"doc":"e"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]],["href",[{"tag":"None","contents":{"doc":"f"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"f"}}]],["tag",[{"tag":"None","contents":{"doc":"g"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"g"}}]],["hover",[{"tag":"None","contents":{"doc":"h"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]],["click",[{"tag":"None","contents":{"doc":"i"}},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"i"}}]]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}]}]}]}]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"newElement"},[{"tag":"Span","contents":[{"line":183,"column":5},{"line":184,"column":16},{"doc":"{ props = Properties\n            (Native.Graphics.Element.guid ()) w h 1 Nothing \"\" \"\" () ()\n, element = e\n}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":183,"column":5},{"line":184,"column":16},{"doc":"{ props = Properties\n            (Native.Graphics.Element.guid ()) w h 1 Nothing \"\" \"\" () ()\n, element = e\n}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":183,"column":5},{"line":184,"column":16},{"doc":"{ props = Properties\n            (Native.Graphics.Element.guid ()) w h 1 Nothing \"\" \"\" () ()\n, element = e\n}"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":183,"column":5},{"line":184,"column":16},{"doc":"{ props = Properties\n            (Native.Graphics.Element.guid ()) w h 1 Nothing \"\" \"\" () ()\n, element = e\n}"}]},{"tag":"Record","contents":[["props",[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":82},{"doc":"Properties\n  (Native.Graphics.Element.guid ()) w h 1 Nothing \"\" \"\" () ()"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":79},{"doc":"Properties (Native.Graphics.Element.guid ()) w h 1 Nothing \"\" \"\" ()"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":77},{"doc":"Properties (Native.Graphics.Element.guid ()) w h 1 Nothing \"\" \"\""}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":74},{"doc":"Properties (Native.Graphics.Element.guid ()) w h 1 Nothing \"\""}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":71},{"doc":"Properties (Native.Graphics.Element.guid ()) w h 1 Nothing"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":63},{"doc":"Properties (Native.Graphics.Element.guid ()) w h 1"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":61},{"doc":"Properties (Native.Graphics.Element.guid ()) w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":59},{"doc":"Properties (Native.Graphics.Element.guid ()) w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":55},{"doc":"Properties (Native.Graphics.Element.guid ())"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":13},{"line":183,"column":23},{"doc":"Properties"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Properties"}}],[{"tag":"Span","contents":[{"line":183,"column":41},{"line":183,"column":55},{"doc":"Native.Graphics.Element.guid ()"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":183,"column":41},{"line":183,"column":53},{"doc":"Native.Graphics.Element.guid"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","Graphics","Element"]},"name":"guid"}}],[{"tag":"Span","contents":[{"line":183,"column":55},{"line":183,"column":55},{"doc":"()"}]},{"tag":"Data","contents":["_Tuple0",[]]}]]}]]}],[{"tag":"Span","contents":[{"line":183,"column":58},{"line":183,"column":59},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":183,"column":60},{"line":183,"column":61},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":183,"column":62},{"line":183,"column":63},{"doc":"1"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":1}}]]}],[{"tag":"Span","contents":[{"line":183,"column":64},{"line":183,"column":71},{"doc":"Nothing"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Nothing"}}]]}],[{"tag":"Span","contents":[{"line":183,"column":72},{"line":183,"column":74},{"doc":"\"\""}]},{"tag":"Literal","contents":{"tag":"Str","contents":""}}]]}],[{"tag":"Span","contents":[{"line":183,"column":75},{"line":183,"column":77},{"doc":"\"\""}]},{"tag":"Literal","contents":{"tag":"Str","contents":""}}]]}],[{"tag":"Span","contents":[{"line":183,"column":79},{"line":183,"column":79},{"doc":"()"}]},{"tag":"Data","contents":["_Tuple0",[]]}]]}],[{"tag":"Span","contents":[{"line":183,"column":82},{"line":183,"column":82},{"doc":"()"}]},{"tag":"Data","contents":["_Tuple0",[]]}]]}]],["element",[{"tag":"Span","contents":[{"line":184,"column":15},{"line":184,"column":16},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]]]}]]}]]}]]}],null]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"image"},[{"tag":"Span","contents":[{"line":202,"column":5},{"line":202,"column":40},{"doc":"newElement w h (Image Plain w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":202,"column":5},{"line":202,"column":40},{"doc":"newElement w h (Image Plain w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":202,"column":5},{"line":202,"column":40},{"doc":"newElement w h (Image Plain w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"src"},[{"tag":"Span","contents":[{"line":202,"column":5},{"line":202,"column":40},{"doc":"newElement w h (Image Plain w h src)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":202,"column":5},{"line":202,"column":19},{"doc":"newElement w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":202,"column":5},{"line":202,"column":17},{"doc":"newElement w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":202,"column":5},{"line":202,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":202,"column":16},{"line":202,"column":17},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":202,"column":18},{"line":202,"column":19},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":202,"column":21},{"line":202,"column":40},{"doc":"Image Plain w h src"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":202,"column":21},{"line":202,"column":36},{"doc":"Image Plain w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":202,"column":21},{"line":202,"column":34},{"doc":"Image Plain w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":202,"column":21},{"line":202,"column":32},{"doc":"Image Plain"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":202,"column":21},{"line":202,"column":26},{"doc":"Image"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Image"}}],[{"tag":"Span","contents":[{"line":202,"column":27},{"line":202,"column":32},{"doc":"Plain"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Plain"}}]]}],[{"tag":"Span","contents":[{"line":202,"column":33},{"line":202,"column":34},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":202,"column":35},{"line":202,"column":36},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":202,"column":37},{"line":202,"column":40},{"doc":"src"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"src"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fittedImage"},[{"tag":"Span","contents":[{"line":210,"column":5},{"line":210,"column":41},{"doc":"newElement w h (Image Fitted w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":210,"column":5},{"line":210,"column":41},{"doc":"newElement w h (Image Fitted w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":210,"column":5},{"line":210,"column":41},{"doc":"newElement w h (Image Fitted w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"src"},[{"tag":"Span","contents":[{"line":210,"column":5},{"line":210,"column":41},{"doc":"newElement w h (Image Fitted w h src)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":5},{"line":210,"column":19},{"doc":"newElement w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":5},{"line":210,"column":17},{"doc":"newElement w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":5},{"line":210,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":210,"column":16},{"line":210,"column":17},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":210,"column":18},{"line":210,"column":19},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":210,"column":21},{"line":210,"column":41},{"doc":"Image Fitted w h src"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":21},{"line":210,"column":37},{"doc":"Image Fitted w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":21},{"line":210,"column":35},{"doc":"Image Fitted w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":21},{"line":210,"column":33},{"doc":"Image Fitted"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":210,"column":21},{"line":210,"column":26},{"doc":"Image"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Image"}}],[{"tag":"Span","contents":[{"line":210,"column":27},{"line":210,"column":33},{"doc":"Fitted"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Fitted"}}]]}],[{"tag":"Span","contents":[{"line":210,"column":34},{"line":210,"column":35},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":210,"column":36},{"line":210,"column":37},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":210,"column":38},{"line":210,"column":41},{"doc":"src"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"src"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"croppedImage"},[{"tag":"Span","contents":[{"line":221,"column":5},{"line":221,"column":48},{"doc":"newElement w h (Image (Cropped pos) w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"pos"},[{"tag":"Span","contents":[{"line":221,"column":5},{"line":221,"column":48},{"doc":"newElement w h (Image (Cropped pos) w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":221,"column":5},{"line":221,"column":48},{"doc":"newElement w h (Image (Cropped pos) w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":221,"column":5},{"line":221,"column":48},{"doc":"newElement w h (Image (Cropped pos) w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"src"},[{"tag":"Span","contents":[{"line":221,"column":5},{"line":221,"column":48},{"doc":"newElement w h (Image (Cropped pos) w h src)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":221,"column":5},{"line":221,"column":19},{"doc":"newElement w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":221,"column":5},{"line":221,"column":17},{"doc":"newElement w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":221,"column":5},{"line":221,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":221,"column":16},{"line":221,"column":17},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":221,"column":18},{"line":221,"column":19},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":221,"column":21},{"line":221,"column":48},{"doc":"Image (Cropped pos) w h src"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":221,"column":21},{"line":221,"column":44},{"doc":"Image (Cropped pos) w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":221,"column":21},{"line":221,"column":42},{"doc":"Image (Cropped pos) w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":221,"column":21},{"line":221,"column":39},{"doc":"Image (Cropped pos)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":221,"column":21},{"line":221,"column":26},{"doc":"Image"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Image"}}],[{"tag":"Span","contents":[{"line":221,"column":28},{"line":221,"column":39},{"doc":"Cropped pos"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":221,"column":28},{"line":221,"column":35},{"doc":"Cropped"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Cropped"}}],[{"tag":"Span","contents":[{"line":221,"column":36},{"line":221,"column":39},{"doc":"pos"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"pos"}}]]}]]}],[{"tag":"Span","contents":[{"line":221,"column":41},{"line":221,"column":42},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":221,"column":43},{"line":221,"column":44},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":221,"column":45},{"line":221,"column":48},{"doc":"src"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"src"}}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"tiledImage"},[{"tag":"Span","contents":[{"line":225,"column":5},{"line":225,"column":40},{"doc":"newElement w h (Image Tiled w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":225,"column":5},{"line":225,"column":40},{"doc":"newElement w h (Image Tiled w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":225,"column":5},{"line":225,"column":40},{"doc":"newElement w h (Image Tiled w h src)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"src"},[{"tag":"Span","contents":[{"line":225,"column":5},{"line":225,"column":40},{"doc":"newElement w h (Image Tiled w h src)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":225,"column":5},{"line":225,"column":19},{"doc":"newElement w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":225,"column":5},{"line":225,"column":17},{"doc":"newElement w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":225,"column":5},{"line":225,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":225,"column":16},{"line":225,"column":17},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":225,"column":18},{"line":225,"column":19},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":225,"column":21},{"line":225,"column":40},{"doc":"Image Tiled w h src"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":225,"column":21},{"line":225,"column":36},{"doc":"Image Tiled w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":225,"column":21},{"line":225,"column":34},{"doc":"Image Tiled w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":225,"column":21},{"line":225,"column":32},{"doc":"Image Tiled"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":225,"column":21},{"line":225,"column":26},{"doc":"Image"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Image"}}],[{"tag":"Span","contents":[{"line":225,"column":27},{"line":225,"column":32},{"doc":"Tiled"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Tiled"}}]]}],[{"tag":"Span","contents":[{"line":225,"column":33},{"line":225,"column":34},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":225,"column":35},{"line":225,"column":36},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":225,"column":37},{"line":225,"column":40},{"doc":"src"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"src"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"container"},[{"tag":"Span","contents":[{"line":250,"column":5},{"line":250,"column":36},{"doc":"newElement w h (Container pos e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":250,"column":5},{"line":250,"column":36},{"doc":"newElement w h (Container pos e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":250,"column":5},{"line":250,"column":36},{"doc":"newElement w h (Container pos e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"pos"},[{"tag":"Span","contents":[{"line":250,"column":5},{"line":250,"column":36},{"doc":"newElement w h (Container pos e)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"e"},[{"tag":"Span","contents":[{"line":250,"column":5},{"line":250,"column":36},{"doc":"newElement w h (Container pos e)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":5},{"line":250,"column":19},{"doc":"newElement w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":5},{"line":250,"column":17},{"doc":"newElement w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":5},{"line":250,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":250,"column":16},{"line":250,"column":17},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":250,"column":18},{"line":250,"column":19},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":250,"column":21},{"line":250,"column":36},{"doc":"Container pos e"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":21},{"line":250,"column":34},{"doc":"Container pos"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":250,"column":21},{"line":250,"column":30},{"doc":"Container"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Container"}}],[{"tag":"Span","contents":[{"line":250,"column":31},{"line":250,"column":34},{"doc":"pos"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"pos"}}]]}],[{"tag":"Span","contents":[{"line":250,"column":35},{"line":250,"column":36},{"doc":"e"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"e"}}]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Position"},{"tag":"Record","contents":[[["horizontal",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["vertical",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Three"}}],["x",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}],["y",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Pos"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"spacer"},[{"tag":"Span","contents":[{"line":258,"column":5},{"line":258,"column":26},{"doc":"newElement w h Spacer"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":258,"column":5},{"line":258,"column":26},{"doc":"newElement w h Spacer"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":258,"column":5},{"line":258,"column":26},{"doc":"newElement w h Spacer"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":258,"column":5},{"line":258,"column":19},{"doc":"newElement w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":258,"column":5},{"line":258,"column":17},{"doc":"newElement w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":258,"column":5},{"line":258,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":258,"column":16},{"line":258,"column":17},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":258,"column":18},{"line":258,"column":19},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":258,"column":20},{"line":258,"column":26},{"doc":"Spacer"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Spacer"}}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"empty"},[{"tag":"Span","contents":[{"line":71,"column":9},{"line":71,"column":19},{"doc":"spacer 0 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":71,"column":9},{"line":71,"column":17},{"doc":"spacer 0"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":71,"column":9},{"line":71,"column":15},{"doc":"spacer"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"spacer"}}],[{"tag":"Span","contents":[{"line":71,"column":16},{"line":71,"column":17},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],[{"tag":"Span","contents":[{"line":71,"column":18},{"line":71,"column":19},{"doc":"0"}]},{"tag":"Literal","contents":{"tag":"IntNum","contents":0}}]]}],{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"flow"},[{"tag":"Span","contents":[{"line":275,"column":3},{"line":291,"column":3},{"doc":"let ws = List.map widthOf es\n    hs = List.map heightOf es\n    newFlow = \\w h -> newElement w h (Flow dir es)\nin if | es == [] -> empty\n      | True ->\n          case dir of\n            DUp -> newFlow (List.maximum ws) (List.sum hs)\n            DDown -> newFlow (List.maximum ws) (List.sum hs)\n            DLeft -> newFlow (List.sum ws) (List.maximum hs)\n            DRight -> newFlow (List.sum ws) (List.maximum hs)\n            DIn -> newFlow (List.maximum ws) (List.maximum hs)\n            DOut -> newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"dir"},[{"tag":"Span","contents":[{"line":275,"column":3},{"line":291,"column":3},{"doc":"let ws = List.map widthOf es\n    hs = List.map heightOf es\n    newFlow = \\w h -> newElement w h (Flow dir es)\nin if | es == [] -> empty\n      | True ->\n          case dir of\n            DUp -> newFlow (List.maximum ws) (List.sum hs)\n            DDown -> newFlow (List.maximum ws) (List.sum hs)\n            DLeft -> newFlow (List.sum ws) (List.maximum hs)\n            DRight -> newFlow (List.sum ws) (List.maximum hs)\n            DIn -> newFlow (List.maximum ws) (List.maximum hs)\n            DOut -> newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"es"},[{"tag":"Span","contents":[{"line":275,"column":3},{"line":291,"column":3},{"doc":"let ws = List.map widthOf es\n    hs = List.map heightOf es\n    newFlow = \\w h -> newElement w h (Flow dir es)\nin if | es == [] -> empty\n      | True ->\n          case dir of\n            DUp -> newFlow (List.maximum ws) (List.sum hs)\n            DDown -> newFlow (List.maximum ws) (List.sum hs)\n            DLeft -> newFlow (List.sum ws) (List.maximum hs)\n            DRight -> newFlow (List.sum ws) (List.maximum hs)\n            DIn -> newFlow (List.maximum ws) (List.maximum hs)\n            DOut -> newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"newFlow"},[{"tag":"Span","contents":[{"line":277,"column":21},{"line":277,"column":48},{"doc":"newElement w h (Flow dir es)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"w"},[{"tag":"Span","contents":[{"line":277,"column":21},{"line":277,"column":48},{"doc":"newElement w h (Flow dir es)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"h"},[{"tag":"Span","contents":[{"line":277,"column":21},{"line":277,"column":48},{"doc":"newElement w h (Flow dir es)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":277,"column":21},{"line":277,"column":35},{"doc":"newElement w h"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":277,"column":21},{"line":277,"column":33},{"doc":"newElement w"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":277,"column":21},{"line":277,"column":31},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":277,"column":32},{"line":277,"column":33},{"doc":"w"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"w"}}]]}],[{"tag":"Span","contents":[{"line":277,"column":34},{"line":277,"column":35},{"doc":"h"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"h"}}]]}],[{"tag":"Span","contents":[{"line":277,"column":37},{"line":277,"column":48},{"doc":"Flow dir es"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":277,"column":37},{"line":277,"column":45},{"doc":"Flow dir"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":277,"column":37},{"line":277,"column":41},{"doc":"Flow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Flow"}}],[{"tag":"Span","contents":[{"line":277,"column":42},{"line":277,"column":45},{"doc":"dir"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"dir"}}]]}],[{"tag":"Span","contents":[{"line":277,"column":46},{"line":277,"column":48},{"doc":"es"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"es"}}]]}]]}]]}]]}],null]],[{"tag":"Span","contents":[{"line":275,"column":3},{"line":291,"column":3},{"doc":"let ws = List.map widthOf es\n    hs = List.map heightOf es\n    newFlow = \\w h -> newElement w h (Flow dir es)\nin if | es == [] -> empty\n      | True ->\n          case dir of\n            DUp -> newFlow (List.maximum ws) (List.sum hs)\n            DDown -> newFlow (List.maximum ws) (List.sum hs)\n            DLeft -> newFlow (List.sum ws) (List.maximum hs)\n            DRight -> newFlow (List.sum ws) (List.maximum hs)\n            DIn -> newFlow (List.maximum ws) (List.maximum hs)\n            DOut -> newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hs"},[{"tag":"Span","contents":[{"line":276,"column":12},{"line":276,"column":32},{"doc":"List.map heightOf es"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":276,"column":12},{"line":276,"column":29},{"doc":"List.map heightOf"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":276,"column":12},{"line":276,"column":20},{"doc":"List.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":276,"column":21},{"line":276,"column":29},{"doc":"heightOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"heightOf"}}]]}],[{"tag":"Span","contents":[{"line":276,"column":30},{"line":276,"column":32},{"doc":"es"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"es"}}]]}],null]],[{"tag":"Span","contents":[{"line":275,"column":3},{"line":291,"column":3},{"doc":"let ws = List.map widthOf es\n    hs = List.map heightOf es\n    newFlow = \\w h -> newElement w h (Flow dir es)\nin if | es == [] -> empty\n      | True ->\n          case dir of\n            DUp -> newFlow (List.maximum ws) (List.sum hs)\n            DDown -> newFlow (List.maximum ws) (List.sum hs)\n            DLeft -> newFlow (List.sum ws) (List.maximum hs)\n            DRight -> newFlow (List.sum ws) (List.maximum hs)\n            DIn -> newFlow (List.maximum ws) (List.maximum hs)\n            DOut -> newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"ws"},[{"tag":"Span","contents":[{"line":275,"column":12},{"line":275,"column":31},{"doc":"List.map widthOf es"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":275,"column":12},{"line":275,"column":28},{"doc":"List.map widthOf"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":275,"column":12},{"line":275,"column":20},{"doc":"List.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":275,"column":21},{"line":275,"column":28},{"doc":"widthOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"widthOf"}}]]}],[{"tag":"Span","contents":[{"line":275,"column":29},{"line":275,"column":31},{"doc":"es"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"es"}}]]}],null]],[{"tag":"Span","contents":[{"line":279,"column":3},{"line":291,"column":3},{"doc":"if | es == [] -> empty\n   | True ->\n       case dir of\n         DUp -> newFlow (List.maximum ws) (List.sum hs)\n         DDown -> newFlow (List.maximum ws) (List.sum hs)\n         DLeft -> newFlow (List.sum ws) (List.maximum hs)\n         DRight -> newFlow (List.sum ws) (List.maximum hs)\n         DIn -> newFlow (List.maximum ws) (List.maximum hs)\n         DOut -> newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"MultiIf","contents":[[[{"tag":"Span","contents":[{"line":279,"column":6},{"line":279,"column":14},{"doc":"es == []"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"=="},[{"tag":"Span","contents":[{"line":279,"column":6},{"line":279,"column":8},{"doc":"es"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"es"}}],[{"tag":"Span","contents":[{"line":279,"column":12},{"line":279,"column":14},{"doc":"[]"}]},{"tag":"ExplicitList","contents":[]}]]}],[{"tag":"Span","contents":[{"line":279,"column":20},{"line":279,"column":25},{"doc":"empty"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"empty"}}]],[[{"tag":"Span","contents":[{"line":280,"column":3},{"line":291,"column":3},{"doc":"case dir of\n  DUp -> newFlow (List.maximum ws) (List.sum hs)\n  DDown -> newFlow (List.maximum ws) (List.sum hs)\n  DLeft -> newFlow (List.sum ws) (List.maximum hs)\n  DRight -> newFlow (List.sum ws) (List.maximum hs)\n  DIn -> newFlow (List.maximum ws) (List.maximum hs)\n  DOut -> newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"Literal","contents":{"tag":"Boolean","contents":true}}],[{"tag":"Span","contents":[{"line":280,"column":3},{"line":291,"column":3},{"doc":"case dir of\n  DUp -> newFlow (List.maximum ws) (List.sum hs)\n  DDown -> newFlow (List.maximum ws) (List.sum hs)\n  DLeft -> newFlow (List.sum ws) (List.maximum hs)\n  DRight -> newFlow (List.sum ws) (List.maximum hs)\n  DIn -> newFlow (List.maximum ws) (List.maximum hs)\n  DOut -> newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"Case","contents":[[{"tag":"Span","contents":[{"line":280,"column":8},{"line":280,"column":11},{"doc":"dir"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"dir"}}],[[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"DUp"},[]]},[{"tag":"Span","contents":[{"line":281,"column":15},{"line":281,"column":53},{"doc":"newFlow (List.maximum ws) (List.sum hs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":281,"column":15},{"line":281,"column":39},{"doc":"newFlow (List.maximum ws)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":281,"column":15},{"line":281,"column":22},{"doc":"newFlow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newFlow"}}],[{"tag":"Span","contents":[{"line":281,"column":24},{"line":281,"column":39},{"doc":"List.maximum ws"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":281,"column":24},{"line":281,"column":36},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":281,"column":37},{"line":281,"column":39},{"doc":"ws"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"ws"}}]]}]]}],[{"tag":"Span","contents":[{"line":281,"column":42},{"line":281,"column":53},{"doc":"List.sum hs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":281,"column":42},{"line":281,"column":50},{"doc":"List.sum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"sum"}}],[{"tag":"Span","contents":[{"line":281,"column":51},{"line":281,"column":53},{"doc":"hs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hs"}}]]}]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"DDown"},[]]},[{"tag":"Span","contents":[{"line":282,"column":15},{"line":282,"column":53},{"doc":"newFlow (List.maximum ws) (List.sum hs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":282,"column":15},{"line":282,"column":39},{"doc":"newFlow (List.maximum ws)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":282,"column":15},{"line":282,"column":22},{"doc":"newFlow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newFlow"}}],[{"tag":"Span","contents":[{"line":282,"column":24},{"line":282,"column":39},{"doc":"List.maximum ws"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":282,"column":24},{"line":282,"column":36},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":282,"column":37},{"line":282,"column":39},{"doc":"ws"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"ws"}}]]}]]}],[{"tag":"Span","contents":[{"line":282,"column":42},{"line":282,"column":53},{"doc":"List.sum hs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":282,"column":42},{"line":282,"column":50},{"doc":"List.sum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"sum"}}],[{"tag":"Span","contents":[{"line":282,"column":51},{"line":282,"column":53},{"doc":"hs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hs"}}]]}]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"DLeft"},[]]},[{"tag":"Span","contents":[{"line":283,"column":15},{"line":283,"column":53},{"doc":"newFlow (List.sum ws) (List.maximum hs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":283,"column":15},{"line":283,"column":35},{"doc":"newFlow (List.sum ws)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":283,"column":15},{"line":283,"column":22},{"doc":"newFlow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newFlow"}}],[{"tag":"Span","contents":[{"line":283,"column":24},{"line":283,"column":35},{"doc":"List.sum ws"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":283,"column":24},{"line":283,"column":32},{"doc":"List.sum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"sum"}}],[{"tag":"Span","contents":[{"line":283,"column":33},{"line":283,"column":35},{"doc":"ws"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"ws"}}]]}]]}],[{"tag":"Span","contents":[{"line":283,"column":38},{"line":283,"column":53},{"doc":"List.maximum hs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":283,"column":38},{"line":283,"column":50},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":283,"column":51},{"line":283,"column":53},{"doc":"hs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hs"}}]]}]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"DRight"},[]]},[{"tag":"Span","contents":[{"line":284,"column":15},{"line":284,"column":53},{"doc":"newFlow (List.sum ws) (List.maximum hs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":284,"column":15},{"line":284,"column":35},{"doc":"newFlow (List.sum ws)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":284,"column":15},{"line":284,"column":22},{"doc":"newFlow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newFlow"}}],[{"tag":"Span","contents":[{"line":284,"column":24},{"line":284,"column":35},{"doc":"List.sum ws"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":284,"column":24},{"line":284,"column":32},{"doc":"List.sum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"sum"}}],[{"tag":"Span","contents":[{"line":284,"column":33},{"line":284,"column":35},{"doc":"ws"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"ws"}}]]}]]}],[{"tag":"Span","contents":[{"line":284,"column":38},{"line":284,"column":53},{"doc":"List.maximum hs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":284,"column":38},{"line":284,"column":50},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":284,"column":51},{"line":284,"column":53},{"doc":"hs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hs"}}]]}]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"DIn"},[]]},[{"tag":"Span","contents":[{"line":285,"column":15},{"line":285,"column":57},{"doc":"newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":285,"column":15},{"line":285,"column":39},{"doc":"newFlow (List.maximum ws)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":285,"column":15},{"line":285,"column":22},{"doc":"newFlow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newFlow"}}],[{"tag":"Span","contents":[{"line":285,"column":24},{"line":285,"column":39},{"doc":"List.maximum ws"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":285,"column":24},{"line":285,"column":36},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":285,"column":37},{"line":285,"column":39},{"doc":"ws"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"ws"}}]]}]]}],[{"tag":"Span","contents":[{"line":285,"column":42},{"line":285,"column":57},{"doc":"List.maximum hs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":285,"column":42},{"line":285,"column":54},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":285,"column":55},{"line":285,"column":57},{"doc":"hs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hs"}}]]}]]}]],[{"tag":"Data","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"DOut"},[]]},[{"tag":"Span","contents":[{"line":286,"column":15},{"line":286,"column":57},{"doc":"newFlow (List.maximum ws) (List.maximum hs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":286,"column":15},{"line":286,"column":39},{"doc":"newFlow (List.maximum ws)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":286,"column":15},{"line":286,"column":22},{"doc":"newFlow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newFlow"}}],[{"tag":"Span","contents":[{"line":286,"column":24},{"line":286,"column":39},{"doc":"List.maximum ws"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":286,"column":24},{"line":286,"column":36},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":286,"column":37},{"line":286,"column":39},{"doc":"ws"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"ws"}}]]}]]}],[{"tag":"Span","contents":[{"line":286,"column":42},{"line":286,"column":57},{"doc":"List.maximum hs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":286,"column":42},{"line":286,"column":54},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":286,"column":55},{"line":286,"column":57},{"doc":"hs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hs"}}]]}]]}]]]]}]]]}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Direction"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"above"},[{"tag":"Span","contents":[{"line":294,"column":5},{"line":297,"column":28},{"doc":"newElement\n  (max (widthOf hi) (widthOf lo))\n  ((heightOf hi) + (heightOf lo))\n  (Flow DDown [hi,lo])"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"hi"},[{"tag":"Span","contents":[{"line":294,"column":5},{"line":297,"column":28},{"doc":"newElement\n  (max (widthOf hi) (widthOf lo))\n  ((heightOf hi) + (heightOf lo))\n  (Flow DDown [hi,lo])"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"lo"},[{"tag":"Span","contents":[{"line":294,"column":5},{"line":297,"column":28},{"doc":"newElement\n  (max (widthOf hi) (widthOf lo))\n  ((heightOf hi) + (heightOf lo))\n  (Flow DDown [hi,lo])"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":294,"column":5},{"line":296,"column":35},{"doc":"newElement\n  (max (widthOf hi) (widthOf lo)) ((heightOf hi) + (heightOf lo))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":294,"column":5},{"line":295,"column":38},{"doc":"newElement (max (widthOf hi) (widthOf lo))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":294,"column":5},{"line":294,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":295,"column":10},{"line":295,"column":38},{"doc":"max (widthOf hi) (widthOf lo)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":295,"column":10},{"line":295,"column":25},{"doc":"max (widthOf hi)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":295,"column":10},{"line":295,"column":13},{"doc":"max"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"max"}}],[{"tag":"Span","contents":[{"line":295,"column":15},{"line":295,"column":25},{"doc":"widthOf hi"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":295,"column":15},{"line":295,"column":22},{"doc":"widthOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"widthOf"}}],[{"tag":"Span","contents":[{"line":295,"column":23},{"line":295,"column":25},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}]]}]]}],[{"tag":"Span","contents":[{"line":295,"column":28},{"line":295,"column":38},{"doc":"widthOf lo"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":295,"column":28},{"line":295,"column":35},{"doc":"widthOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"widthOf"}}],[{"tag":"Span","contents":[{"line":295,"column":36},{"line":295,"column":38},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":296,"column":10},{"line":296,"column":35},{"doc":"(heightOf hi) + (heightOf lo)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":296,"column":10},{"line":296,"column":21},{"doc":"heightOf hi"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":296,"column":10},{"line":296,"column":18},{"doc":"heightOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"heightOf"}}],[{"tag":"Span","contents":[{"line":296,"column":19},{"line":296,"column":21},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}]]}],[{"tag":"Span","contents":[{"line":296,"column":24},{"line":296,"column":35},{"doc":"heightOf lo"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":296,"column":24},{"line":296,"column":32},{"doc":"heightOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"heightOf"}}],[{"tag":"Span","contents":[{"line":296,"column":33},{"line":296,"column":35},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":297,"column":10},{"line":297,"column":28},{"doc":"Flow DDown [hi,lo]"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":297,"column":10},{"line":297,"column":20},{"doc":"Flow DDown"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":297,"column":10},{"line":297,"column":14},{"doc":"Flow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Flow"}}],[{"tag":"Span","contents":[{"line":297,"column":15},{"line":297,"column":20},{"doc":"DDown"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DDown"}}]]}],[{"tag":"Span","contents":[{"line":297,"column":21},{"line":297,"column":28},{"doc":"[hi,lo]"}]},{"tag":"ExplicitList","contents":[[{"tag":"Span","contents":[{"line":297,"column":22},{"line":297,"column":24},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}],[{"tag":"Span","contents":[{"line":297,"column":25},{"line":297,"column":27},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"below"},[{"tag":"Span","contents":[{"line":305,"column":5},{"line":308,"column":28},{"doc":"newElement\n  (max (widthOf hi) (widthOf lo))\n  ((heightOf hi) + (heightOf lo))\n  (Flow DDown [hi,lo])"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"lo"},[{"tag":"Span","contents":[{"line":305,"column":5},{"line":308,"column":28},{"doc":"newElement\n  (max (widthOf hi) (widthOf lo))\n  ((heightOf hi) + (heightOf lo))\n  (Flow DDown [hi,lo])"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"hi"},[{"tag":"Span","contents":[{"line":305,"column":5},{"line":308,"column":28},{"doc":"newElement\n  (max (widthOf hi) (widthOf lo))\n  ((heightOf hi) + (heightOf lo))\n  (Flow DDown [hi,lo])"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":305,"column":5},{"line":307,"column":35},{"doc":"newElement\n  (max (widthOf hi) (widthOf lo)) ((heightOf hi) + (heightOf lo))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":305,"column":5},{"line":306,"column":38},{"doc":"newElement (max (widthOf hi) (widthOf lo))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":305,"column":5},{"line":305,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":306,"column":10},{"line":306,"column":38},{"doc":"max (widthOf hi) (widthOf lo)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":306,"column":10},{"line":306,"column":25},{"doc":"max (widthOf hi)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":306,"column":10},{"line":306,"column":13},{"doc":"max"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"max"}}],[{"tag":"Span","contents":[{"line":306,"column":15},{"line":306,"column":25},{"doc":"widthOf hi"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":306,"column":15},{"line":306,"column":22},{"doc":"widthOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"widthOf"}}],[{"tag":"Span","contents":[{"line":306,"column":23},{"line":306,"column":25},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}]]}]]}],[{"tag":"Span","contents":[{"line":306,"column":28},{"line":306,"column":38},{"doc":"widthOf lo"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":306,"column":28},{"line":306,"column":35},{"doc":"widthOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"widthOf"}}],[{"tag":"Span","contents":[{"line":306,"column":36},{"line":306,"column":38},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":307,"column":10},{"line":307,"column":35},{"doc":"(heightOf hi) + (heightOf lo)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":307,"column":10},{"line":307,"column":21},{"doc":"heightOf hi"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":307,"column":10},{"line":307,"column":18},{"doc":"heightOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"heightOf"}}],[{"tag":"Span","contents":[{"line":307,"column":19},{"line":307,"column":21},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}]]}],[{"tag":"Span","contents":[{"line":307,"column":24},{"line":307,"column":35},{"doc":"heightOf lo"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":307,"column":24},{"line":307,"column":32},{"doc":"heightOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"heightOf"}}],[{"tag":"Span","contents":[{"line":307,"column":33},{"line":307,"column":35},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":308,"column":10},{"line":308,"column":28},{"doc":"Flow DDown [hi,lo]"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":308,"column":10},{"line":308,"column":20},{"doc":"Flow DDown"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":308,"column":10},{"line":308,"column":14},{"doc":"Flow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Flow"}}],[{"tag":"Span","contents":[{"line":308,"column":15},{"line":308,"column":20},{"doc":"DDown"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DDown"}}]]}],[{"tag":"Span","contents":[{"line":308,"column":21},{"line":308,"column":28},{"doc":"[hi,lo]"}]},{"tag":"ExplicitList","contents":[[{"tag":"Span","contents":[{"line":308,"column":22},{"line":308,"column":24},{"doc":"hi"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hi"}}],[{"tag":"Span","contents":[{"line":308,"column":25},{"line":308,"column":27},{"doc":"lo"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lo"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"beside"},[{"tag":"Span","contents":[{"line":316,"column":5},{"line":319,"column":30},{"doc":"newElement\n  ((widthOf lft) + (widthOf rht))\n  (max (heightOf lft) (heightOf rht))\n  (Flow right [lft,rht])"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"lft"},[{"tag":"Span","contents":[{"line":316,"column":5},{"line":319,"column":30},{"doc":"newElement\n  ((widthOf lft) + (widthOf rht))\n  (max (heightOf lft) (heightOf rht))\n  (Flow right [lft,rht])"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"rht"},[{"tag":"Span","contents":[{"line":316,"column":5},{"line":319,"column":30},{"doc":"newElement\n  ((widthOf lft) + (widthOf rht))\n  (max (heightOf lft) (heightOf rht))\n  (Flow right [lft,rht])"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":316,"column":5},{"line":318,"column":42},{"doc":"newElement\n  ((widthOf lft) + (widthOf rht)) (max (heightOf lft) (heightOf rht))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":316,"column":5},{"line":317,"column":35},{"doc":"newElement ((widthOf lft) + (widthOf rht))"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":316,"column":5},{"line":316,"column":15},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":317,"column":10},{"line":317,"column":35},{"doc":"(widthOf lft) + (widthOf rht)"}]},{"tag":"Binop","contents":[{"home":{"tag":"Module","contents":["Basics"]},"name":"+"},[{"tag":"Span","contents":[{"line":317,"column":10},{"line":317,"column":21},{"doc":"widthOf lft"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":317,"column":10},{"line":317,"column":17},{"doc":"widthOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"widthOf"}}],[{"tag":"Span","contents":[{"line":317,"column":18},{"line":317,"column":21},{"doc":"lft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lft"}}]]}],[{"tag":"Span","contents":[{"line":317,"column":24},{"line":317,"column":35},{"doc":"widthOf rht"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":317,"column":24},{"line":317,"column":31},{"doc":"widthOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"widthOf"}}],[{"tag":"Span","contents":[{"line":317,"column":32},{"line":317,"column":35},{"doc":"rht"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"rht"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":318,"column":10},{"line":318,"column":42},{"doc":"max (heightOf lft) (heightOf rht)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":318,"column":10},{"line":318,"column":27},{"doc":"max (heightOf lft)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":318,"column":10},{"line":318,"column":13},{"doc":"max"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Basics"]},"name":"max"}}],[{"tag":"Span","contents":[{"line":318,"column":15},{"line":318,"column":27},{"doc":"heightOf lft"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":318,"column":15},{"line":318,"column":23},{"doc":"heightOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"heightOf"}}],[{"tag":"Span","contents":[{"line":318,"column":24},{"line":318,"column":27},{"doc":"lft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lft"}}]]}]]}],[{"tag":"Span","contents":[{"line":318,"column":30},{"line":318,"column":42},{"doc":"heightOf rht"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":318,"column":30},{"line":318,"column":38},{"doc":"heightOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"heightOf"}}],[{"tag":"Span","contents":[{"line":318,"column":39},{"line":318,"column":42},{"doc":"rht"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"rht"}}]]}]]}]]}],[{"tag":"Span","contents":[{"line":319,"column":10},{"line":319,"column":30},{"doc":"Flow right [lft,rht]"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":319,"column":10},{"line":319,"column":20},{"doc":"Flow right"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":319,"column":10},{"line":319,"column":14},{"doc":"Flow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Flow"}}],[{"tag":"Span","contents":[{"line":319,"column":15},{"line":319,"column":20},{"doc":"right"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"right"}}]]}],[{"tag":"Span","contents":[{"line":319,"column":21},{"line":319,"column":30},{"doc":"[lft,rht]"}]},{"tag":"ExplicitList","contents":[[{"tag":"Span","contents":[{"line":319,"column":22},{"line":319,"column":25},{"doc":"lft"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"lft"}}],[{"tag":"Span","contents":[{"line":319,"column":26},{"line":319,"column":29},{"doc":"rht"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"rht"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]}]],[{"tag":"None","contents":{"doc":"let Properties : Int\n                 -> Int\n                 -> Int\n                 -> Float\n                 -> Maybe.Maybe Color.Color\n                 -> String\n                 -> String\n                 -> ()\n                 -> ()\n                 -> Graphics.Element.Properties\n    Properties = \\a b c d e f g h i -> { id = a\n                                       , width = b\n                                       , height = c\n                                       , opacity = d\n                                       , color = e\n                                       , href = f\n                                       , tag = g\n                                       , hover = h\n                                       , click = i\n                                       }\n    Element : Graphics.Element.Properties\n              -> Graphics.Element.ElementPrim -> Graphics.Element.Element\n    Element = \\a b -> { props = a, element = b }\n    empty : Graphics.Element.Element\n    empty = spacer 0 0\n    widthOf : Graphics.Element.Element -> Int\n    widthOf = \\e -> e.props.width\n    heightOf : Graphics.Element.Element -> Int\n    heightOf = \\e -> e.props.height\n    sizeOf : Graphics.Element.Element -> (Int, Int)\n    sizeOf = \\e -> (e.props.width,e.props.height)\n    width : Int -> Graphics.Element.Element -> Graphics.Element.Element\n    width = \\nw e -> let p = e.props\n                         props = case e.element of\n                                   Graphics.Element.Image _ w h _ -> {p | height <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           h)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        w))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nw))}\n                                   Graphics.Element.RawHtml -> {p | height <- Basics.snd\n                                                                                (Native.Graphics.Element.htmlHeight\n                                                                                   nw e.element)}\n                                   _ -> p\n                     in { element = e.element, props = {props | width <- nw} }\n    height : Int\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    height = \\nh e -> let p = e.props\n                          props = case e.element of\n                                    Graphics.Element.Image _ w h _ -> {p | width <- Basics.round\n                                                                                      (((Basics.toFloat\n                                                                                           w)\n                                                                                          `Basics./` (Basics.toFloat\n                                                                                                        h))\n                                                                                         `Basics.*` (Basics.toFloat\n                                                                                                       nh))}\n                                    _ -> p\n                      in { element = e.element, props = {p | height <- nh} }\n    size : Int\n           -> Int -> Graphics.Element.Element -> Graphics.Element.Element\n    size = \\w h e -> height h (width w e)\n    opacity : Float\n              -> Graphics.Element.Element -> Graphics.Element.Element\n    opacity = \\o e -> let p = e.props\n                      in { element = e.element, props = {p | opacity <- o} }\n    color : Color.Color\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    color = \\c e -> let p = e.props\n                    in { element = e.element, props = {p | color <- Maybe.Just c} }\n    tag : String\n          -> Graphics.Element.Element -> Graphics.Element.Element\n    tag = \\name e -> let p = e.props\n                     in { element = e.element, props = {p | tag <- name} }\n    link : String\n           -> Graphics.Element.Element -> Graphics.Element.Element\n    link = \\href e -> let p = e.props\n                      in { element = e.element, props = {p | href <- href} }\n    newElement = \\w h e -> { props = Properties\n                                       (Native.Graphics.Element.guid ())\n                                       w\n                                       h\n                                       1\n                                       Maybe.Nothing\n                                       \"\"\n                                       \"\"\n                                       ()\n                                       ()\n                           , element = e\n                           }\n    Image : Graphics.Element.ImageStyle\n            -> Int -> Int -> String -> Graphics.Element.ElementPrim\n    Image = \\a b c d -> Image a b c d\n    Container : Graphics.Element.Position\n                -> Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Container = \\a b -> Container a b\n    Flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.ElementPrim\n    Flow = \\a b -> Flow a b\n    Spacer : Graphics.Element.ElementPrim\n    Spacer = Spacer\n    RawHtml : Graphics.Element.ElementPrim\n    RawHtml = RawHtml\n    Custom : Graphics.Element.ElementPrim\n    Custom = Custom\n    Plain : Graphics.Element.ImageStyle\n    Plain = Plain\n    Fitted : Graphics.Element.ImageStyle\n    Fitted = Fitted\n    Cropped : (Int, Int) -> Graphics.Element.ImageStyle\n    Cropped = \\a -> Cropped a\n    Tiled : Graphics.Element.ImageStyle\n    Tiled = Tiled\n    image : Int -> Int -> String -> Graphics.Element.Element\n    image = \\w h src -> newElement w h (Image Plain w h src)\n    fittedImage : Int -> Int -> String -> Graphics.Element.Element\n    fittedImage = \\w h src -> newElement w h (Image Fitted w h src)\n    croppedImage : (Int, Int)\n                   -> Int -> Int -> String -> Graphics.Element.Element\n    croppedImage = \\pos w h src -> newElement\n                                     w h (Image (Cropped pos) w h src)\n    tiledImage : Int -> Int -> String -> Graphics.Element.Element\n    tiledImage = \\w h src -> newElement w h (Image Tiled w h src)\n    P : Graphics.Element.Three\n    P = P\n    Z : Graphics.Element.Three\n    Z = Z\n    N : Graphics.Element.Three\n    N = N\n    Absolute : Int -> Graphics.Element.Pos\n    Absolute = \\a -> Absolute a\n    Relative : Float -> Graphics.Element.Pos\n    Relative = \\a -> Relative a\n    Position : Graphics.Element.Three\n               -> Graphics.Element.Three\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Pos\n               -> Graphics.Element.Position\n    Position = \\a b c d -> { horizontal = a, vertical = b, x = c, y = d\n                           }\n    container : Int\n                -> Int\n                -> Graphics.Element.Position\n                -> Graphics.Element.Element\n                -> Graphics.Element.Element\n    container = \\w h pos e -> newElement w h (Container pos e)\n    spacer : Int -> Int -> Graphics.Element.Element\n    spacer = \\w h -> newElement w h Spacer\n    DUp : Graphics.Element.Direction\n    DUp = DUp\n    DDown : Graphics.Element.Direction\n    DDown = DDown\n    DLeft : Graphics.Element.Direction\n    DLeft = DLeft\n    DRight : Graphics.Element.Direction\n    DRight = DRight\n    DIn : Graphics.Element.Direction\n    DIn = DIn\n    DOut : Graphics.Element.Direction\n    DOut = DOut\n    flow : Graphics.Element.Direction\n           -> List Graphics.Element.Element -> Graphics.Element.Element\n    flow = \\dir es -> let ws = List.map widthOf es\n                          hs = List.map heightOf es\n                          newFlow = \\w h -> newElement w h (Flow dir es)\n                      in if | es `Basics.==` [] -> empty\n                            | True ->\n                                case dir of\n                                  Graphics.Element.DUp -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DDown -> newFlow (List.maximum ws) (List.sum hs)\n                                  Graphics.Element.DLeft -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DRight -> newFlow (List.sum ws) (List.maximum hs)\n                                  Graphics.Element.DIn -> newFlow\n                                                            (List.maximum ws) (List.maximum hs)\n                                  Graphics.Element.DOut -> newFlow\n                                                             (List.maximum ws) (List.maximum hs)\n    above : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    above = \\hi lo -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    below : Graphics.Element.Element\n            -> Graphics.Element.Element -> Graphics.Element.Element\n    below = \\lo hi -> newElement\n                        (Basics.max (widthOf hi) (widthOf lo))\n                        ((heightOf hi) `Basics.+` (heightOf lo))\n                        (Flow DDown [hi,lo])\n    beside : Graphics.Element.Element\n             -> Graphics.Element.Element -> Graphics.Element.Element\n    beside = \\lft rht -> newElement\n                           ((widthOf lft) `Basics.+` (widthOf rht))\n                           (Basics.max (heightOf lft) (heightOf rht))\n                           (Flow right [lft,rht])\n    layers : List Graphics.Element.Element -> Graphics.Element.Element\n    layers = \\es -> let ws = List.map widthOf es\n                        hs = List.map heightOf es\n                    in newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)\n    absolute : Int -> Graphics.Element.Pos\n    absolute = Absolute\n    relative : Float -> Graphics.Element.Pos\n    relative = Relative\n    middle : Graphics.Element.Position\n    middle = { horizontal = Z\n             , vertical = Z\n             , x = Relative 0.5\n             , y = Relative 0.5\n             }\n    topLeft : Graphics.Element.Position\n    topLeft = { horizontal = N\n              , vertical = P\n              , x = Absolute 0\n              , y = Absolute 0\n              }\n    topRight : Graphics.Element.Position\n    topRight = {topLeft | horizontal <- P}\n    bottomLeft : Graphics.Element.Position\n    bottomLeft = {topLeft | vertical <- N}\n    bottomRight : Graphics.Element.Position\n    bottomRight = {bottomLeft | horizontal <- P}\n    midLeft : Graphics.Element.Position\n    midLeft = {middle | horizontal <- N, x <- Absolute 0}\n    midRight : Graphics.Element.Position\n    midRight = {midLeft | horizontal <- P}\n    midTop : Graphics.Element.Position\n    midTop = {middle | vertical <- P, y <- Absolute 0}\n    midBottom : Graphics.Element.Position\n    midBottom = {midTop | vertical <- N}\n    middleAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    middleAt = \\x y -> { horizontal = Z, vertical = Z, x = x, y = y }\n    topLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    topLeftAt = \\x y -> { horizontal = N, vertical = P, x = x, y = y }\n    topRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    topRightAt = \\x y -> { horizontal = P, vertical = P, x = x, y = y }\n    bottomLeftAt : Graphics.Element.Pos\n                   -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomLeftAt = \\x y -> { horizontal = N, vertical = N, x = x, y = y\n                           }\n    bottomRightAt : Graphics.Element.Pos\n                    -> Graphics.Element.Pos -> Graphics.Element.Position\n    bottomRightAt = \\x y -> { horizontal = P\n                            , vertical = N\n                            , x = x\n                            , y = y\n                            }\n    midLeftAt : Graphics.Element.Pos\n                -> Graphics.Element.Pos -> Graphics.Element.Position\n    midLeftAt = \\x y -> { horizontal = N, vertical = Z, x = x, y = y }\n    midRightAt : Graphics.Element.Pos\n                 -> Graphics.Element.Pos -> Graphics.Element.Position\n    midRightAt = \\x y -> { horizontal = P, vertical = Z, x = x, y = y }\n    midTopAt : Graphics.Element.Pos\n               -> Graphics.Element.Pos -> Graphics.Element.Position\n    midTopAt = \\x y -> { horizontal = Z, vertical = P, x = x, y = y }\n    midBottomAt : Graphics.Element.Pos\n                  -> Graphics.Element.Pos -> Graphics.Element.Position\n    midBottomAt = \\x y -> { horizontal = Z, vertical = N, x = x, y = y\n                          }\n    up : Graphics.Element.Direction\n    up = DUp\n    down : Graphics.Element.Direction\n    down = DDown\n    left : Graphics.Element.Direction\n    left = DLeft\n    right : Graphics.Element.Direction\n    right = DRight\n    inward : Graphics.Element.Direction\n    inward = DIn\n    outward : Graphics.Element.Direction\n    outward = DOut\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"layers"},[{"tag":"Span","contents":[{"line":327,"column":3},{"line":330,"column":68},{"doc":"let ws = List.map widthOf es\n    hs = List.map heightOf es\nin newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)"}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"es"},[{"tag":"Span","contents":[{"line":327,"column":3},{"line":330,"column":68},{"doc":"let ws = List.map widthOf es\n    hs = List.map heightOf es\nin newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"hs"},[{"tag":"Span","contents":[{"line":328,"column":12},{"line":328,"column":32},{"doc":"List.map heightOf es"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":328,"column":12},{"line":328,"column":29},{"doc":"List.map heightOf"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":328,"column":12},{"line":328,"column":20},{"doc":"List.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":328,"column":21},{"line":328,"column":29},{"doc":"heightOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"heightOf"}}]]}],[{"tag":"Span","contents":[{"line":328,"column":30},{"line":328,"column":32},{"doc":"es"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"es"}}]]}],null]],[{"tag":"Span","contents":[{"line":327,"column":3},{"line":330,"column":68},{"doc":"let ws = List.map widthOf es\n    hs = List.map heightOf es\nin newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)"}]},{"tag":"Let","contents":[[[{"tag":"Var","contents":"ws"},[{"tag":"Span","contents":[{"line":327,"column":12},{"line":327,"column":31},{"doc":"List.map widthOf es"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":327,"column":12},{"line":327,"column":28},{"doc":"List.map widthOf"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":327,"column":12},{"line":327,"column":20},{"doc":"List.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"map"}}],[{"tag":"Span","contents":[{"line":327,"column":21},{"line":327,"column":28},{"doc":"widthOf"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"widthOf"}}]]}],[{"tag":"Span","contents":[{"line":327,"column":29},{"line":327,"column":31},{"doc":"es"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"es"}}]]}],null]],[{"tag":"Span","contents":[{"line":330,"column":7},{"line":330,"column":67},{"doc":"newElement (List.maximum ws) (List.maximum hs) (Flow DOut es)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":330,"column":7},{"line":330,"column":52},{"doc":"newElement (List.maximum ws) (List.maximum hs)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":330,"column":7},{"line":330,"column":34},{"doc":"newElement (List.maximum ws)"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":330,"column":7},{"line":330,"column":17},{"doc":"newElement"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"newElement"}}],[{"tag":"Span","contents":[{"line":330,"column":19},{"line":330,"column":34},{"doc":"List.maximum ws"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":330,"column":19},{"line":330,"column":31},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":330,"column":32},{"line":330,"column":34},{"doc":"ws"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"ws"}}]]}]]}],[{"tag":"Span","contents":[{"line":330,"column":37},{"line":330,"column":52},{"doc":"List.maximum hs"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":330,"column":37},{"line":330,"column":49},{"doc":"List.maximum"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["List"]},"name":"maximum"}}],[{"tag":"Span","contents":[{"line":330,"column":50},{"line":330,"column":52},{"doc":"hs"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"hs"}}]]}]]}],[{"tag":"Span","contents":[{"line":330,"column":55},{"line":330,"column":67},{"doc":"Flow DOut es"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":330,"column":55},{"line":330,"column":64},{"doc":"Flow DOut"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":330,"column":55},{"line":330,"column":59},{"doc":"Flow"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"Flow"}}],[{"tag":"Span","contents":[{"line":330,"column":60},{"line":330,"column":64},{"doc":"DOut"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"DOut"}}]]}],[{"tag":"Span","contents":[{"line":330,"column":65},{"line":330,"column":67},{"doc":"es"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"es"}}]]}]]}]]}]]}]]}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]]},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Element"},{"tag":"Record","contents":[[["props",{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"Properties"},{"tag":"Record","contents":[[["id",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["width",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["height",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}],["opacity",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}],["color",{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Color"]},"name":"Color"}}]]}],["href",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["tag",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}],["hover",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}],["click",{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple0"}}]],null]}]}],["element",{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Graphics","Element"]},"name":"ElementPrim"}}]],null]}]}]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Basics"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}],[["Color"],{"tag":"Open","contents":{"_explicits":[],"_open":true}}],[["List"],{"tag":"As","contents":"List"}],[["Maybe"],{"tag":"Open","contents":{"_explicits":[{"tag":"Union","contents":["Maybe",{"_explicits":[],"_open":true}]}],"_open":false}}],[["Native","Graphics","Element"],{"tag":"As","contents":"Native.Graphics.Element"}]],"names":["Graphics","Element"],"exports":[{"tag":"Alias","contents":"Properties"},{"tag":"Value","contents":"Properties"},{"tag":"Alias","contents":"Element"},{"tag":"Value","contents":"Element"},{"tag":"Value","contents":"empty"},{"tag":"Value","contents":"widthOf"},{"tag":"Value","contents":"heightOf"},{"tag":"Value","contents":"sizeOf"},{"tag":"Value","contents":"width"},{"tag":"Value","contents":"height"},{"tag":"Value","contents":"size"},{"tag":"Value","contents":"opacity"},{"tag":"Value","contents":"color"},{"tag":"Value","contents":"tag"},{"tag":"Value","contents":"link"},{"tag":"Value","contents":"newElement"},{"tag":"Union","contents":["ElementPrim",{"_explicits":["Image","Container","Flow","Spacer","RawHtml","Custom"],"_open":false}]},{"tag":"Union","contents":["ImageStyle",{"_explicits":["Plain","Fitted","Cropped","Tiled"],"_open":false}]},{"tag":"Value","contents":"image"},{"tag":"Value","contents":"fittedImage"},{"tag":"Value","contents":"croppedImage"},{"tag":"Value","contents":"tiledImage"},{"tag":"Union","contents":["Three",{"_explicits":["P","Z","N"],"_open":false}]},{"tag":"Union","contents":["Pos",{"_explicits":["Absolute","Relative"],"_open":false}]},{"tag":"Alias","contents":"Position"},{"tag":"Value","contents":"Position"},{"tag":"Value","contents":"container"},{"tag":"Value","contents":"spacer"},{"tag":"Union","contents":["Direction",{"_explicits":["DUp","DDown","DLeft","DRight","DIn","DOut"],"_open":false}]},{"tag":"Value","contents":"flow"},{"tag":"Value","contents":"above"},{"tag":"Value","contents":"below"},{"tag":"Value","contents":"beside"},{"tag":"Value","contents":"layers"},{"tag":"Value","contents":"absolute"},{"tag":"Value","contents":"relative"},{"tag":"Value","contents":"middle"},{"tag":"Value","contents":"topLeft"},{"tag":"Value","contents":"topRight"},{"tag":"Value","contents":"bottomLeft"},{"tag":"Value","contents":"bottomRight"},{"tag":"Value","contents":"midLeft"},{"tag":"Value","contents":"midRight"},{"tag":"Value","contents":"midTop"},{"tag":"Value","contents":"midBottom"},{"tag":"Value","contents":"middleAt"},{"tag":"Value","contents":"topLeftAt"},{"tag":"Value","contents":"topRightAt"},{"tag":"Value","contents":"bottomLeftAt"},{"tag":"Value","contents":"bottomRightAt"},{"tag":"Value","contents":"midLeftAt"},{"tag":"Value","contents":"midRightAt"},{"tag":"Value","contents":"midTopAt"},{"tag":"Value","contents":"midBottomAt"},{"tag":"Value","contents":"up"},{"tag":"Value","contents":"down"},{"tag":"Value","contents":"left"},{"tag":"Value","contents":"right"},{"tag":"Value","contents":"inward"},{"tag":"Value","contents":"outward"}]}
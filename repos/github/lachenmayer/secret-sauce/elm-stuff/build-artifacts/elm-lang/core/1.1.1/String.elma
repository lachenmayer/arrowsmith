{"path":"","body":{"fixities":[],"aliases":{},"datatypes":{},"types":{"length":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]},"uncons":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]]}]},"trim":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"join":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"dropLeft":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"split":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]}]},"padRight":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]},"lines":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]},"pad":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]},"toLower":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"toInt":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Result"]},"name":"Result"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]},"::":{"tag":"Lambda","contents":[{"tag":"Var","contents":"a"},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Var","contents":"a"}]]}]}]},"left":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"foldr":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Var","contents":"b"}]}]}]},"toFloat":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Result"]},"name":"Result"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]},"endsWith":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"toList":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}}]]}]},"all":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"trimLeft":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"dropRight":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"fromList":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"concat":{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"map":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"indices":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}]},"isEmpty":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},"repeat":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"trimRight":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"foldl":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Var","contents":"b"}]}]}]},"words":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]},"filter":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"slice":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]},"indexes":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]]}]}]},"right":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"reverse":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"contains":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"append":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"any":{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]},"fromChar":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"padLeft":{"tag":"Lambda","contents":[{"tag":"Aliased","contents":[{"home":{"tag":"Module","contents":["Char"]},"name":"KeyCode"},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]},"toUpper":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]},"cons":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]},"startsWith":{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}},"program":[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fromList"},[{"tag":"Span","contents":[{"line":346,"column":19},{"line":346,"column":34},{"doc":"Native.String.fromList"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"fromList"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toList"},[{"tag":"Span","contents":[{"line":337,"column":17},{"line":337,"column":30},{"doc":"Native.String.toList"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"toList"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}}]]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toFloat"},[{"tag":"Span","contents":[{"line":330,"column":18},{"line":330,"column":32},{"doc":"Native.String.toFloat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"toFloat"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Result"]},"name":"Result"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Float"}}]]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toInt"},[{"tag":"Span","contents":[{"line":320,"column":16},{"line":320,"column":28},{"doc":"Native.String.toInt"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"toInt"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Result"]},"name":"Result"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"indices"},[{"tag":"Span","contents":[{"line":309,"column":18},{"line":309,"column":32},{"doc":"Native.String.indexes"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"indexes"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"indexes"},[{"tag":"Span","contents":[{"line":305,"column":18},{"line":305,"column":32},{"doc":"Native.String.indexes"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"indexes"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"endsWith"},[{"tag":"Span","contents":[{"line":296,"column":19},{"line":296,"column":34},{"doc":"Native.String.endsWith"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"endsWith"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"startsWith"},[{"tag":"Span","contents":[{"line":288,"column":21},{"line":288,"column":38},{"doc":"Native.String.startsWith"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"startsWith"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"contains"},[{"tag":"Span","contents":[{"line":280,"column":19},{"line":280,"column":34},{"doc":"Native.String.contains"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"contains"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"all"},[{"tag":"Span","contents":[{"line":269,"column":14},{"line":269,"column":24},{"doc":"Native.String.all"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"all"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"any"},[{"tag":"Span","contents":[{"line":260,"column":14},{"line":260,"column":24},{"doc":"Native.String.any"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"any"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toLower"},[{"tag":"Span","contents":[{"line":251,"column":18},{"line":251,"column":32},{"doc":"Native.String.toLower"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"toLower"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"toUpper"},[{"tag":"Span","contents":[{"line":247,"column":18},{"line":247,"column":32},{"doc":"Native.String.toUpper"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"toUpper"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"lines"},[{"tag":"Span","contents":[{"line":241,"column":16},{"line":241,"column":28},{"doc":"Native.String.lines"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"lines"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"words"},[{"tag":"Span","contents":[{"line":234,"column":16},{"line":234,"column":28},{"doc":"Native.String.words"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"words"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"trimRight"},[{"tag":"Span","contents":[{"line":227,"column":20},{"line":227,"column":36},{"doc":"Native.String.trimRight"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"trimRight"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"trimLeft"},[{"tag":"Span","contents":[{"line":220,"column":19},{"line":220,"column":34},{"doc":"Native.String.trimLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"trimLeft"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"trim"},[{"tag":"Span","contents":[{"line":213,"column":15},{"line":213,"column":26},{"doc":"Native.String.trim"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"trim"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"padRight"},[{"tag":"Span","contents":[{"line":206,"column":19},{"line":206,"column":34},{"doc":"Native.String.padRight"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"padRight"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"padLeft"},[{"tag":"Span","contents":[{"line":197,"column":18},{"line":197,"column":32},{"doc":"Native.String.padLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"padLeft"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"pad"},[{"tag":"Span","contents":[{"line":188,"column":14},{"line":188,"column":24},{"doc":"Native.String.pad"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"pad"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"dropRight"},[{"tag":"Span","contents":[{"line":179,"column":20},{"line":179,"column":36},{"doc":"Native.String.dropRight"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"dropRight"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"dropLeft"},[{"tag":"Span","contents":[{"line":175,"column":19},{"line":175,"column":34},{"doc":"Native.String.dropLeft"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"dropLeft"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"right"},[{"tag":"Span","contents":[{"line":171,"column":16},{"line":171,"column":28},{"doc":"Native.String.right"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"right"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"left"},[{"tag":"Span","contents":[{"line":167,"column":15},{"line":167,"column":26},{"doc":"Native.String.left"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"left"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"slice"},[{"tag":"Span","contents":[{"line":163,"column":16},{"line":163,"column":28},{"doc":"Native.String.slice"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"slice"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"repeat"},[{"tag":"Span","contents":[{"line":152,"column":17},{"line":152,"column":30},{"doc":"Native.String.repeat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"repeat"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"join"},[{"tag":"Span","contents":[{"line":145,"column":15},{"line":145,"column":26},{"doc":"Native.String.join"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"join"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"split"},[{"tag":"Span","contents":[{"line":136,"column":16},{"line":136,"column":28},{"doc":"Native.String.split"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"split"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"foldr"},[{"tag":"Span","contents":[{"line":126,"column":16},{"line":126,"column":28},{"doc":"Native.String.foldr"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"foldr"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Var","contents":"b"}]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"foldl"},[{"tag":"Span","contents":[{"line":119,"column":16},{"line":119,"column":28},{"doc":"Native.String.foldl"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"foldl"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Var","contents":"b"}]}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"b"},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Var","contents":"b"}]}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"reverse"},[{"tag":"Span","contents":[{"line":112,"column":18},{"line":112,"column":32},{"doc":"Native.String.reverse"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"reverse"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"filter"},[{"tag":"Span","contents":[{"line":105,"column":17},{"line":105,"column":30},{"doc":"Native.String.filter"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"filter"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"map"},[{"tag":"Span","contents":[{"line":98,"column":14},{"line":98,"column":24},{"doc":"Native.String.map"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"map"}}],{"tag":"Lambda","contents":[{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}}]},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"length"},[{"tag":"Span","contents":[{"line":91,"column":17},{"line":91,"column":30},{"doc":"Native.String.length"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"length"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Int"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"concat"},[{"tag":"Span","contents":[{"line":82,"column":17},{"line":82,"column":30},{"doc":"Native.String.concat"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"concat"}}],{"tag":"Lambda","contents":[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"List"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"append"},[{"tag":"Span","contents":[{"line":75,"column":17},{"line":75,"column":30},{"doc":"Native.String.append"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"append"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"uncons"},[{"tag":"Span","contents":[{"line":67,"column":17},{"line":67,"column":30},{"doc":"Native.String.uncons"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"uncons"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"Module","contents":["Maybe"]},"name":"Maybe"}},[{"tag":"App","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_Tuple2"}},[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]]}]]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"cons"},[{"tag":"Span","contents":[{"line":48,"column":15},{"line":48,"column":26},{"doc":"Native.String.cons"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"cons"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"fromChar"},[{"tag":"Span","contents":[{"line":57,"column":5},{"line":57,"column":17},{"doc":"cons char \"\""}]},{"tag":"Lambda","contents":[{"tag":"Var","contents":"char"},[{"tag":"Span","contents":[{"line":57,"column":5},{"line":57,"column":17},{"doc":"cons char \"\""}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":57,"column":5},{"line":57,"column":14},{"doc":"cons char"}]},{"tag":"App","contents":[[{"tag":"Span","contents":[{"line":57,"column":5},{"line":57,"column":9},{"doc":"cons"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"cons"}}],[{"tag":"Span","contents":[{"line":57,"column":10},{"line":57,"column":14},{"doc":"char"}]},{"tag":"Var","contents":{"home":{"tag":"Local","contents":[]},"name":"char"}}]]}],[{"tag":"Span","contents":[{"line":57,"column":15},{"line":57,"column":17},{"doc":"\"\""}]},{"tag":"Literal","contents":{"tag":"Str","contents":""}}]]}]]}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Char"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}}]}]],[{"tag":"None","contents":{"doc":"let isEmpty : String -> Bool\n    isEmpty = Native.String.isEmpty\n    cons : Char -> String -> String\n    cons = Native.String.cons\n    fromChar : Char -> String\n    fromChar = \\char -> cons char \"\"\n    uncons : String -> Maybe.Maybe (Char, String)\n    uncons = Native.String.uncons\n    append : String -> String -> String\n    append = Native.String.append\n    concat : List String -> String\n    concat = Native.String.concat\n    length : String -> Int\n    length = Native.String.length\n    map : (Char -> Char) -> String -> String\n    map = Native.String.map\n    filter : (Char -> Bool) -> String -> String\n    filter = Native.String.filter\n    reverse : String -> String\n    reverse = Native.String.reverse\n    foldl : (Char -> b -> b) -> b -> String -> b\n    foldl = Native.String.foldl\n    foldr : (Char -> b -> b) -> b -> String -> b\n    foldr = Native.String.foldr\n    split : String -> String -> List String\n    split = Native.String.split\n    join : String -> List String -> String\n    join = Native.String.join\n    repeat : Int -> String -> String\n    repeat = Native.String.repeat\n    slice : Int -> Int -> String -> String\n    slice = Native.String.slice\n    left : Int -> String -> String\n    left = Native.String.left\n    right : Int -> String -> String\n    right = Native.String.right\n    dropLeft : Int -> String -> String\n    dropLeft = Native.String.dropLeft\n    dropRight : Int -> String -> String\n    dropRight = Native.String.dropRight\n    pad : Int -> Char -> String -> String\n    pad = Native.String.pad\n    padLeft : Int -> Char -> String -> String\n    padLeft = Native.String.padLeft\n    padRight : Int -> Char -> String -> String\n    padRight = Native.String.padRight\n    trim : String -> String\n    trim = Native.String.trim\n    trimLeft : String -> String\n    trimLeft = Native.String.trimLeft\n    trimRight : String -> String\n    trimRight = Native.String.trimRight\n    words : String -> List String\n    words = Native.String.words\n    lines : String -> List String\n    lines = Native.String.lines\n    toUpper : String -> String\n    toUpper = Native.String.toUpper\n    toLower : String -> String\n    toLower = Native.String.toLower\n    any : (Char -> Bool) -> String -> Bool\n    any = Native.String.any\n    all : (Char -> Bool) -> String -> Bool\n    all = Native.String.all\n    contains : String -> String -> Bool\n    contains = Native.String.contains\n    startsWith : String -> String -> Bool\n    startsWith = Native.String.startsWith\n    endsWith : String -> String -> Bool\n    endsWith = Native.String.endsWith\n    indexes : String -> String -> List Int\n    indexes = Native.String.indexes\n    indices : String -> String -> List Int\n    indices = Native.String.indexes\n    toInt : String -> Result.Result String Int\n    toInt = Native.String.toInt\n    toFloat : String -> Result.Result String Float\n    toFloat = Native.String.toFloat\n    toList : String -> List Char\n    toList = Native.String.toList\n    fromList : List Char -> String\n    fromList = Native.String.fromList\nin _save_the_environment!!!"}},{"tag":"Let","contents":[[[{"tag":"Var","contents":"isEmpty"},[{"tag":"Span","contents":[{"line":44,"column":18},{"line":44,"column":32},{"doc":"Native.String.isEmpty"}]},{"tag":"Var","contents":{"home":{"tag":"Module","contents":["Native","String"]},"name":"isEmpty"}}],{"tag":"Lambda","contents":[{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"String"}},{"tag":"Type","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"Bool"}}]}]],[{"tag":"None","contents":{"doc":"_save_the_environment!!!"}},{"tag":"Var","contents":{"home":{"tag":"BuiltIn","contents":[]},"name":"_save_the_environment!!!"}}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}]]}],"ports":[]},"imports":[[["Maybe"],{"tag":"Open","contents":{"_explicits":[{"tag":"Alias","contents":"Maybe"}],"_open":false}}],[["Native","String"],{"tag":"As","contents":"Native.String"}],[["Result"],{"tag":"Open","contents":{"_explicits":[{"tag":"Alias","contents":"Result"}],"_open":false}}]],"names":["String"],"exports":[{"tag":"Value","contents":"isEmpty"},{"tag":"Value","contents":"cons"},{"tag":"Value","contents":"fromChar"},{"tag":"Value","contents":"uncons"},{"tag":"Value","contents":"append"},{"tag":"Value","contents":"concat"},{"tag":"Value","contents":"length"},{"tag":"Value","contents":"map"},{"tag":"Value","contents":"filter"},{"tag":"Value","contents":"reverse"},{"tag":"Value","contents":"foldl"},{"tag":"Value","contents":"foldr"},{"tag":"Value","contents":"split"},{"tag":"Value","contents":"join"},{"tag":"Value","contents":"repeat"},{"tag":"Value","contents":"slice"},{"tag":"Value","contents":"left"},{"tag":"Value","contents":"right"},{"tag":"Value","contents":"dropLeft"},{"tag":"Value","contents":"dropRight"},{"tag":"Value","contents":"pad"},{"tag":"Value","contents":"padLeft"},{"tag":"Value","contents":"padRight"},{"tag":"Value","contents":"trim"},{"tag":"Value","contents":"trimLeft"},{"tag":"Value","contents":"trimRight"},{"tag":"Value","contents":"words"},{"tag":"Value","contents":"lines"},{"tag":"Value","contents":"toUpper"},{"tag":"Value","contents":"toLower"},{"tag":"Value","contents":"any"},{"tag":"Value","contents":"all"},{"tag":"Value","contents":"contains"},{"tag":"Value","contents":"startsWith"},{"tag":"Value","contents":"endsWith"},{"tag":"Value","contents":"indexes"},{"tag":"Value","contents":"indices"},{"tag":"Value","contents":"toInt"},{"tag":"Value","contents":"toFloat"},{"tag":"Value","contents":"toList"},{"tag":"Value","contents":"fromList"}]}
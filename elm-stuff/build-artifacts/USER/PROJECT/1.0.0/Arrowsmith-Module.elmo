Elm.Arrowsmith = Elm.Arrowsmith || {};
Elm.Arrowsmith.Module = Elm.Arrowsmith.Module || {};
Elm.Arrowsmith.Module.make = function (_elm) {
   "use strict";
   _elm.Arrowsmith = _elm.Arrowsmith || {};
   _elm.Arrowsmith.Module = _elm.Arrowsmith.Module || {};
   if (_elm.Arrowsmith.Module.values)
   return _elm.Arrowsmith.Module.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Arrowsmith.Module",
   $Arrowsmith$Types = Elm.Arrowsmith.Types.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $String = Elm.String.make(_elm);
   var fromPort = function (portModule) {
      return {_: {}
             ,defs: portModule.defs
             ,errors: portModule.errors
             ,imports: portModule.imports
             ,name: portModule.name
             ,types: A2($Dict.singleton,
             "encode",
             $Arrowsmith$Types.Var("foo"))};
   };
   var empty = {_: {}
               ,defs: _L.fromArray([])
               ,errors: _L.fromArray([])
               ,imports: _L.fromArray([])
               ,name: _L.fromArray(["Program"])
               ,types: $Dict.empty};
   var nameToString = function (name) {
      return $List.isEmpty(name) ? "Program" : $String.concat(A2($List.intersperse,
      ".",
      name));
   };
   var replaceDefinition = F3(function (program,
   name,
   newDefinition) {
      return function () {
         var update = function (oldDefinition) {
            return function () {
               var _ = oldDefinition;
               var oldName = function () {
                  switch (_.ctor)
                  {case "_Tuple3": return _._0;}
                  _U.badCase($moduleName,
                  "on line 23, column 29 to 42");
               }();
               return _U.eq(oldName,
               name) ? newDefinition : oldDefinition;
            }();
         };
         return _U.replace([["defs"
                            ,A2($List.map,
                            update,
                            program.defs)]],
         program);
      }();
   });
   var removeDefinition = F2(function (program,
   toRemove) {
      return _U.replace([["defs"
                         ,A2($List.filter,
                         function (_v4) {
                            return function () {
                               switch (_v4.ctor)
                               {case "_Tuple3":
                                  return !_U.eq(_v4._0,toRemove);}
                               _U.badCase($moduleName,
                               "on line 17, column 48 to 64");
                            }();
                         },
                         program.defs)]],
      program);
   });
   var newDefinition = F2(function (program,
   def) {
      return _U.replace([["defs"
                         ,A2($Basics._op["++"],
                         program.defs,
                         _L.fromArray([def]))]],
      program);
   });
   _elm.Arrowsmith.Module.values = {_op: _op
                                   ,newDefinition: newDefinition
                                   ,removeDefinition: removeDefinition
                                   ,replaceDefinition: replaceDefinition
                                   ,nameToString: nameToString
                                   ,empty: empty
                                   ,fromPort: fromPort};
   return _elm.Arrowsmith.Module.values;
};
Elm.Arrowsmith = Elm.Arrowsmith || {};
Elm.Arrowsmith.Types = Elm.Arrowsmith.Types || {};
Elm.Arrowsmith.Types.make = function (_elm) {
   "use strict";
   _elm.Arrowsmith = _elm.Arrowsmith || {};
   _elm.Arrowsmith.Types = _elm.Arrowsmith.Types || {};
   if (_elm.Arrowsmith.Types.values)
   return _elm.Arrowsmith.Types.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Arrowsmith.Types",
   $Dict = Elm.Dict.make(_elm),
   $Maybe = Elm.Maybe.make(_elm);
   var AdtInfo = F2(function (a,
   b) {
      return {_: {}
             ,adtVars: a
             ,constructors: b};
   });
   var ImportMethod = F2(function (a,
   b) {
      return {_: {}
             ,alias: a
             ,exposedVars: b};
   });
   var Listing = F2(function (a,
   b) {
      return {_: {}
             ,explicits: a
             ,open: b};
   });
   var CompileError = function (a) {
      return {ctor: "CompileError"
             ,_0: a};
   };
   var Compiled = {ctor: "Compiled"};
   var Repo = F3(function (a,b,c) {
      return {_: {}
             ,backend: a
             ,project: c
             ,user: b};
   });
   var Module = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,datatypes: d
             ,defs: e
             ,errors: f
             ,imports: b
             ,name: a
             ,types: c};
   });
   _elm.Arrowsmith.Types.values = {_op: _op
                                  ,Module: Module
                                  ,Repo: Repo
                                  ,Compiled: Compiled
                                  ,CompileError: CompileError
                                  ,Listing: Listing
                                  ,ImportMethod: ImportMethod
                                  ,AdtInfo: AdtInfo};
   return _elm.Arrowsmith.Types.values;
};
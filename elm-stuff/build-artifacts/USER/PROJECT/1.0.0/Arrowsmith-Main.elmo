Elm.Arrowsmith = Elm.Arrowsmith || {};
Elm.Arrowsmith.Main = Elm.Arrowsmith.Main || {};
Elm.Arrowsmith.Main.make = function (_elm) {
   "use strict";
   _elm.Arrowsmith = _elm.Arrowsmith || {};
   _elm.Arrowsmith.Main = _elm.Arrowsmith.Main || {};
   if (_elm.Arrowsmith.Main.values)
   return _elm.Arrowsmith.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Arrowsmith.Main",
   $Arrowsmith$Module = Elm.Arrowsmith.Module.make(_elm),
   $Arrowsmith$Types = Elm.Arrowsmith.Types.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var tag = F2(function ($class,
   attrs) {
      return $Html.td(A2($List._op["::"],
      $Html$Attributes.$class(A2($Basics._op["++"],
      "tag ",
      $class)),
      attrs));
   });
   var div = function ($class) {
      return $Html.div(_L.fromArray([$Html$Attributes.$class($class)]));
   };
   var visible = function (v) {
      return $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                  ,_0: "visibility"
                                                  ,_1: v ? "visible" : "hidden"}]));
   };
   var keepJust = F2(function (maybes,
   $default) {
      return function () {
         var decorate = function (maybe) {
            return function () {
               switch (maybe.ctor)
               {case "Just":
                  return {ctor: "_Tuple2"
                         ,_0: true
                         ,_1: maybe._0};
                  case "Nothing":
                  return {ctor: "_Tuple2"
                         ,_0: false
                         ,_1: $default};}
               _U.badCase($moduleName,
               "between lines 268 and 271");
            }();
         };
         return A2($Signal._op["<~"],
         $Basics.snd,
         A3($Signal.keepIf,
         $Basics.fst,
         {ctor: "_Tuple2"
         ,_0: false
         ,_1: $default},
         A2($Signal._op["<~"],
         decorate,
         maybes)));
      }();
   });
   var errorView = function (status) {
      return function () {
         switch (status.ctor)
         {case "Err": return A2(div,
              "error",
              _L.fromArray([A2($Html.pre,
              _L.fromArray([]),
              _L.fromArray([$Html.text(status._0)]))]));
            case "Ok": return A2(div,
              "no-error",
              _L.fromArray([]));}
         _U.badCase($moduleName,
         "between lines 252 and 254");
      }();
   };
   var adtView = function (code) {
      return A2(div,
      "adt",
      _L.fromArray([A2($Html.code,
      _L.fromArray([]),
      _L.fromArray([$Html.text(code)]))]));
   };
   var importView = function (code) {
      return A2(div,
      "import",
      _L.fromArray([$Html.text(code)]));
   };
   var moduleUpdates = _P.portIn("moduleUpdates",
   _P.incomingSignal(function (v) {
      return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple2"
                                                           ,_0: typeof v[0] === "object" && "name" in v[0] && "imports" in v[0] && "adts" in v[0] && "defs" in v[0] ? {_: {}
                                                                                                                                                                      ,name: typeof v[0].name === "object" && v[0].name instanceof Array ? Elm.Native.List.make(_elm).fromArray(v[0].name.map(function (v) {
                                                                                                                                                                         return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
                                                                                                                                                                         v);
                                                                                                                                                                      })) : _U.badPort("an array",
                                                                                                                                                                      v[0].name)
                                                                                                                                                                      ,imports: typeof v[0].imports === "object" && v[0].imports instanceof Array ? Elm.Native.List.make(_elm).fromArray(v[0].imports.map(function (v) {
                                                                                                                                                                         return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
                                                                                                                                                                         v);
                                                                                                                                                                      })) : _U.badPort("an array",
                                                                                                                                                                      v[0].imports)
                                                                                                                                                                      ,adts: typeof v[0].adts === "object" && v[0].adts instanceof Array ? Elm.Native.List.make(_elm).fromArray(v[0].adts.map(function (v) {
                                                                                                                                                                         return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
                                                                                                                                                                         v);
                                                                                                                                                                      })) : _U.badPort("an array",
                                                                                                                                                                      v[0].adts)
                                                                                                                                                                      ,defs: typeof v[0].defs === "object" && v[0].defs instanceof Array ? Elm.Native.List.make(_elm).fromArray(v[0].defs.map(function (v) {
                                                                                                                                                                         return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple3"
                                                                                                                                                                                                                              ,_0: typeof v[0] === "string" || typeof v[0] === "object" && v[0] instanceof String ? v[0] : _U.badPort("a string",
                                                                                                                                                                                                                              v[0])
                                                                                                                                                                                                                              ,_1: v[1] === null ? Elm.Maybe.make(_elm).Nothing : Elm.Maybe.make(_elm).Just(typeof v[1] === "string" || typeof v[1] === "object" && v[1] instanceof String ? v[1] : _U.badPort("a string",
                                                                                                                                                                                                                              v[1]))
                                                                                                                                                                                                                              ,_2: typeof v[2] === "string" || typeof v[2] === "object" && v[2] instanceof String ? v[2] : _U.badPort("a string",
                                                                                                                                                                                                                              v[2])} : _U.badPort("an array",
                                                                                                                                                                         v);
                                                                                                                                                                      })) : _U.badPort("an array",
                                                                                                                                                                      v[0].defs)} : _U.badPort("an object with fields \'name\', \'imports\', \'adts\', \'defs\'",
                                                           v[0])
                                                           ,_1: typeof v[1] === "object" && v[1] instanceof Array ? {ctor: "_Tuple2"
                                                                                                                    ,_0: typeof v[1][0] === "string" || typeof v[1][0] === "object" && v[1][0] instanceof String ? v[1][0] : _U.badPort("a string",
                                                                                                                    v[1][0])
                                                                                                                    ,_1: typeof v[1][1] === "string" || typeof v[1][1] === "object" && v[1][1] instanceof String ? v[1][1] : _U.badPort("a string",
                                                                                                                    v[1][1])} : _U.badPort("an array",
                                                           v[1])} : _U.badPort("an array",
      v);
   }));
   var initialModule = _P.portIn("initialModule",
   function (v) {
      return typeof v === "object" && "name" in v && "imports" in v && "adts" in v && "defs" in v ? {_: {}
                                                                                                    ,name: typeof v.name === "object" && v.name instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.name.map(function (v) {
                                                                                                       return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
                                                                                                       v);
                                                                                                    })) : _U.badPort("an array",
                                                                                                    v.name)
                                                                                                    ,imports: typeof v.imports === "object" && v.imports instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.imports.map(function (v) {
                                                                                                       return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
                                                                                                       v);
                                                                                                    })) : _U.badPort("an array",
                                                                                                    v.imports)
                                                                                                    ,adts: typeof v.adts === "object" && v.adts instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.adts.map(function (v) {
                                                                                                       return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
                                                                                                       v);
                                                                                                    })) : _U.badPort("an array",
                                                                                                    v.adts)
                                                                                                    ,defs: typeof v.defs === "object" && v.defs instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.defs.map(function (v) {
                                                                                                       return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple3"
                                                                                                                                                            ,_0: typeof v[0] === "string" || typeof v[0] === "object" && v[0] instanceof String ? v[0] : _U.badPort("a string",
                                                                                                                                                            v[0])
                                                                                                                                                            ,_1: v[1] === null ? Elm.Maybe.make(_elm).Nothing : Elm.Maybe.make(_elm).Just(typeof v[1] === "string" || typeof v[1] === "object" && v[1] instanceof String ? v[1] : _U.badPort("a string",
                                                                                                                                                            v[1]))
                                                                                                                                                            ,_2: typeof v[2] === "string" || typeof v[2] === "object" && v[2] instanceof String ? v[2] : _U.badPort("a string",
                                                                                                                                                            v[2])} : _U.badPort("an array",
                                                                                                       v);
                                                                                                    })) : _U.badPort("an array",
                                                                                                    v.defs)} : _U.badPort("an object with fields \'name\', \'imports\', \'adts\', \'defs\'",
      v);
   });
   var compileResponse = _P.portIn("compileResponse",
   _P.incomingSignal(function (v) {
      return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple2"
                                                           ,_0: typeof v[0] === "string" || typeof v[0] === "object" && v[0] instanceof String ? v[0] : _U.badPort("a string",
                                                           v[0])
                                                           ,_1: typeof v[1] === "string" || typeof v[1] === "object" && v[1] instanceof String ? v[1] : _U.badPort("a string",
                                                           v[1])} : _U.badPort("an array",
      v);
   }));
   var evaluatedValue = _P.portIn("evaluatedValue",
   _P.incomingSignal(function (v) {
      return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple3"
                                                           ,_0: typeof v[0] === "object" && v[0] instanceof Array ? Elm.Native.List.make(_elm).fromArray(v[0].map(function (v) {
                                                              return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",
                                                              v);
                                                           })) : _U.badPort("an array",
                                                           v[0])
                                                           ,_1: typeof v[1] === "string" || typeof v[1] === "object" && v[1] instanceof String ? v[1] : _U.badPort("a string",
                                                           v[1])
                                                           ,_2: typeof v[2] === "string" || typeof v[2] === "object" && v[2] instanceof String ? v[2] : _U.badPort("a string",
                                                           v[2])} : _U.badPort("an array",
      v);
   }));
   var editedValue = _P.portIn("editedValue",
   _P.incomingSignal(function (v) {
      return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple2"
                                                           ,_0: typeof v[0] === "string" || typeof v[0] === "object" && v[0] instanceof String ? v[0] : _U.badPort("a string",
                                                           v[0])
                                                           ,_1: typeof v[1] === "string" || typeof v[1] === "object" && v[1] instanceof String ? v[1] : _U.badPort("a string",
                                                           v[1])} : _U.badPort("an array",
      v);
   }));
   var step = F2(function (action,
   state) {
      return function () {
         var _v5 = A2($Debug.log,
         "action",
         action);
         switch (_v5.ctor)
         {case "Compile":
            return _U.replace([["isCompiling"
                               ,true]],
              state);
            case "Edit":
            return _U.replace([["editing"
                               ,$Maybe.Just(_v5._0)]],
              state);
            case "Evaluate":
            return _U.replace([["toEvaluate"
                               ,$Maybe.Just(_v5._0)]],
              state);
            case "FinishCompiling":
            switch (_v5._0.ctor)
              {case "_Tuple2":
                 return _U.replace([["isCompiling"
                                    ,false]
                                   ,["dirty",false]
                                   ,["compilationStatus"
                                    ,function () {
                                       switch (_v5._0._0)
                                       {case "Err":
                                          return $Result.Err(_v5._0._1);
                                          case "Ok":
                                          return $Result.Ok(_v5._0._1);}
                                       _U.badCase($moduleName,
                                       "between lines 64 and 66");
                                    }()]],
                   state);}
              break;
            case "FinishEditing":
            switch (_v5._0.ctor)
              {case "_Tuple2":
                 return _U.replace([["editing"
                                    ,$Maybe.Nothing]
                                   ,["dirty",true]
                                   ,["modul"
                                    ,A3($Arrowsmith$Module.replaceDefinition,
                                    state.modul,
                                    _v5._0._0,
                                    {ctor: "_Tuple3"
                                    ,_0: _v5._0._0
                                    ,_1: $Maybe.Nothing
                                    ,_2: _v5._0._1})]],
                   state);}
              break;
            case "FinishEvaluating":
            switch (_v5._0.ctor)
              {case "_Tuple3":
                 return _U.replace([["values"
                                    ,A3($Dict.insert,
                                    _v5._0._1,
                                    _v5._0._2,
                                    state.values)]
                                   ,["toEvaluate",$Maybe.Nothing]],
                   state);}
              break;
            case "NewDefinition":
            return _U.replace([["modul"
                               ,A2($Arrowsmith$Module.freshDefinition,
                               state.modul,
                               state.fresh)]
                              ,["fresh",state.fresh + 1]],
              state);
            case "NoOp": return state;
            case "RemoveDefinition":
            return _U.replace([["modul"
                               ,A2($Arrowsmith$Module.removeDefinition,
                               state.modul,
                               _v5._0)]
                              ,["dirty",true]],
              state);
            case "StopEditing":
            return state;}
         _U.badCase($moduleName,
         "between lines 55 and 91");
      }();
   });
   var actions = $Signal.channel($Arrowsmith$Types.NoOp);
   var action = $Signal.send(actions);
   var defHeaderView = F2(function (moduleName,
   _v22) {
      return function () {
         switch (_v22.ctor)
         {case "_Tuple3":
            return function () {
                 var evalTag = A3(tag,
                 "definition-evaluate",
                 _L.fromArray([$Html$Events.onClick(action($Arrowsmith$Types.Evaluate({ctor: "_Tuple2"
                                                                                      ,_0: moduleName
                                                                                      ,_1: _v22._0})))]),
                 _L.fromArray([$Html.text("eval")]));
                 var nameTag = A3(tag,
                 "definition-name",
                 _L.fromArray([]),
                 _L.fromArray([$Html.text(_v22._0)]));
                 var header = function () {
                    switch (_v22._1.ctor)
                    {case "Just":
                       return _L.fromArray([nameTag
                                           ,A3(tag,
                                           "definition-type",
                                           _L.fromArray([]),
                                           _L.fromArray([$Html.text(_v22._1._0)]))
                                           ,evalTag]);
                       case "Nothing":
                       return _L.fromArray([nameTag
                                           ,evalTag]);}
                    _U.badCase($moduleName,
                    "between lines 210 and 215");
                 }();
                 return A2($Html.table,
                 _L.fromArray([$Html$Attributes.$class("definition-header")]),
                 _L.fromArray([A2($Html.tr,
                 _L.fromArray([]),
                 header)]));
              }();}
         _U.badCase($moduleName,
         "between lines 207 and 217");
      }();
   });
   var button = F3(function (className,
   buttonText,
   act) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class(className)
                   ,$Html$Events.onClick(action(act))]),
      _L.fromArray([$Html.text(buttonText)]));
   });
   var compileButton = function (modul) {
      return A3(button,
      "compile-button",
      "compile",
      $Arrowsmith$Types.Compile(modul));
   };
   var editActions = function (name) {
      return _L.fromArray([$Html$Events.onFocus(action($Arrowsmith$Types.Edit(name)))
                          ,$Html$Events.onBlur(action($Arrowsmith$Types.StopEditing(name)))]);
   };
   var editable = F4(function (name,
   tagName,
   additionalAttrs,
   contents) {
      return function () {
         var attrs = A2($List._op["::"],
         $Html$Attributes.contenteditable(true),
         A2($Basics._op["++"],
         editActions(name),
         additionalAttrs));
         return A3($Html.node,
         tagName,
         attrs,
         contents);
      }();
   });
   var codeView = function (_v29) {
      return function () {
         switch (_v29.ctor)
         {case "_Tuple3":
            return function () {
                 var content = _U.eq(_v29._2,
                 $Arrowsmith$Module.undefinedBinding) || _U.eq(_v29._2,
                 "") ? A2($Html.span,
                 _L.fromArray([$Html$Attributes.$class("undefined-definition")]),
                 _L.fromArray([$Html.text("undefined")])) : $Html.text(_v29._2);
                 return A4(editable,
                 _v29._0,
                 "textarea",
                 _L.fromArray([$Html$Attributes.$class("definition-code")]),
                 _L.fromArray([content]));
              }();}
         _U.badCase($moduleName,
         "between lines 194 and 203");
      }();
   };
   var defView = F3(function (values,
   moduleName,
   definition) {
      return function () {
         var $ = definition,
         name = $._0,
         tipe = $._1,
         binding = $._2;
         var $class = A2($Basics._op["++"],
         "definition defname-",
         name);
         var valueView = function () {
            var _v34 = A2($Dict.get,
            name,
            values);
            switch (_v34.ctor)
            {case "Just":
               return _L.fromArray([A2(div,
                 "definition-value",
                 _L.fromArray([$Html.text(_v34._0)]))]);
               case "Nothing":
               return _L.fromArray([]);}
            _U.badCase($moduleName,
            "between lines 224 and 227");
         }();
         return $Html.div(_L.fromArray([$Html$Attributes.$class($class)]))(A2($Basics._op["++"],
         _L.fromArray([A2(defHeaderView,
                      moduleName,
                      definition)
                      ,codeView(definition)]),
         valueView));
      }();
   });
   var moduleView = F2(function (values,
   modul) {
      return function () {
         var $ = modul,
         name = $.name,
         imports = $.imports,
         adts = $.adts,
         defs = $.defs;
         return A2(div,
         "module",
         _L.fromArray([A2(div,
                      "module-header",
                      _L.fromArray([A2($Html.span,
                                   _L.fromArray([$Html$Attributes.$class("module-name")]),
                                   _L.fromArray([$Html.text($Arrowsmith$Module.nameToString(name))]))
                                   ,compileButton(modul)]))
                      ,div("module-imports")(A2($List.map,
                      importView,
                      imports))
                      ,div("module-adts")(A2($List.map,
                      adtView,
                      adts))
                      ,div("module-defs")(A2($Basics._op["++"],
                      A2($List.map,
                      A2(defView,values,name),
                      defs),
                      _L.fromArray([A3(button,
                      "new-def-button",
                      "+",
                      $Arrowsmith$Types.NewDefinition)])))]));
      }();
   });
   var view = function (_v36) {
      return function () {
         return A2(div,
         "modules",
         _L.fromArray([A2(moduleView,
                      _v36.values,
                      _v36.modul)
                      ,errorView(_v36.compilationStatus)]));
      }();
   };
   var stopEditing = _P.portOut("stopEditing",
   _P.outgoingSignal(function (v) {
      return v;
   }),
   function () {
      var isStopEditingAction = function (a) {
         return function () {
            switch (a.ctor)
            {case "StopEditing":
               return true;}
            return false;
         }();
      };
      var extractValue = function (a) {
         return function () {
            switch (a.ctor)
            {case "StopEditing":
               return a._0;}
            return "";
         }();
      };
      return A2($Signal._op["<~"],
      extractValue,
      A3($Signal.keepIf,
      isStopEditingAction,
      $Arrowsmith$Types.NoOp,
      $Signal.subscribe(actions)));
   }());
   var evaluate = _P.portOut("evaluate",
   _P.outgoingSignal(function (v) {
      return [Elm.Native.List.make(_elm).toArray(v._0).map(function (v) {
                return v;
             })
             ,v._1];
   }),
   function () {
      var isEvaluateAction = function (a) {
         return function () {
            switch (a.ctor)
            {case "Evaluate": return true;}
            return false;
         }();
      };
      var extractValue = function (a) {
         return function () {
            switch (a.ctor)
            {case "Evaluate": return a._0;}
            return {ctor: "_Tuple2"
                   ,_0: _L.fromArray([])
                   ,_1: ""};
         }();
      };
      return A2($Signal._op["<~"],
      extractValue,
      A3($Signal.keepIf,
      isEvaluateAction,
      $Arrowsmith$Types.NoOp,
      $Signal.subscribe(actions)));
   }());
   var compileModule = _P.portOut("compileModule",
   _P.outgoingSignal(function (v) {
      return v;
   }),
   function () {
      var isCompileAction = function (a) {
         return function () {
            switch (a.ctor)
            {case "Compile": return true;}
            return false;
         }();
      };
      var extractValue = function (a) {
         return function () {
            switch (a.ctor)
            {case "Compile": return a._0;}
            return $Arrowsmith$Module.empty;
         }();
      };
      var compileAction = A2($Signal._op["<~"],
      extractValue,
      A3($Signal.keepIf,
      isCompileAction,
      $Arrowsmith$Types.NoOp,
      $Signal.subscribe(actions)));
      return A2($Signal._op["<~"],
      $Arrowsmith$Module.toString,
      compileAction);
   }());
   var initialState = {_: {}
                      ,compilationStatus: $Result.Ok("")
                      ,dirty: true
                      ,editing: $Maybe.Nothing
                      ,fresh: 0
                      ,isCompiling: false
                      ,modul: initialModule
                      ,toEvaluate: $Maybe.Nothing
                      ,values: $Dict.empty};
   var state = function () {
      var events = $Signal.mergeMany(_L.fromArray([$Signal.subscribe(actions)
                                                  ,A2($Signal._op["<~"],
                                                  $Arrowsmith$Types.FinishCompiling,
                                                  compileResponse)
                                                  ,A2($Signal._op["<~"],
                                                  $Arrowsmith$Types.FinishEditing,
                                                  editedValue)
                                                  ,A2($Signal._op["<~"],
                                                  $Arrowsmith$Types.FinishEvaluating,
                                                  evaluatedValue)]));
      return A3($Signal.foldp,
      step,
      initialState,
      events);
   }();
   var main = A2($Signal._op["<~"],
   view,
   state);
   _elm.Arrowsmith.Main.values = {_op: _op
                                 ,initialState: initialState
                                 ,actions: actions
                                 ,action: action
                                 ,step: step
                                 ,state: state
                                 ,importView: importView
                                 ,adtView: adtView
                                 ,codeView: codeView
                                 ,defHeaderView: defHeaderView
                                 ,defView: defView
                                 ,compileButton: compileButton
                                 ,moduleView: moduleView
                                 ,errorView: errorView
                                 ,view: view
                                 ,keepJust: keepJust
                                 ,button: button
                                 ,editable: editable
                                 ,editActions: editActions
                                 ,visible: visible
                                 ,div: div
                                 ,tag: tag
                                 ,main: main};
   return _elm.Arrowsmith.Main.values;
};
:l Arrowsmith.Repo Arrowsmith.Types Arrowsmith.Project Arrowsmith.ElmFile Arrowsmith.Edit
:m + Arrowsmith.Repo Arrowsmith.Types Arrowsmith.Project Arrowsmith.ElmFile Data.Either Arrowsmith.Edit
let ri = RepoInfo {backend = "github", user = "lachenmayer", project = "secret-sauce"}

p' <- createProject ri
let Right p = p'

let Just b = Data.HashMap.Strict.lookup ["Bar", "Baz"] (elmFiles p)
Right l <- getLatest b

Right f <- compile (head $ sources p)

performEdit f (AddDefinition ("wateva", Just "String", "wateva = \"unoit\""))


["AddDefinition",["wateva","String","wateva = \"unoit babez\""]]
"[\"AddDefinition\",[\"wateva\",\"String\",\"wateva = \\\"unoit\\\"\"]]"


client = require('rest').wrap(require('rest/interceptor/mime')
client(method: 'POST', path: 'http://localhost:8000/github/lachenmayer/secret-sauce/Foo/edit', entity: "[\"AddDefinition\",[\"wateva\",\"String\",\"wateva = \\\"unoit\\\"\"]]").then((x) -> console.log x)


import Arrowsmith.Module
import qualified Data.ByteString.Lazy as BS
src <- readFile "repos/github/lachenmayer/secret-sauce/src/Bar/Baz.elm"
f <- BS.readFile "tmp/github/lachenmayer/secret-sauce/a19eff0dae50558a6c2d5c7f510181aa5f279c61/Bar-Baz.elma"
let Just ast = fromAstFile f

moduleSourceDefs src ast

map (defFromSource src) (definitions ast)

let f = ElmFile {filePath = "src/Bar/Baz.elm", fileName = ["Bar","Baz"], source = "module Bar.Baz where\n\nbuzz = \"sure.\"asdfasdfasdf", compiledCode = Just "nope", modul = Just (Module {name = ["Bar","Baz"], imports = [], adts = [], defs = [("buzz",Nothing,"buzz = \"sure.\"",(3,1),(3,15))], errors = []}), inRepo = RepoInfo {backend = "github", user = "lachenmayer", project = "secret-sauce"}}